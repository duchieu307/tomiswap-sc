/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TomiPlatformInterface extends ethers.utils.Interface {
  functions: {
    "CONFIG()": FunctionFragment;
    "FACTORY()": FunctionFragment;
    "GOVERNANCE()": FunctionFragment;
    "PERCENT_DENOMINATOR()": FunctionFragment;
    "POOL()": FunctionFragment;
    "TOMI()": FunctionFragment;
    "TRANSFER_LISTENER()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addLiquidityETH(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "checkPath(address,address[])": FunctionFragment;
    "existPair(address,address)": FunctionFragment;
    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "getReserves(address,address)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "isPause()": FunctionFragment;
    "migrateLiquidity(address,address,address,address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pairFor(address,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "resume()": FunctionFragment;
    "swapETHForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactETHForTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapPrecondition(address)": FunctionFragment;
    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CONFIG", values?: undefined): string;
  encodeFunctionData(functionFragment: "FACTORY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GOVERNANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "POOL", values?: undefined): string;
  encodeFunctionData(functionFragment: "TOMI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_LISTENER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkPath",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "existPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateLiquidity",
    values: [string, string, string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairFor",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPrecondition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CONFIG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FACTORY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GOVERNANCE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POOL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOMI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_LISTENER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkPath", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "existPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPrecondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AddLiquidity(address,address,address,uint256,uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "RemoveLiquidity(address,address,address,uint256,uint256)": EventFragment;
    "SwapToken(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapToken"): EventFragment;
}

export class TomiPlatform extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TomiPlatformInterface;

  functions: {
    CONFIG(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "CONFIG()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    FACTORY(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "FACTORY()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    GOVERNANCE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "GOVERNANCE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PERCENT_DENOMINATOR(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "PERCENT_DENOMINATOR()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    POOL(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "POOL()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    TOMI(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TOMI()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    TRANSFER_LISTENER(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TRANSFER_LISTENER()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WETH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkPath(
      _path: string,
      _paths: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "checkPath(address,address[])"(
      _path: string,
      _paths: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    existPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "existPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      0: BigNumber;
    }>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      0: BigNumber;
    }>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      0: BigNumber;
    }>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      0: BigNumber;
    }>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    initialize(
      _TOMI: string,
      _CONFIG: string,
      _FACTORY: string,
      _WETH: string,
      _GOVERNANCE: string,
      _TRANSFER_LISTENER: string,
      _POOL: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address,address)"(
      _TOMI: string,
      _CONFIG: string,
      _FACTORY: string,
      _WETH: string,
      _GOVERNANCE: string,
      _TRANSFER_LISTENER: string,
      _POOL: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isPause(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isPause()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    migrateLiquidity(
      pair: string,
      tokenA: string,
      tokenB: string,
      users: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrateLiquidity(address,address,address,address[])"(
      pair: string,
      tokenA: string,
      tokenB: string,
      users: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pairFor(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pairFor(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resume(overrides?: Overrides): Promise<ContractTransaction>;

    "resume()"(overrides?: Overrides): Promise<ContractTransaction>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapExactETHForTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapPrecondition(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "swapPrecondition(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "version()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  CONFIG(overrides?: CallOverrides): Promise<string>;

  "CONFIG()"(overrides?: CallOverrides): Promise<string>;

  FACTORY(overrides?: CallOverrides): Promise<string>;

  "FACTORY()"(overrides?: CallOverrides): Promise<string>;

  GOVERNANCE(overrides?: CallOverrides): Promise<string>;

  "GOVERNANCE()"(overrides?: CallOverrides): Promise<string>;

  PERCENT_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "PERCENT_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  POOL(overrides?: CallOverrides): Promise<string>;

  "POOL()"(overrides?: CallOverrides): Promise<string>;

  TOMI(overrides?: CallOverrides): Promise<string>;

  "TOMI()"(overrides?: CallOverrides): Promise<string>;

  TRANSFER_LISTENER(overrides?: CallOverrides): Promise<string>;

  "TRANSFER_LISTENER()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    tokenA: string,
    tokenB: string,
    amountA: BigNumberish,
    amountB: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
    tokenA: string,
    tokenB: string,
    amountA: BigNumberish,
    amountB: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    token: string,
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidityETH(address,uint256,uint256,uint256,uint256)"(
    token: string,
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  changeOwner(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkPath(
    _path: string,
    _paths: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkPath(address,address[])"(
    _path: string,
    _paths: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  existPair(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "existPair(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountIn(uint256,uint256,uint256)"(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountOut(uint256,uint256,uint256)"(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsIn(uint256,address[])"(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsOut(uint256,address[])"(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getReserves(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "getReserves(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  initialize(
    _TOMI: string,
    _CONFIG: string,
    _FACTORY: string,
    _WETH: string,
    _GOVERNANCE: string,
    _TRANSFER_LISTENER: string,
    _POOL: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address,address)"(
    _TOMI: string,
    _CONFIG: string,
    _FACTORY: string,
    _WETH: string,
    _GOVERNANCE: string,
    _TRANSFER_LISTENER: string,
    _POOL: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isPause(overrides?: CallOverrides): Promise<boolean>;

  "isPause()"(overrides?: CallOverrides): Promise<boolean>;

  migrateLiquidity(
    pair: string,
    tokenA: string,
    tokenB: string,
    users: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrateLiquidity(address,address,address,address[])"(
    pair: string,
    tokenA: string,
    tokenB: string,
    users: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pairFor(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "pairFor(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  removeLiquidity(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)"(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resume(overrides?: Overrides): Promise<ContractTransaction>;

  "resume()"(overrides?: Overrides): Promise<ContractTransaction>;

  swapETHForExactTokens(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapETHForExactTokens(uint256,address[],address,uint256)"(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapExactETHForTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapExactETHForTokens(uint256,address[],address,uint256)"(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapExactTokensForETH(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForETH(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapPrecondition(token: string, overrides?: CallOverrides): Promise<boolean>;

  "swapPrecondition(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapTokensForExactETH(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokensForExactETH(uint256,uint256,address[],address,uint256)"(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  "version()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CONFIG(overrides?: CallOverrides): Promise<string>;

    "CONFIG()"(overrides?: CallOverrides): Promise<string>;

    FACTORY(overrides?: CallOverrides): Promise<string>;

    "FACTORY()"(overrides?: CallOverrides): Promise<string>;

    GOVERNANCE(overrides?: CallOverrides): Promise<string>;

    "GOVERNANCE()"(overrides?: CallOverrides): Promise<string>;

    PERCENT_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    POOL(overrides?: CallOverrides): Promise<string>;

    "POOL()"(overrides?: CallOverrides): Promise<string>;

    TOMI(overrides?: CallOverrides): Promise<string>;

    "TOMI()"(overrides?: CallOverrides): Promise<string>;

    TRANSFER_LISTENER(overrides?: CallOverrides): Promise<string>;

    "TRANSFER_LISTENER()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountA: BigNumber;
      _amountB: BigNumber;
      _liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountA: BigNumber;
      _amountB: BigNumber;
      _liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "addLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    changeOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkPath(
      _path: string,
      _paths: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkPath(address,address[])"(
      _path: string,
      _paths: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    existPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "existPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    initialize(
      _TOMI: string,
      _CONFIG: string,
      _FACTORY: string,
      _WETH: string,
      _GOVERNANCE: string,
      _TRANSFER_LISTENER: string,
      _POOL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,address,address)"(
      _TOMI: string,
      _CONFIG: string,
      _FACTORY: string,
      _WETH: string,
      _GOVERNANCE: string,
      _TRANSFER_LISTENER: string,
      _POOL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPause(overrides?: CallOverrides): Promise<boolean>;

    "isPause()"(overrides?: CallOverrides): Promise<boolean>;

    migrateLiquidity(
      pair: string,
      tokenA: string,
      tokenB: string,
      users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "migrateLiquidity(address,address,address,address[])"(
      pair: string,
      tokenA: string,
      tokenB: string,
      users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pairFor(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "pairFor(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    resume(overrides?: CallOverrides): Promise<void>;

    "resume()"(overrides?: CallOverrides): Promise<void>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactETHForTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapPrecondition(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "swapPrecondition(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    AddLiquidity(
      player: string | null,
      tokenA: string | null,
      tokenB: string | null,
      amountA: null,
      amountB: null
    ): EventFilter;

    OwnerChanged(
      _oldOwner: string | null,
      _newOwner: string | null
    ): EventFilter;

    RemoveLiquidity(
      player: string | null,
      tokenA: string | null,
      tokenB: string | null,
      amountA: null,
      amountB: null
    ): EventFilter;

    SwapToken(
      receiver: string | null,
      fromToken: string | null,
      toToken: string | null,
      inAmount: null,
      outAmount: null
    ): EventFilter;
  };

  estimateGas: {
    CONFIG(overrides?: CallOverrides): Promise<BigNumber>;

    "CONFIG()"(overrides?: CallOverrides): Promise<BigNumber>;

    FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    "FACTORY()"(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNANCE(overrides?: CallOverrides): Promise<BigNumber>;

    "GOVERNANCE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    POOL(overrides?: CallOverrides): Promise<BigNumber>;

    "POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOMI(overrides?: CallOverrides): Promise<BigNumber>;

    "TOMI()"(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_LISTENER(overrides?: CallOverrides): Promise<BigNumber>;

    "TRANSFER_LISTENER()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    changeOwner(_newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkPath(
      _path: string,
      _paths: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkPath(address,address[])"(
      _path: string,
      _paths: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    existPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "existPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _TOMI: string,
      _CONFIG: string,
      _FACTORY: string,
      _WETH: string,
      _GOVERNANCE: string,
      _TRANSFER_LISTENER: string,
      _POOL: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address,address)"(
      _TOMI: string,
      _CONFIG: string,
      _FACTORY: string,
      _WETH: string,
      _GOVERNANCE: string,
      _TRANSFER_LISTENER: string,
      _POOL: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isPause(overrides?: CallOverrides): Promise<BigNumber>;

    "isPause()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrateLiquidity(
      pair: string,
      tokenA: string,
      tokenB: string,
      users: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrateLiquidity(address,address,address,address[])"(
      pair: string,
      tokenA: string,
      tokenB: string,
      users: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairFor(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pairFor(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    resume(overrides?: Overrides): Promise<BigNumber>;

    "resume()"(overrides?: Overrides): Promise<BigNumber>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapExactETHForTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapPrecondition(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapPrecondition(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONFIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONFIG()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FACTORY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOVERNANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GOVERNANCE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PERCENT_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "POOL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOMI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOMI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRANSFER_LISTENER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TRANSFER_LISTENER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkPath(
      _path: string,
      _paths: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkPath(address,address[])"(
      _path: string,
      _paths: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    existPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "existPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _TOMI: string,
      _CONFIG: string,
      _FACTORY: string,
      _WETH: string,
      _GOVERNANCE: string,
      _TRANSFER_LISTENER: string,
      _POOL: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address,address)"(
      _TOMI: string,
      _CONFIG: string,
      _FACTORY: string,
      _WETH: string,
      _GOVERNANCE: string,
      _TRANSFER_LISTENER: string,
      _POOL: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isPause(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPause()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateLiquidity(
      pair: string,
      tokenA: string,
      tokenB: string,
      users: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrateLiquidity(address,address,address,address[])"(
      pair: string,
      tokenA: string,
      tokenB: string,
      users: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairFor(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairFor(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resume(overrides?: Overrides): Promise<PopulatedTransaction>;

    "resume()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapETHForExactTokens(uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapExactETHForTokens(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapPrecondition(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapPrecondition(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
