/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITomiGovernanceInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "ballotCount()": FunctionFragment;
    "ballotOf(address)": FunctionFragment;
    "ballotRevenueCount()": FunctionFragment;
    "ballotTypes(address)": FunctionFragment;
    "ballots(uint256)": FunctionFragment;
    "collectUsers(address,address)": FunctionFragment;
    "configBallots(address)": FunctionFragment;
    "revenueBallots(uint256)": FunctionFragment;
    "rewardOf(address)": FunctionFragment;
    "stakingSupply()": FunctionFragment;
    "tokenBallots(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "allowance", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ballotCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ballotOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ballotRevenueCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ballotTypes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ballots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectUsers",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "configBallots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueBallots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rewardOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBallots",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ballotCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ballotOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ballotRevenueCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ballotTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ballots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBallots",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITomiGovernance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITomiGovernanceInterface;

  functions: {
    allowance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ballotCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "ballotCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    ballotOf(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ballotOf(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ballotRevenueCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "ballotRevenueCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    ballotTypes(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ballotTypes(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ballots(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ballots(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    collectUsers(
      ballot: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "collectUsers(address,address)"(
      ballot: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    configBallots(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "configBallots(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    revenueBallots(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "revenueBallots(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    rewardOf(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewardOf(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stakingSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "stakingSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tokenBallots(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenBallots(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  allowance(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "allowance(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ballotCount(overrides?: CallOverrides): Promise<BigNumber>;

  "ballotCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  ballotOf(ballot: string, overrides?: CallOverrides): Promise<BigNumber>;

  "ballotOf(address)"(
    ballot: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ballotRevenueCount(overrides?: CallOverrides): Promise<BigNumber>;

  "ballotRevenueCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  ballotTypes(ballot: string, overrides?: CallOverrides): Promise<BigNumber>;

  "ballotTypes(address)"(
    ballot: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ballots(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ballots(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  collectUsers(
    ballot: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collectUsers(address,address)"(
    ballot: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  configBallots(ballot: string, overrides?: CallOverrides): Promise<string>;

  "configBallots(address)"(
    ballot: string,
    overrides?: CallOverrides
  ): Promise<string>;

  revenueBallots(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "revenueBallots(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardOf(ballot: string, overrides?: CallOverrides): Promise<BigNumber>;

  "rewardOf(address)"(
    ballot: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "stakingSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenBallots(ballot: string, overrides?: CallOverrides): Promise<string>;

  "tokenBallots(address)"(
    ballot: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    allowance(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allowance(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballotCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ballotCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ballotOf(ballot: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ballotOf(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballotRevenueCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ballotRevenueCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ballotTypes(ballot: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ballotTypes(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballots(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ballots(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    collectUsers(
      ballot: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectUsers(address,address)"(
      ballot: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configBallots(ballot: string, overrides?: CallOverrides): Promise<string>;

    "configBallots(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<string>;

    revenueBallots(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "revenueBallots(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardOf(ballot: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewardOf(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBallots(ballot: string, overrides?: CallOverrides): Promise<string>;

    "tokenBallots(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    allowance(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allowance(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballotCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ballotCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ballotOf(ballot: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ballotOf(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballotRevenueCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ballotRevenueCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ballotTypes(ballot: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ballotTypes(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballots(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "ballots(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectUsers(
      ballot: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectUsers(address,address)"(
      ballot: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configBallots(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "configBallots(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenueBallots(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "revenueBallots(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardOf(ballot: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewardOf(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBallots(ballot: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenBallots(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ballotCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ballotCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ballotOf(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ballotOf(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ballotRevenueCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ballotRevenueCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ballotTypes(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ballotTypes(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ballots(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ballots(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectUsers(
      ballot: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collectUsers(address,address)"(
      ballot: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configBallots(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "configBallots(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueBallots(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "revenueBallots(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardOf(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardOf(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBallots(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenBallots(address)"(
      ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
