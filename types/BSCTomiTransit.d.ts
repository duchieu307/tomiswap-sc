/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BSCTomiTransitInterface extends ethers.utils.Interface {
  functions: {
    "changeDevelopFee(uint256)": FunctionFragment;
    "changeDevelopWallet(address)": FunctionFragment;
    "changeSigner(address)": FunctionFragment;
    "collectFee()": FunctionFragment;
    "developFee()": FunctionFragment;
    "developWallet()": FunctionFragment;
    "executedMap(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairFor(address)": FunctionFragment;
    "pairTo(address)": FunctionFragment;
    "paybackTransit(address,uint256)": FunctionFragment;
    "signWallet()": FunctionFragment;
    "totalFee()": FunctionFragment;
    "withdrawTransitToken(bytes,bytes32,uint256,address,string,string,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeDevelopFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDevelopWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executedMap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairFor", values: [string]): string;
  encodeFunctionData(functionFragment: "pairTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "paybackTransit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTransitToken",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeDevelopFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDevelopWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "developFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "developWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executedMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paybackTransit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTransitToken",
    data: BytesLike
  ): Result;

  events: {
    "CollectFee(address,uint256)": EventFragment;
    "Payback(address,address,uint256)": EventFragment;
    "Withdraw(bytes32,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class BSCTomiTransit extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BSCTomiTransitInterface;

  functions: {
    changeDevelopFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeDevelopFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeDevelopWallet(
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeDevelopWallet(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeSigner(
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeSigner(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectFee(overrides?: Overrides): Promise<ContractTransaction>;

    "collectFee()"(overrides?: Overrides): Promise<ContractTransaction>;

    developFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "developFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    developWallet(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "developWallet()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    executedMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "executedMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pairFor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pairFor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pairTo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pairTo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    paybackTransit(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "paybackTransit(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    signWallet(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "signWallet()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    withdrawTransitToken(
      _signature: BytesLike,
      _transitId: BytesLike,
      _amount: BigNumberish,
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "withdrawTransitToken(bytes,bytes32,uint256,address,string,string,uint8)"(
      _signature: BytesLike,
      _transitId: BytesLike,
      _amount: BigNumberish,
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  changeDevelopFee(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeDevelopFee(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeDevelopWallet(
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeDevelopWallet(address)"(
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeSigner(
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeSigner(address)"(
    _wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectFee(overrides?: Overrides): Promise<ContractTransaction>;

  "collectFee()"(overrides?: Overrides): Promise<ContractTransaction>;

  developFee(overrides?: CallOverrides): Promise<BigNumber>;

  "developFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  developWallet(overrides?: CallOverrides): Promise<string>;

  "developWallet()"(overrides?: CallOverrides): Promise<string>;

  executedMap(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "executedMap(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pairFor(arg0: string, overrides?: CallOverrides): Promise<string>;

  "pairFor(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  pairTo(arg0: string, overrides?: CallOverrides): Promise<string>;

  "pairTo(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  paybackTransit(
    _token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "paybackTransit(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  signWallet(overrides?: CallOverrides): Promise<string>;

  "signWallet()"(overrides?: CallOverrides): Promise<string>;

  totalFee(overrides?: CallOverrides): Promise<BigNumber>;

  "totalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawTransitToken(
    _signature: BytesLike,
    _transitId: BytesLike,
    _amount: BigNumberish,
    _token: string,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "withdrawTransitToken(bytes,bytes32,uint256,address,string,string,uint8)"(
    _signature: BytesLike,
    _transitId: BytesLike,
    _amount: BigNumberish,
    _token: string,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    changeDevelopFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeDevelopFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeDevelopWallet(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeDevelopWallet(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSigner(_wallet: string, overrides?: CallOverrides): Promise<void>;

    "changeSigner(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    collectFee(overrides?: CallOverrides): Promise<void>;

    "collectFee()"(overrides?: CallOverrides): Promise<void>;

    developFee(overrides?: CallOverrides): Promise<BigNumber>;

    "developFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    developWallet(overrides?: CallOverrides): Promise<string>;

    "developWallet()"(overrides?: CallOverrides): Promise<string>;

    executedMap(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "executedMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pairFor(arg0: string, overrides?: CallOverrides): Promise<string>;

    "pairFor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pairTo(arg0: string, overrides?: CallOverrides): Promise<string>;

    "pairTo(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

    paybackTransit(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "paybackTransit(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signWallet(overrides?: CallOverrides): Promise<string>;

    "signWallet()"(overrides?: CallOverrides): Promise<string>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTransitToken(
      _signature: BytesLike,
      _transitId: BytesLike,
      _amount: BigNumberish,
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawTransitToken(bytes,bytes32,uint256,address,string,string,uint8)"(
      _signature: BytesLike,
      _transitId: BytesLike,
      _amount: BigNumberish,
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CollectFee(handler: string | null, amount: null): EventFilter;

    Payback(
      from: string | null,
      token: string | null,
      amount: null
    ): EventFilter;

    Withdraw(
      transitId: null,
      to: string | null,
      token: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    changeDevelopFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeDevelopFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeDevelopWallet(
      _wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeDevelopWallet(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeSigner(_wallet: string, overrides?: Overrides): Promise<BigNumber>;

    "changeSigner(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectFee(overrides?: Overrides): Promise<BigNumber>;

    "collectFee()"(overrides?: Overrides): Promise<BigNumber>;

    developFee(overrides?: CallOverrides): Promise<BigNumber>;

    "developFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    developWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "developWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    executedMap(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "executedMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairFor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pairFor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairTo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pairTo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paybackTransit(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "paybackTransit(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    signWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "signWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTransitToken(
      _signature: BytesLike,
      _transitId: BytesLike,
      _amount: BigNumberish,
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "withdrawTransitToken(bytes,bytes32,uint256,address,string,string,uint8)"(
      _signature: BytesLike,
      _transitId: BytesLike,
      _amount: BigNumberish,
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeDevelopFee(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeDevelopFee(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeDevelopWallet(
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeDevelopWallet(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeSigner(
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeSigner(address)"(
      _wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectFee(overrides?: Overrides): Promise<PopulatedTransaction>;

    "collectFee()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    developFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "developFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    developWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "developWallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executedMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "executedMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairFor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairFor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairTo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairTo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paybackTransit(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "paybackTransit(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    signWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "signWallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTransitToken(
      _signature: BytesLike,
      _transitId: BytesLike,
      _amount: BigNumberish,
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawTransitToken(bytes,bytes32,uint256,address,string,string,uint8)"(
      _signature: BytesLike,
      _transitId: BytesLike,
      _amount: BigNumberish,
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
