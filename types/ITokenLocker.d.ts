/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITokenLockerInterface extends ethers.utils.Interface {
  functions: {
    "canUnlockAmount(address)": FunctionFragment;
    "firstUnlock(uint256,address,uint256,bytes32[])": FunctionFragment;
    "firstUnlockAmount(uint256)": FunctionFragment;
    "lockOf(address)": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "released(address)": FunctionFragment;
    "unlock(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canUnlockAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "firstUnlock",
    values: [BigNumberish, string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "firstUnlockAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lockOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "released", values: [string]): string;
  encodeFunctionData(functionFragment: "unlock", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "canUnlockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstUnlockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {};
}

export class ITokenLocker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITokenLockerInterface;

  functions: {
    canUnlockAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "canUnlockAmount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    firstUnlock(
      _index: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "firstUnlock(uint256,address,uint256,bytes32[])"(
      _index: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    firstUnlockAmount(
      _lockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "firstUnlockAmount(uint256)"(
      _lockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lockOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lockOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    merkleRoot(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    released(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "released(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    unlock(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlock(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  canUnlockAmount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "canUnlockAmount(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  firstUnlock(
    _index: BigNumberish,
    _account: string,
    _amount: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "firstUnlock(uint256,address,uint256,bytes32[])"(
    _index: BigNumberish,
    _account: string,
    _amount: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  firstUnlockAmount(
    _lockAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "firstUnlockAmount(uint256)"(
    _lockAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lockOf(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  "merkleRoot()"(overrides?: CallOverrides): Promise<string>;

  released(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "released(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlock(_account: string, overrides?: Overrides): Promise<ContractTransaction>;

  "unlock(address)"(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    canUnlockAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canUnlockAmount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstUnlock(
      _index: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "firstUnlock(uint256,address,uint256,bytes32[])"(
      _index: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    firstUnlockAmount(
      _lockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "firstUnlockAmount(uint256)"(
      _lockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lockOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<string>;

    released(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "released(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlock(_account: string, overrides?: CallOverrides): Promise<void>;

    "unlock(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    canUnlockAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canUnlockAmount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstUnlock(
      _index: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "firstUnlock(uint256,address,uint256,bytes32[])"(
      _index: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    firstUnlockAmount(
      _lockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "firstUnlockAmount(uint256)"(
      _lockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lockOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    released(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "released(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlock(_account: string, overrides?: Overrides): Promise<BigNumber>;

    "unlock(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canUnlockAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canUnlockAmount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstUnlock(
      _index: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "firstUnlock(uint256,address,uint256,bytes32[])"(
      _index: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    firstUnlockAmount(
      _lockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "firstUnlockAmount(uint256)"(
      _lockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    released(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "released(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlock(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlock(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
