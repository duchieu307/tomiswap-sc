/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TomiTransferListenerInterface extends ethers.utils.Interface {
  functions: {
    "FACTORY()": FunctionFragment;
    "PLATFORM()": FunctionFragment;
    "TGAS()": FunctionFragment;
    "WETH()": FunctionFragment;
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairWeights(address)": FunctionFragment;
    "transferNotify(address,address,address,uint256)": FunctionFragment;
    "updatePairPowers(address[],uint256[])": FunctionFragment;
    "updateTGASImpl(address)": FunctionFragment;
    "upgradeProdutivity(address,address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "FACTORY", values?: undefined): string;
  encodeFunctionData(functionFragment: "PLATFORM", values?: undefined): string;
  encodeFunctionData(functionFragment: "TGAS", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairWeights", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferNotify",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePairPowers",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTGASImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProdutivity",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "FACTORY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PLATFORM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TGAS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferNotify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePairPowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTGASImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProdutivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "OwnerChanged(address,address)": EventFragment;
    "Transfer(address,address,address,uint256)": EventFragment;
    "WeightChanged(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WeightChanged"): EventFragment;
}

export class TomiTransferListener extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TomiTransferListenerInterface;

  functions: {
    FACTORY(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "FACTORY()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PLATFORM(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    TGAS(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TGAS()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WETH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    admin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "admin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    changeAdmin(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeAdmin(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _TGAS: string,
      _FACTORY: string,
      _WETH: string,
      _PLATFORM: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address)"(
      _TGAS: string,
      _FACTORY: string,
      _WETH: string,
      _PLATFORM: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pairWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pairWeights(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferNotify(
      from: string,
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferNotify(address,address,address,uint256)"(
      from: string,
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePairPowers(
      _pairs: string[],
      _weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePairPowers(address[],uint256[])"(
      _pairs: string[],
      _weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTGASImpl(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTGASImpl(address)"(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeProdutivity(
      fromPair: string,
      toPair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeProdutivity(address,address)"(
      fromPair: string,
      toPair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "version()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  FACTORY(overrides?: CallOverrides): Promise<string>;

  "FACTORY()"(overrides?: CallOverrides): Promise<string>;

  PLATFORM(overrides?: CallOverrides): Promise<string>;

  "PLATFORM()"(overrides?: CallOverrides): Promise<string>;

  TGAS(overrides?: CallOverrides): Promise<string>;

  "TGAS()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  changeAdmin(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeAdmin(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeOwner(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _TGAS: string,
    _FACTORY: string,
    _WETH: string,
    _PLATFORM: string,
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address)"(
    _TGAS: string,
    _FACTORY: string,
    _WETH: string,
    _PLATFORM: string,
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pairWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "pairWeights(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferNotify(
    from: string,
    to: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferNotify(address,address,address,uint256)"(
    from: string,
    to: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePairPowers(
    _pairs: string[],
    _weights: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePairPowers(address[],uint256[])"(
    _pairs: string[],
    _weights: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTGASImpl(
    _newImpl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTGASImpl(address)"(
    _newImpl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeProdutivity(
    fromPair: string,
    toPair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeProdutivity(address,address)"(
    fromPair: string,
    toPair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  "version()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    FACTORY(overrides?: CallOverrides): Promise<string>;

    "FACTORY()"(overrides?: CallOverrides): Promise<string>;

    PLATFORM(overrides?: CallOverrides): Promise<string>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<string>;

    TGAS(overrides?: CallOverrides): Promise<string>;

    "TGAS()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    changeAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    "changeAdmin(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _TGAS: string,
      _FACTORY: string,
      _WETH: string,
      _PLATFORM: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address)"(
      _TGAS: string,
      _FACTORY: string,
      _WETH: string,
      _PLATFORM: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pairWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pairWeights(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferNotify(
      from: string,
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferNotify(address,address,address,uint256)"(
      from: string,
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePairPowers(
      _pairs: string[],
      _weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePairPowers(address[],uint256[])"(
      _pairs: string[],
      _weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateTGASImpl(_newImpl: string, overrides?: CallOverrides): Promise<void>;

    "updateTGASImpl(address)"(
      _newImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeProdutivity(
      fromPair: string,
      toPair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeProdutivity(address,address)"(
      fromPair: string,
      toPair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnerChanged(
      _oldOwner: string | null,
      _newOwner: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      token: string | null,
      amount: null
    ): EventFilter;

    WeightChanged(pair: string | null, weight: null): EventFilter;
  };

  estimateGas: {
    FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    "FACTORY()"(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM(overrides?: CallOverrides): Promise<BigNumber>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<BigNumber>;

    TGAS(overrides?: CallOverrides): Promise<BigNumber>;

    "TGAS()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(_admin: string, overrides?: Overrides): Promise<BigNumber>;

    "changeAdmin(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeOwner(_newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _TGAS: string,
      _FACTORY: string,
      _WETH: string,
      _PLATFORM: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address)"(
      _TGAS: string,
      _FACTORY: string,
      _WETH: string,
      _PLATFORM: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pairWeights(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferNotify(
      from: string,
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferNotify(address,address,address,uint256)"(
      from: string,
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePairPowers(
      _pairs: string[],
      _weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePairPowers(address[],uint256[])"(
      _pairs: string[],
      _weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTGASImpl(_newImpl: string, overrides?: Overrides): Promise<BigNumber>;

    "updateTGASImpl(address)"(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeProdutivity(
      fromPair: string,
      toPair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeProdutivity(address,address)"(
      fromPair: string,
      toPair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FACTORY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PLATFORM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TGAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TGAS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeAdmin(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _TGAS: string,
      _FACTORY: string,
      _WETH: string,
      _PLATFORM: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address)"(
      _TGAS: string,
      _FACTORY: string,
      _WETH: string,
      _PLATFORM: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairWeights(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferNotify(
      from: string,
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferNotify(address,address,address,uint256)"(
      from: string,
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePairPowers(
      _pairs: string[],
      _weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePairPowers(address[],uint256[])"(
      _pairs: string[],
      _weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTGASImpl(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTGASImpl(address)"(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeProdutivity(
      fromPair: string,
      toPair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeProdutivity(address,address)"(
      fromPair: string,
      toPair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
