/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TomiQueryV1Interface extends ethers.utils.Interface {
  functions: {
    "LIST_DGAS_AMOUNT()": FunctionFragment;
    "LIST_TOKEN_FAILURE_BURN_PRECENT()": FunctionFragment;
    "LIST_TOKEN_SUCCESS_BURN_PRECENT()": FunctionFragment;
    "PAIR_SWITCH()": FunctionFragment;
    "PRODUCE_DGAS_RATE()": FunctionFragment;
    "PROPOSAL_DGAS_AMOUNT()": FunctionFragment;
    "REMOVE_LIQUIDITY_DURATION()": FunctionFragment;
    "SWAP_FEE_PERCENT()": FunctionFragment;
    "TOKEN_PENGDING_SWITCH()": FunctionFragment;
    "TOKEN_PENGDING_TIME()": FunctionFragment;
    "TOKEN_TO_DGAS_PAIR_MIN_PERCENT()": FunctionFragment;
    "UNSTAKE_DURATION()": FunctionFragment;
    "VOTE_DURATION()": FunctionFragment;
    "VOTE_REWARD_PERCENT()": FunctionFragment;
    "configAddr()": FunctionFragment;
    "factory()": FunctionFragment;
    "generateProposal(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "owner()": FunctionFragment;
    "platform()": FunctionFragment;
    "queryCondition(address[])": FunctionFragment;
    "queryConfig()": FunctionFragment;
    "queryConfigInfo(bytes32)": FunctionFragment;
    "queryLiquidityList()": FunctionFragment;
    "queryPairListInfo(address[])": FunctionFragment;
    "queryPairReserve(address[],address[])": FunctionFragment;
    "queryProposalList()": FunctionFragment;
    "queryStakeInfo()": FunctionFragment;
    "queryTokenItemInfo(address)": FunctionFragment;
    "queryTokenList()": FunctionFragment;
    "upgrade(address,address,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LIST_DGAS_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIST_TOKEN_FAILURE_BURN_PRECENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIST_TOKEN_SUCCESS_BURN_PRECENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAIR_SWITCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRODUCE_DGAS_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_DGAS_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_LIQUIDITY_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWAP_FEE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_PENGDING_SWITCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_PENGDING_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_TO_DGAS_PAIR_MIN_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNSTAKE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_REWARD_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generateProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "platform", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryCondition",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "queryConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryConfigInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queryLiquidityList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryPairListInfo",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "queryPairReserve",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "queryProposalList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryStakeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryTokenItemInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "queryTokenList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [string, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "LIST_DGAS_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIST_TOKEN_FAILURE_BURN_PRECENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIST_TOKEN_SUCCESS_BURN_PRECENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAIR_SWITCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRODUCE_DGAS_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_DGAS_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_LIQUIDITY_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_FEE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_PENGDING_SWITCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_PENGDING_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_TO_DGAS_PAIR_MIN_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSTAKE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_REWARD_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "platform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryConfigInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryLiquidityList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryPairListInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryPairReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryProposalList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryTokenItemInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;

  events: {};
}

export class TomiQueryV1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TomiQueryV1Interface;

  functions: {
    LIST_DGAS_AMOUNT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "LIST_DGAS_AMOUNT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    LIST_TOKEN_FAILURE_BURN_PRECENT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "LIST_TOKEN_FAILURE_BURN_PRECENT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    LIST_TOKEN_SUCCESS_BURN_PRECENT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "LIST_TOKEN_SUCCESS_BURN_PRECENT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PAIR_SWITCH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PAIR_SWITCH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PRODUCE_DGAS_RATE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PRODUCE_DGAS_RATE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PROPOSAL_DGAS_AMOUNT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PROPOSAL_DGAS_AMOUNT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    REMOVE_LIQUIDITY_DURATION(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "REMOVE_LIQUIDITY_DURATION()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    SWAP_FEE_PERCENT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "SWAP_FEE_PERCENT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    TOKEN_PENGDING_SWITCH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TOKEN_PENGDING_SWITCH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    TOKEN_PENGDING_TIME(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TOKEN_PENGDING_TIME()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    TOKEN_TO_DGAS_PAIR_MIN_PERCENT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TOKEN_TO_DGAS_PAIR_MIN_PERCENT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    UNSTAKE_DURATION(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "UNSTAKE_DURATION()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    VOTE_DURATION(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "VOTE_DURATION()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    VOTE_REWARD_PERCENT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "VOTE_REWARD_PERCENT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    configAddr(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "configAddr()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    factory(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "factory()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    generateProposal(
      ballot_address: string,
      overrides?: CallOverrides
    ): Promise<{
      proposal: {
        proposer: string;
        ballotAddress: string;
        tokenAddress: string;
        subject: string;
        content: string;
        createTime: BigNumber;
        endBlock: BigNumber;
        end: boolean;
        YES: BigNumber;
        NO: BigNumber;
        totalReward: BigNumber;
        ballotType: BigNumber;
        weight: BigNumber;
        minted: boolean;
        voted: boolean;
        voteIndex: BigNumber;
        audited: boolean;
        value: BigNumber;
        key: string;
        currentValue: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: BigNumber;
        6: BigNumber;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: boolean;
        14: boolean;
        15: BigNumber;
        16: boolean;
        17: BigNumber;
        18: string;
        19: BigNumber;
      };
      0: {
        proposer: string;
        ballotAddress: string;
        tokenAddress: string;
        subject: string;
        content: string;
        createTime: BigNumber;
        endBlock: BigNumber;
        end: boolean;
        YES: BigNumber;
        NO: BigNumber;
        totalReward: BigNumber;
        ballotType: BigNumber;
        weight: BigNumber;
        minted: boolean;
        voted: boolean;
        voteIndex: BigNumber;
        audited: boolean;
        value: BigNumber;
        key: string;
        currentValue: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: BigNumber;
        6: BigNumber;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: boolean;
        14: boolean;
        15: BigNumber;
        16: boolean;
        17: BigNumber;
        18: string;
        19: BigNumber;
      };
    }>;

    "generateProposal(address)"(
      ballot_address: string,
      overrides?: CallOverrides
    ): Promise<{
      proposal: {
        proposer: string;
        ballotAddress: string;
        tokenAddress: string;
        subject: string;
        content: string;
        createTime: BigNumber;
        endBlock: BigNumber;
        end: boolean;
        YES: BigNumber;
        NO: BigNumber;
        totalReward: BigNumber;
        ballotType: BigNumber;
        weight: BigNumber;
        minted: boolean;
        voted: boolean;
        voteIndex: BigNumber;
        audited: boolean;
        value: BigNumber;
        key: string;
        currentValue: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: BigNumber;
        6: BigNumber;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: boolean;
        14: boolean;
        15: BigNumber;
        16: boolean;
        17: BigNumber;
        18: string;
        19: BigNumber;
      };
      0: {
        proposer: string;
        ballotAddress: string;
        tokenAddress: string;
        subject: string;
        content: string;
        createTime: BigNumber;
        endBlock: BigNumber;
        end: boolean;
        YES: BigNumber;
        NO: BigNumber;
        totalReward: BigNumber;
        ballotType: BigNumber;
        weight: BigNumber;
        minted: boolean;
        voted: boolean;
        voteIndex: BigNumber;
        audited: boolean;
        value: BigNumber;
        key: string;
        currentValue: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: BigNumber;
        6: BigNumber;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: boolean;
        14: boolean;
        15: BigNumber;
        16: boolean;
        17: BigNumber;
        18: string;
        19: BigNumber;
      };
    }>;

    governance(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governance()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    platform(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "platform()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    queryCondition(
      path_list: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "queryCondition(address[])"(
      path_list: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    queryConfig(overrides?: CallOverrides): Promise<{
      fee_percent: BigNumber;
      proposal_amount: BigNumber;
      unstake_duration: BigNumber;
      remove_duration: BigNumber;
      list_token_amount: BigNumber;
      vote_percent: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "queryConfig()"(overrides?: CallOverrides): Promise<{
      fee_percent: BigNumber;
      proposal_amount: BigNumber;
      unstake_duration: BigNumber;
      remove_duration: BigNumber;
      list_token_amount: BigNumber;
      vote_percent: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    queryConfigInfo(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      config_item: {
        minValue: BigNumber;
        maxValue: BigNumber;
        maxSpan: BigNumber;
        value: BigNumber;
        enable: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
      0: {
        minValue: BigNumber;
        maxValue: BigNumber;
        maxSpan: BigNumber;
        value: BigNumber;
        enable: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    "queryConfigInfo(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      config_item: {
        minValue: BigNumber;
        maxValue: BigNumber;
        maxSpan: BigNumber;
        value: BigNumber;
        enable: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
      0: {
        minValue: BigNumber;
        maxValue: BigNumber;
        maxSpan: BigNumber;
        value: BigNumber;
        enable: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    queryLiquidityList(overrides?: CallOverrides): Promise<{
      liquidity_list: {
        pair: string;
        balance: BigNumber;
        totalSupply: BigNumber;
        lastBlock: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      }[];
      0: {
        pair: string;
        balance: BigNumber;
        totalSupply: BigNumber;
        lastBlock: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      }[];
    }>;

    "queryLiquidityList()"(overrides?: CallOverrides): Promise<{
      liquidity_list: {
        pair: string;
        balance: BigNumber;
        totalSupply: BigNumber;
        lastBlock: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      }[];
      0: {
        pair: string;
        balance: BigNumber;
        totalSupply: BigNumber;
        lastBlock: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      }[];
    }>;

    queryPairListInfo(
      pair_list: string[],
      overrides?: CallOverrides
    ): Promise<{
      token0_list: string[];
      token1_list: string[];
      reserve0_list: BigNumber[];
      reserve1_list: BigNumber[];
      0: string[];
      1: string[];
      2: BigNumber[];
      3: BigNumber[];
    }>;

    "queryPairListInfo(address[])"(
      pair_list: string[],
      overrides?: CallOverrides
    ): Promise<{
      token0_list: string[];
      token1_list: string[];
      reserve0_list: BigNumber[];
      reserve1_list: BigNumber[];
      0: string[];
      1: string[];
      2: BigNumber[];
      3: BigNumber[];
    }>;

    queryPairReserve(
      token0_list: string[],
      token1_list: string[],
      overrides?: CallOverrides
    ): Promise<{
      reserve0_list: BigNumber[];
      reserve1_list: BigNumber[];
      exist_list: boolean[];
      0: BigNumber[];
      1: BigNumber[];
      2: boolean[];
    }>;

    "queryPairReserve(address[],address[])"(
      token0_list: string[],
      token1_list: string[],
      overrides?: CallOverrides
    ): Promise<{
      reserve0_list: BigNumber[];
      reserve1_list: BigNumber[];
      exist_list: boolean[];
      0: BigNumber[];
      1: BigNumber[];
      2: boolean[];
    }>;

    queryProposalList(overrides?: CallOverrides): Promise<{
      proposal_list: {
        proposer: string;
        ballotAddress: string;
        tokenAddress: string;
        subject: string;
        content: string;
        createTime: BigNumber;
        endBlock: BigNumber;
        end: boolean;
        YES: BigNumber;
        NO: BigNumber;
        totalReward: BigNumber;
        ballotType: BigNumber;
        weight: BigNumber;
        minted: boolean;
        voted: boolean;
        voteIndex: BigNumber;
        audited: boolean;
        value: BigNumber;
        key: string;
        currentValue: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: BigNumber;
        6: BigNumber;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: boolean;
        14: boolean;
        15: BigNumber;
        16: boolean;
        17: BigNumber;
        18: string;
        19: BigNumber;
      }[];
      0: {
        proposer: string;
        ballotAddress: string;
        tokenAddress: string;
        subject: string;
        content: string;
        createTime: BigNumber;
        endBlock: BigNumber;
        end: boolean;
        YES: BigNumber;
        NO: BigNumber;
        totalReward: BigNumber;
        ballotType: BigNumber;
        weight: BigNumber;
        minted: boolean;
        voted: boolean;
        voteIndex: BigNumber;
        audited: boolean;
        value: BigNumber;
        key: string;
        currentValue: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: BigNumber;
        6: BigNumber;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: boolean;
        14: boolean;
        15: BigNumber;
        16: boolean;
        17: BigNumber;
        18: string;
        19: BigNumber;
      }[];
    }>;

    "queryProposalList()"(overrides?: CallOverrides): Promise<{
      proposal_list: {
        proposer: string;
        ballotAddress: string;
        tokenAddress: string;
        subject: string;
        content: string;
        createTime: BigNumber;
        endBlock: BigNumber;
        end: boolean;
        YES: BigNumber;
        NO: BigNumber;
        totalReward: BigNumber;
        ballotType: BigNumber;
        weight: BigNumber;
        minted: boolean;
        voted: boolean;
        voteIndex: BigNumber;
        audited: boolean;
        value: BigNumber;
        key: string;
        currentValue: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: BigNumber;
        6: BigNumber;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: boolean;
        14: boolean;
        15: BigNumber;
        16: boolean;
        17: BigNumber;
        18: string;
        19: BigNumber;
      }[];
      0: {
        proposer: string;
        ballotAddress: string;
        tokenAddress: string;
        subject: string;
        content: string;
        createTime: BigNumber;
        endBlock: BigNumber;
        end: boolean;
        YES: BigNumber;
        NO: BigNumber;
        totalReward: BigNumber;
        ballotType: BigNumber;
        weight: BigNumber;
        minted: boolean;
        voted: boolean;
        voteIndex: BigNumber;
        audited: boolean;
        value: BigNumber;
        key: string;
        currentValue: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: BigNumber;
        6: BigNumber;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: boolean;
        14: boolean;
        15: BigNumber;
        16: boolean;
        17: BigNumber;
        18: string;
        19: BigNumber;
      }[];
    }>;

    queryStakeInfo(overrides?: CallOverrides): Promise<{
      stake_amount: BigNumber;
      stake_block: BigNumber;
      total_stake: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "queryStakeInfo()"(overrides?: CallOverrides): Promise<{
      stake_amount: BigNumber;
      stake_block: BigNumber;
      total_stake: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    queryTokenItemInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      symbol: string;
      decimal: BigNumber;
      totalSupply: BigNumber;
      balance: BigNumber;
      allowance: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "queryTokenItemInfo(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      symbol: string;
      decimal: BigNumber;
      totalSupply: BigNumber;
      balance: BigNumber;
      allowance: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    queryTokenList(overrides?: CallOverrides): Promise<{
      token_list: {
        tokenAddress: string;
        symbol: string;
        decimal: BigNumber;
        balance: BigNumber;
        allowance: BigNumber;
        allowanceGov: BigNumber;
        status: BigNumber;
        totalSupply: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[];
      0: {
        tokenAddress: string;
        symbol: string;
        decimal: BigNumber;
        balance: BigNumber;
        allowance: BigNumber;
        allowanceGov: BigNumber;
        status: BigNumber;
        totalSupply: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[];
    }>;

    "queryTokenList()"(overrides?: CallOverrides): Promise<{
      token_list: {
        tokenAddress: string;
        symbol: string;
        decimal: BigNumber;
        balance: BigNumber;
        allowance: BigNumber;
        allowanceGov: BigNumber;
        status: BigNumber;
        totalSupply: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[];
      0: {
        tokenAddress: string;
        symbol: string;
        decimal: BigNumber;
        balance: BigNumber;
        allowance: BigNumber;
        allowanceGov: BigNumber;
        status: BigNumber;
        totalSupply: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[];
    }>;

    upgrade(
      _config: string,
      _platform: string,
      _factory: string,
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgrade(address,address,address,address)"(
      _config: string,
      _platform: string,
      _factory: string,
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  LIST_DGAS_AMOUNT(overrides?: CallOverrides): Promise<string>;

  "LIST_DGAS_AMOUNT()"(overrides?: CallOverrides): Promise<string>;

  LIST_TOKEN_FAILURE_BURN_PRECENT(overrides?: CallOverrides): Promise<string>;

  "LIST_TOKEN_FAILURE_BURN_PRECENT()"(
    overrides?: CallOverrides
  ): Promise<string>;

  LIST_TOKEN_SUCCESS_BURN_PRECENT(overrides?: CallOverrides): Promise<string>;

  "LIST_TOKEN_SUCCESS_BURN_PRECENT()"(
    overrides?: CallOverrides
  ): Promise<string>;

  PAIR_SWITCH(overrides?: CallOverrides): Promise<string>;

  "PAIR_SWITCH()"(overrides?: CallOverrides): Promise<string>;

  PRODUCE_DGAS_RATE(overrides?: CallOverrides): Promise<string>;

  "PRODUCE_DGAS_RATE()"(overrides?: CallOverrides): Promise<string>;

  PROPOSAL_DGAS_AMOUNT(overrides?: CallOverrides): Promise<string>;

  "PROPOSAL_DGAS_AMOUNT()"(overrides?: CallOverrides): Promise<string>;

  REMOVE_LIQUIDITY_DURATION(overrides?: CallOverrides): Promise<string>;

  "REMOVE_LIQUIDITY_DURATION()"(overrides?: CallOverrides): Promise<string>;

  SWAP_FEE_PERCENT(overrides?: CallOverrides): Promise<string>;

  "SWAP_FEE_PERCENT()"(overrides?: CallOverrides): Promise<string>;

  TOKEN_PENGDING_SWITCH(overrides?: CallOverrides): Promise<string>;

  "TOKEN_PENGDING_SWITCH()"(overrides?: CallOverrides): Promise<string>;

  TOKEN_PENGDING_TIME(overrides?: CallOverrides): Promise<string>;

  "TOKEN_PENGDING_TIME()"(overrides?: CallOverrides): Promise<string>;

  TOKEN_TO_DGAS_PAIR_MIN_PERCENT(overrides?: CallOverrides): Promise<string>;

  "TOKEN_TO_DGAS_PAIR_MIN_PERCENT()"(
    overrides?: CallOverrides
  ): Promise<string>;

  UNSTAKE_DURATION(overrides?: CallOverrides): Promise<string>;

  "UNSTAKE_DURATION()"(overrides?: CallOverrides): Promise<string>;

  VOTE_DURATION(overrides?: CallOverrides): Promise<string>;

  "VOTE_DURATION()"(overrides?: CallOverrides): Promise<string>;

  VOTE_REWARD_PERCENT(overrides?: CallOverrides): Promise<string>;

  "VOTE_REWARD_PERCENT()"(overrides?: CallOverrides): Promise<string>;

  configAddr(overrides?: CallOverrides): Promise<string>;

  "configAddr()"(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  generateProposal(
    ballot_address: string,
    overrides?: CallOverrides
  ): Promise<{
    proposer: string;
    ballotAddress: string;
    tokenAddress: string;
    subject: string;
    content: string;
    createTime: BigNumber;
    endBlock: BigNumber;
    end: boolean;
    YES: BigNumber;
    NO: BigNumber;
    totalReward: BigNumber;
    ballotType: BigNumber;
    weight: BigNumber;
    minted: boolean;
    voted: boolean;
    voteIndex: BigNumber;
    audited: boolean;
    value: BigNumber;
    key: string;
    currentValue: BigNumber;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: BigNumber;
    6: BigNumber;
    7: boolean;
    8: BigNumber;
    9: BigNumber;
    10: BigNumber;
    11: BigNumber;
    12: BigNumber;
    13: boolean;
    14: boolean;
    15: BigNumber;
    16: boolean;
    17: BigNumber;
    18: string;
    19: BigNumber;
  }>;

  "generateProposal(address)"(
    ballot_address: string,
    overrides?: CallOverrides
  ): Promise<{
    proposer: string;
    ballotAddress: string;
    tokenAddress: string;
    subject: string;
    content: string;
    createTime: BigNumber;
    endBlock: BigNumber;
    end: boolean;
    YES: BigNumber;
    NO: BigNumber;
    totalReward: BigNumber;
    ballotType: BigNumber;
    weight: BigNumber;
    minted: boolean;
    voted: boolean;
    voteIndex: BigNumber;
    audited: boolean;
    value: BigNumber;
    key: string;
    currentValue: BigNumber;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: BigNumber;
    6: BigNumber;
    7: boolean;
    8: BigNumber;
    9: BigNumber;
    10: BigNumber;
    11: BigNumber;
    12: BigNumber;
    13: boolean;
    14: boolean;
    15: BigNumber;
    16: boolean;
    17: BigNumber;
    18: string;
    19: BigNumber;
  }>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  platform(overrides?: CallOverrides): Promise<string>;

  "platform()"(overrides?: CallOverrides): Promise<string>;

  queryCondition(
    path_list: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "queryCondition(address[])"(
    path_list: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queryConfig(overrides?: CallOverrides): Promise<{
    fee_percent: BigNumber;
    proposal_amount: BigNumber;
    unstake_duration: BigNumber;
    remove_duration: BigNumber;
    list_token_amount: BigNumber;
    vote_percent: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "queryConfig()"(overrides?: CallOverrides): Promise<{
    fee_percent: BigNumber;
    proposal_amount: BigNumber;
    unstake_duration: BigNumber;
    remove_duration: BigNumber;
    list_token_amount: BigNumber;
    vote_percent: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  queryConfigInfo(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    minValue: BigNumber;
    maxValue: BigNumber;
    maxSpan: BigNumber;
    value: BigNumber;
    enable: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "queryConfigInfo(bytes32)"(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    minValue: BigNumber;
    maxValue: BigNumber;
    maxSpan: BigNumber;
    value: BigNumber;
    enable: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  queryLiquidityList(
    overrides?: CallOverrides
  ): Promise<
    {
      pair: string;
      balance: BigNumber;
      totalSupply: BigNumber;
      lastBlock: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }[]
  >;

  "queryLiquidityList()"(
    overrides?: CallOverrides
  ): Promise<
    {
      pair: string;
      balance: BigNumber;
      totalSupply: BigNumber;
      lastBlock: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }[]
  >;

  queryPairListInfo(
    pair_list: string[],
    overrides?: CallOverrides
  ): Promise<{
    token0_list: string[];
    token1_list: string[];
    reserve0_list: BigNumber[];
    reserve1_list: BigNumber[];
    0: string[];
    1: string[];
    2: BigNumber[];
    3: BigNumber[];
  }>;

  "queryPairListInfo(address[])"(
    pair_list: string[],
    overrides?: CallOverrides
  ): Promise<{
    token0_list: string[];
    token1_list: string[];
    reserve0_list: BigNumber[];
    reserve1_list: BigNumber[];
    0: string[];
    1: string[];
    2: BigNumber[];
    3: BigNumber[];
  }>;

  queryPairReserve(
    token0_list: string[],
    token1_list: string[],
    overrides?: CallOverrides
  ): Promise<{
    reserve0_list: BigNumber[];
    reserve1_list: BigNumber[];
    exist_list: boolean[];
    0: BigNumber[];
    1: BigNumber[];
    2: boolean[];
  }>;

  "queryPairReserve(address[],address[])"(
    token0_list: string[],
    token1_list: string[],
    overrides?: CallOverrides
  ): Promise<{
    reserve0_list: BigNumber[];
    reserve1_list: BigNumber[];
    exist_list: boolean[];
    0: BigNumber[];
    1: BigNumber[];
    2: boolean[];
  }>;

  queryProposalList(
    overrides?: CallOverrides
  ): Promise<
    {
      proposer: string;
      ballotAddress: string;
      tokenAddress: string;
      subject: string;
      content: string;
      createTime: BigNumber;
      endBlock: BigNumber;
      end: boolean;
      YES: BigNumber;
      NO: BigNumber;
      totalReward: BigNumber;
      ballotType: BigNumber;
      weight: BigNumber;
      minted: boolean;
      voted: boolean;
      voteIndex: BigNumber;
      audited: boolean;
      value: BigNumber;
      key: string;
      currentValue: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
      12: BigNumber;
      13: boolean;
      14: boolean;
      15: BigNumber;
      16: boolean;
      17: BigNumber;
      18: string;
      19: BigNumber;
    }[]
  >;

  "queryProposalList()"(
    overrides?: CallOverrides
  ): Promise<
    {
      proposer: string;
      ballotAddress: string;
      tokenAddress: string;
      subject: string;
      content: string;
      createTime: BigNumber;
      endBlock: BigNumber;
      end: boolean;
      YES: BigNumber;
      NO: BigNumber;
      totalReward: BigNumber;
      ballotType: BigNumber;
      weight: BigNumber;
      minted: boolean;
      voted: boolean;
      voteIndex: BigNumber;
      audited: boolean;
      value: BigNumber;
      key: string;
      currentValue: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
      12: BigNumber;
      13: boolean;
      14: boolean;
      15: BigNumber;
      16: boolean;
      17: BigNumber;
      18: string;
      19: BigNumber;
    }[]
  >;

  queryStakeInfo(overrides?: CallOverrides): Promise<{
    stake_amount: BigNumber;
    stake_block: BigNumber;
    total_stake: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "queryStakeInfo()"(overrides?: CallOverrides): Promise<{
    stake_amount: BigNumber;
    stake_block: BigNumber;
    total_stake: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  queryTokenItemInfo(
    token: string,
    overrides?: CallOverrides
  ): Promise<{
    symbol: string;
    decimal: BigNumber;
    totalSupply: BigNumber;
    balance: BigNumber;
    allowance: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "queryTokenItemInfo(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<{
    symbol: string;
    decimal: BigNumber;
    totalSupply: BigNumber;
    balance: BigNumber;
    allowance: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  queryTokenList(
    overrides?: CallOverrides
  ): Promise<
    {
      tokenAddress: string;
      symbol: string;
      decimal: BigNumber;
      balance: BigNumber;
      allowance: BigNumber;
      allowanceGov: BigNumber;
      status: BigNumber;
      totalSupply: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }[]
  >;

  "queryTokenList()"(
    overrides?: CallOverrides
  ): Promise<
    {
      tokenAddress: string;
      symbol: string;
      decimal: BigNumber;
      balance: BigNumber;
      allowance: BigNumber;
      allowanceGov: BigNumber;
      status: BigNumber;
      totalSupply: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }[]
  >;

  upgrade(
    _config: string,
    _platform: string,
    _factory: string,
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgrade(address,address,address,address)"(
    _config: string,
    _platform: string,
    _factory: string,
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    LIST_DGAS_AMOUNT(overrides?: CallOverrides): Promise<string>;

    "LIST_DGAS_AMOUNT()"(overrides?: CallOverrides): Promise<string>;

    LIST_TOKEN_FAILURE_BURN_PRECENT(overrides?: CallOverrides): Promise<string>;

    "LIST_TOKEN_FAILURE_BURN_PRECENT()"(
      overrides?: CallOverrides
    ): Promise<string>;

    LIST_TOKEN_SUCCESS_BURN_PRECENT(overrides?: CallOverrides): Promise<string>;

    "LIST_TOKEN_SUCCESS_BURN_PRECENT()"(
      overrides?: CallOverrides
    ): Promise<string>;

    PAIR_SWITCH(overrides?: CallOverrides): Promise<string>;

    "PAIR_SWITCH()"(overrides?: CallOverrides): Promise<string>;

    PRODUCE_DGAS_RATE(overrides?: CallOverrides): Promise<string>;

    "PRODUCE_DGAS_RATE()"(overrides?: CallOverrides): Promise<string>;

    PROPOSAL_DGAS_AMOUNT(overrides?: CallOverrides): Promise<string>;

    "PROPOSAL_DGAS_AMOUNT()"(overrides?: CallOverrides): Promise<string>;

    REMOVE_LIQUIDITY_DURATION(overrides?: CallOverrides): Promise<string>;

    "REMOVE_LIQUIDITY_DURATION()"(overrides?: CallOverrides): Promise<string>;

    SWAP_FEE_PERCENT(overrides?: CallOverrides): Promise<string>;

    "SWAP_FEE_PERCENT()"(overrides?: CallOverrides): Promise<string>;

    TOKEN_PENGDING_SWITCH(overrides?: CallOverrides): Promise<string>;

    "TOKEN_PENGDING_SWITCH()"(overrides?: CallOverrides): Promise<string>;

    TOKEN_PENGDING_TIME(overrides?: CallOverrides): Promise<string>;

    "TOKEN_PENGDING_TIME()"(overrides?: CallOverrides): Promise<string>;

    TOKEN_TO_DGAS_PAIR_MIN_PERCENT(overrides?: CallOverrides): Promise<string>;

    "TOKEN_TO_DGAS_PAIR_MIN_PERCENT()"(
      overrides?: CallOverrides
    ): Promise<string>;

    UNSTAKE_DURATION(overrides?: CallOverrides): Promise<string>;

    "UNSTAKE_DURATION()"(overrides?: CallOverrides): Promise<string>;

    VOTE_DURATION(overrides?: CallOverrides): Promise<string>;

    "VOTE_DURATION()"(overrides?: CallOverrides): Promise<string>;

    VOTE_REWARD_PERCENT(overrides?: CallOverrides): Promise<string>;

    "VOTE_REWARD_PERCENT()"(overrides?: CallOverrides): Promise<string>;

    configAddr(overrides?: CallOverrides): Promise<string>;

    "configAddr()"(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    generateProposal(
      ballot_address: string,
      overrides?: CallOverrides
    ): Promise<{
      proposer: string;
      ballotAddress: string;
      tokenAddress: string;
      subject: string;
      content: string;
      createTime: BigNumber;
      endBlock: BigNumber;
      end: boolean;
      YES: BigNumber;
      NO: BigNumber;
      totalReward: BigNumber;
      ballotType: BigNumber;
      weight: BigNumber;
      minted: boolean;
      voted: boolean;
      voteIndex: BigNumber;
      audited: boolean;
      value: BigNumber;
      key: string;
      currentValue: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
      12: BigNumber;
      13: boolean;
      14: boolean;
      15: BigNumber;
      16: boolean;
      17: BigNumber;
      18: string;
      19: BigNumber;
    }>;

    "generateProposal(address)"(
      ballot_address: string,
      overrides?: CallOverrides
    ): Promise<{
      proposer: string;
      ballotAddress: string;
      tokenAddress: string;
      subject: string;
      content: string;
      createTime: BigNumber;
      endBlock: BigNumber;
      end: boolean;
      YES: BigNumber;
      NO: BigNumber;
      totalReward: BigNumber;
      ballotType: BigNumber;
      weight: BigNumber;
      minted: boolean;
      voted: boolean;
      voteIndex: BigNumber;
      audited: boolean;
      value: BigNumber;
      key: string;
      currentValue: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
      12: BigNumber;
      13: boolean;
      14: boolean;
      15: BigNumber;
      16: boolean;
      17: BigNumber;
      18: string;
      19: BigNumber;
    }>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    platform(overrides?: CallOverrides): Promise<string>;

    "platform()"(overrides?: CallOverrides): Promise<string>;

    queryCondition(
      path_list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryCondition(address[])"(
      path_list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<{
      fee_percent: BigNumber;
      proposal_amount: BigNumber;
      unstake_duration: BigNumber;
      remove_duration: BigNumber;
      list_token_amount: BigNumber;
      vote_percent: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "queryConfig()"(overrides?: CallOverrides): Promise<{
      fee_percent: BigNumber;
      proposal_amount: BigNumber;
      unstake_duration: BigNumber;
      remove_duration: BigNumber;
      list_token_amount: BigNumber;
      vote_percent: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    queryConfigInfo(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      minValue: BigNumber;
      maxValue: BigNumber;
      maxSpan: BigNumber;
      value: BigNumber;
      enable: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "queryConfigInfo(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      minValue: BigNumber;
      maxValue: BigNumber;
      maxSpan: BigNumber;
      value: BigNumber;
      enable: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    queryLiquidityList(
      overrides?: CallOverrides
    ): Promise<
      {
        pair: string;
        balance: BigNumber;
        totalSupply: BigNumber;
        lastBlock: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      }[]
    >;

    "queryLiquidityList()"(
      overrides?: CallOverrides
    ): Promise<
      {
        pair: string;
        balance: BigNumber;
        totalSupply: BigNumber;
        lastBlock: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      }[]
    >;

    queryPairListInfo(
      pair_list: string[],
      overrides?: CallOverrides
    ): Promise<{
      token0_list: string[];
      token1_list: string[];
      reserve0_list: BigNumber[];
      reserve1_list: BigNumber[];
      0: string[];
      1: string[];
      2: BigNumber[];
      3: BigNumber[];
    }>;

    "queryPairListInfo(address[])"(
      pair_list: string[],
      overrides?: CallOverrides
    ): Promise<{
      token0_list: string[];
      token1_list: string[];
      reserve0_list: BigNumber[];
      reserve1_list: BigNumber[];
      0: string[];
      1: string[];
      2: BigNumber[];
      3: BigNumber[];
    }>;

    queryPairReserve(
      token0_list: string[],
      token1_list: string[],
      overrides?: CallOverrides
    ): Promise<{
      reserve0_list: BigNumber[];
      reserve1_list: BigNumber[];
      exist_list: boolean[];
      0: BigNumber[];
      1: BigNumber[];
      2: boolean[];
    }>;

    "queryPairReserve(address[],address[])"(
      token0_list: string[],
      token1_list: string[],
      overrides?: CallOverrides
    ): Promise<{
      reserve0_list: BigNumber[];
      reserve1_list: BigNumber[];
      exist_list: boolean[];
      0: BigNumber[];
      1: BigNumber[];
      2: boolean[];
    }>;

    queryProposalList(
      overrides?: CallOverrides
    ): Promise<
      {
        proposer: string;
        ballotAddress: string;
        tokenAddress: string;
        subject: string;
        content: string;
        createTime: BigNumber;
        endBlock: BigNumber;
        end: boolean;
        YES: BigNumber;
        NO: BigNumber;
        totalReward: BigNumber;
        ballotType: BigNumber;
        weight: BigNumber;
        minted: boolean;
        voted: boolean;
        voteIndex: BigNumber;
        audited: boolean;
        value: BigNumber;
        key: string;
        currentValue: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: BigNumber;
        6: BigNumber;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: boolean;
        14: boolean;
        15: BigNumber;
        16: boolean;
        17: BigNumber;
        18: string;
        19: BigNumber;
      }[]
    >;

    "queryProposalList()"(
      overrides?: CallOverrides
    ): Promise<
      {
        proposer: string;
        ballotAddress: string;
        tokenAddress: string;
        subject: string;
        content: string;
        createTime: BigNumber;
        endBlock: BigNumber;
        end: boolean;
        YES: BigNumber;
        NO: BigNumber;
        totalReward: BigNumber;
        ballotType: BigNumber;
        weight: BigNumber;
        minted: boolean;
        voted: boolean;
        voteIndex: BigNumber;
        audited: boolean;
        value: BigNumber;
        key: string;
        currentValue: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: BigNumber;
        6: BigNumber;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: boolean;
        14: boolean;
        15: BigNumber;
        16: boolean;
        17: BigNumber;
        18: string;
        19: BigNumber;
      }[]
    >;

    queryStakeInfo(overrides?: CallOverrides): Promise<{
      stake_amount: BigNumber;
      stake_block: BigNumber;
      total_stake: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "queryStakeInfo()"(overrides?: CallOverrides): Promise<{
      stake_amount: BigNumber;
      stake_block: BigNumber;
      total_stake: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    queryTokenItemInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      symbol: string;
      decimal: BigNumber;
      totalSupply: BigNumber;
      balance: BigNumber;
      allowance: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "queryTokenItemInfo(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      symbol: string;
      decimal: BigNumber;
      totalSupply: BigNumber;
      balance: BigNumber;
      allowance: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    queryTokenList(
      overrides?: CallOverrides
    ): Promise<
      {
        tokenAddress: string;
        symbol: string;
        decimal: BigNumber;
        balance: BigNumber;
        allowance: BigNumber;
        allowanceGov: BigNumber;
        status: BigNumber;
        totalSupply: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[]
    >;

    "queryTokenList()"(
      overrides?: CallOverrides
    ): Promise<
      {
        tokenAddress: string;
        symbol: string;
        decimal: BigNumber;
        balance: BigNumber;
        allowance: BigNumber;
        allowanceGov: BigNumber;
        status: BigNumber;
        totalSupply: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      }[]
    >;

    upgrade(
      _config: string,
      _platform: string,
      _factory: string,
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgrade(address,address,address,address)"(
      _config: string,
      _platform: string,
      _factory: string,
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    LIST_DGAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "LIST_DGAS_AMOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    LIST_TOKEN_FAILURE_BURN_PRECENT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LIST_TOKEN_FAILURE_BURN_PRECENT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LIST_TOKEN_SUCCESS_BURN_PRECENT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LIST_TOKEN_SUCCESS_BURN_PRECENT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAIR_SWITCH(overrides?: CallOverrides): Promise<BigNumber>;

    "PAIR_SWITCH()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRODUCE_DGAS_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "PRODUCE_DGAS_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSAL_DGAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "PROPOSAL_DGAS_AMOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVE_LIQUIDITY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "REMOVE_LIQUIDITY_DURATION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SWAP_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    "SWAP_FEE_PERCENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_PENGDING_SWITCH(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_PENGDING_SWITCH()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_PENGDING_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_PENGDING_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_TO_DGAS_PAIR_MIN_PERCENT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "TOKEN_TO_DGAS_PAIR_MIN_PERCENT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UNSTAKE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "UNSTAKE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "VOTE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_REWARD_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    "VOTE_REWARD_PERCENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    configAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "configAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    generateProposal(
      ballot_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateProposal(address)"(
      ballot_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    platform(overrides?: CallOverrides): Promise<BigNumber>;

    "platform()"(overrides?: CallOverrides): Promise<BigNumber>;

    queryCondition(
      path_list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryCondition(address[])"(
      path_list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "queryConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    queryConfigInfo(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryConfigInfo(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryLiquidityList(overrides?: CallOverrides): Promise<BigNumber>;

    "queryLiquidityList()"(overrides?: CallOverrides): Promise<BigNumber>;

    queryPairListInfo(
      pair_list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryPairListInfo(address[])"(
      pair_list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryPairReserve(
      token0_list: string[],
      token1_list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryPairReserve(address[],address[])"(
      token0_list: string[],
      token1_list: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryProposalList(overrides?: CallOverrides): Promise<BigNumber>;

    "queryProposalList()"(overrides?: CallOverrides): Promise<BigNumber>;

    queryStakeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "queryStakeInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    queryTokenItemInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryTokenItemInfo(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryTokenList(overrides?: CallOverrides): Promise<BigNumber>;

    "queryTokenList()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      _config: string,
      _platform: string,
      _factory: string,
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgrade(address,address,address,address)"(
      _config: string,
      _platform: string,
      _factory: string,
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LIST_DGAS_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LIST_DGAS_AMOUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIST_TOKEN_FAILURE_BURN_PRECENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIST_TOKEN_FAILURE_BURN_PRECENT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIST_TOKEN_SUCCESS_BURN_PRECENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIST_TOKEN_SUCCESS_BURN_PRECENT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAIR_SWITCH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PAIR_SWITCH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRODUCE_DGAS_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRODUCE_DGAS_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROPOSAL_DGAS_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PROPOSAL_DGAS_AMOUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REMOVE_LIQUIDITY_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "REMOVE_LIQUIDITY_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SWAP_FEE_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SWAP_FEE_PERCENT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_PENGDING_SWITCH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOKEN_PENGDING_SWITCH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_PENGDING_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOKEN_PENGDING_TIME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_TO_DGAS_PAIR_MIN_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOKEN_TO_DGAS_PAIR_MIN_PERCENT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNSTAKE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UNSTAKE_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VOTE_DURATION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTE_REWARD_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "VOTE_REWARD_PERCENT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "configAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generateProposal(
      ballot_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateProposal(address)"(
      ballot_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platform(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "platform()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryCondition(
      path_list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryCondition(address[])"(
      path_list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "queryConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryConfigInfo(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryConfigInfo(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryLiquidityList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryLiquidityList()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryPairListInfo(
      pair_list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryPairListInfo(address[])"(
      pair_list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryPairReserve(
      token0_list: string[],
      token1_list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryPairReserve(address[],address[])"(
      token0_list: string[],
      token1_list: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryProposalList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "queryProposalList()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryStakeInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "queryStakeInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryTokenItemInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryTokenItemInfo(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryTokenList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "queryTokenList()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgrade(
      _config: string,
      _platform: string,
      _factory: string,
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgrade(address,address,address,address)"(
      _config: string,
      _platform: string,
      _factory: string,
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
