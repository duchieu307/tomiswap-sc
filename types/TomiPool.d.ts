/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TomiPoolInterface extends ethers.utils.Interface {
  functions: {
    "CONFIG()": FunctionFragment;
    "FACTORY()": FunctionFragment;
    "FUNDING()": FunctionFragment;
    "GOVERNANCE()": FunctionFragment;
    "LOTTERY()": FunctionFragment;
    "PLATFORM()": FunctionFragment;
    "TOMI()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addReward(address,uint256)": FunctionFragment;
    "addRewardFromPlatform(address,uint256)": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "claimReward(address,address)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairAmountPerShare(address)": FunctionFragment;
    "pairReward(address)": FunctionFragment;
    "postProductivityChanged(address,address)": FunctionFragment;
    "preProductivityChanged(address,address)": FunctionFragment;
    "queryReward(address,address)": FunctionFragment;
    "totalReward()": FunctionFragment;
    "upgrade(address,address[])": FunctionFragment;
    "users(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CONFIG", values?: undefined): string;
  encodeFunctionData(functionFragment: "FACTORY", values?: undefined): string;
  encodeFunctionData(functionFragment: "FUNDING", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GOVERNANCE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LOTTERY", values?: undefined): string;
  encodeFunctionData(functionFragment: "PLATFORM", values?: undefined): string;
  encodeFunctionData(functionFragment: "TOMI", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardFromPlatform",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairAmountPerShare",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pairReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "postProductivityChanged",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "preProductivityChanged",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "queryReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "CONFIG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FACTORY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FUNDING", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GOVERNANCE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LOTTERY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PLATFORM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOMI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRewardFromPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairAmountPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postProductivityChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preProductivityChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "AddReward(address,uint256)": EventFragment;
    "ClaimReward(address,address,address,uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
}

export class TomiPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TomiPoolInterface;

  functions: {
    CONFIG(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "CONFIG()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    FACTORY(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "FACTORY()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    FUNDING(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "FUNDING()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    GOVERNANCE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "GOVERNANCE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    LOTTERY(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "LOTTERY()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PLATFORM(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    TOMI(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TOMI()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WETH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    addReward(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReward(address,uint256)"(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addRewardFromPlatform(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRewardFromPlatform(address,uint256)"(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimReward(
      _pair: string,
      _rewardToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimReward(address,address)"(
      _pair: string,
      _rewardToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _TOMI: string,
      _WETH: string,
      _FACTORY: string,
      _PLATFORM: string,
      _CONFIG: string,
      _GOVERNANCE: string,
      _FUNDING: string,
      _LOTTERY: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address,address,address)"(
      _TOMI: string,
      _WETH: string,
      _FACTORY: string,
      _PLATFORM: string,
      _CONFIG: string,
      _GOVERNANCE: string,
      _FUNDING: string,
      _LOTTERY: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pairAmountPerShare(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pairAmountPerShare(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pairReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pairReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    postProductivityChanged(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "postProductivityChanged(address,address)"(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    preProductivityChanged(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "preProductivityChanged(address,address)"(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queryReward(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "queryReward(address,address)"(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalReward(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalReward()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    upgrade(
      _newPool: string,
      _pairs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgrade(address,address[])"(
      _newPool: string,
      _pairs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    users(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      rewardDebt: BigNumber;
      rewardEarn: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "users(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      rewardDebt: BigNumber;
      rewardEarn: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  CONFIG(overrides?: CallOverrides): Promise<string>;

  "CONFIG()"(overrides?: CallOverrides): Promise<string>;

  FACTORY(overrides?: CallOverrides): Promise<string>;

  "FACTORY()"(overrides?: CallOverrides): Promise<string>;

  FUNDING(overrides?: CallOverrides): Promise<string>;

  "FUNDING()"(overrides?: CallOverrides): Promise<string>;

  GOVERNANCE(overrides?: CallOverrides): Promise<string>;

  "GOVERNANCE()"(overrides?: CallOverrides): Promise<string>;

  LOTTERY(overrides?: CallOverrides): Promise<string>;

  "LOTTERY()"(overrides?: CallOverrides): Promise<string>;

  PLATFORM(overrides?: CallOverrides): Promise<string>;

  "PLATFORM()"(overrides?: CallOverrides): Promise<string>;

  TOMI(overrides?: CallOverrides): Promise<string>;

  "TOMI()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  addReward(
    _pair: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReward(address,uint256)"(
    _pair: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addRewardFromPlatform(
    _pair: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRewardFromPlatform(address,uint256)"(
    _pair: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeOwner(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimReward(
    _pair: string,
    _rewardToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimReward(address,address)"(
    _pair: string,
    _rewardToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _TOMI: string,
    _WETH: string,
    _FACTORY: string,
    _PLATFORM: string,
    _CONFIG: string,
    _GOVERNANCE: string,
    _FUNDING: string,
    _LOTTERY: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address,address,address)"(
    _TOMI: string,
    _WETH: string,
    _FACTORY: string,
    _PLATFORM: string,
    _CONFIG: string,
    _GOVERNANCE: string,
    _FUNDING: string,
    _LOTTERY: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pairAmountPerShare(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pairAmountPerShare(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pairReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "pairReward(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  postProductivityChanged(
    _pair: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "postProductivityChanged(address,address)"(
    _pair: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  preProductivityChanged(
    _pair: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "preProductivityChanged(address,address)"(
    _pair: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queryReward(
    _pair: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "queryReward(address,address)"(
    _pair: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalReward(overrides?: CallOverrides): Promise<BigNumber>;

  "totalReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  upgrade(
    _newPool: string,
    _pairs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgrade(address,address[])"(
    _newPool: string,
    _pairs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  users(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    rewardDebt: BigNumber;
    rewardEarn: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "users(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    rewardDebt: BigNumber;
    rewardEarn: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  callStatic: {
    CONFIG(overrides?: CallOverrides): Promise<string>;

    "CONFIG()"(overrides?: CallOverrides): Promise<string>;

    FACTORY(overrides?: CallOverrides): Promise<string>;

    "FACTORY()"(overrides?: CallOverrides): Promise<string>;

    FUNDING(overrides?: CallOverrides): Promise<string>;

    "FUNDING()"(overrides?: CallOverrides): Promise<string>;

    GOVERNANCE(overrides?: CallOverrides): Promise<string>;

    "GOVERNANCE()"(overrides?: CallOverrides): Promise<string>;

    LOTTERY(overrides?: CallOverrides): Promise<string>;

    "LOTTERY()"(overrides?: CallOverrides): Promise<string>;

    PLATFORM(overrides?: CallOverrides): Promise<string>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<string>;

    TOMI(overrides?: CallOverrides): Promise<string>;

    "TOMI()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    addReward(
      _pair: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addReward(address,uint256)"(
      _pair: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardFromPlatform(
      _pair: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewardFromPlatform(address,uint256)"(
      _pair: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _pair: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReward(address,address)"(
      _pair: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _TOMI: string,
      _WETH: string,
      _FACTORY: string,
      _PLATFORM: string,
      _CONFIG: string,
      _GOVERNANCE: string,
      _FUNDING: string,
      _LOTTERY: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,address,address,address)"(
      _TOMI: string,
      _WETH: string,
      _FACTORY: string,
      _PLATFORM: string,
      _CONFIG: string,
      _GOVERNANCE: string,
      _FUNDING: string,
      _LOTTERY: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pairAmountPerShare(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pairAmountPerShare(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pairReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postProductivityChanged(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "postProductivityChanged(address,address)"(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    preProductivityChanged(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "preProductivityChanged(address,address)"(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    queryReward(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryReward(address,address)"(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReward(overrides?: CallOverrides): Promise<BigNumber>;

    "totalReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      _newPool: string,
      _pairs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "upgrade(address,address[])"(
      _newPool: string,
      _pairs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    users(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      rewardDebt: BigNumber;
      rewardEarn: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "users(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      rewardDebt: BigNumber;
      rewardEarn: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  filters: {
    AddReward(pair: string | null, amount: null): EventFilter;

    ClaimReward(
      user: string | null,
      pair: string | null,
      rewardToken: string | null,
      amountTOMI: null
    ): EventFilter;

    OwnerChanged(
      _oldOwner: string | null,
      _newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    CONFIG(overrides?: CallOverrides): Promise<BigNumber>;

    "CONFIG()"(overrides?: CallOverrides): Promise<BigNumber>;

    FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    "FACTORY()"(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING(overrides?: CallOverrides): Promise<BigNumber>;

    "FUNDING()"(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNANCE(overrides?: CallOverrides): Promise<BigNumber>;

    "GOVERNANCE()"(overrides?: CallOverrides): Promise<BigNumber>;

    LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

    "LOTTERY()"(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM(overrides?: CallOverrides): Promise<BigNumber>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOMI(overrides?: CallOverrides): Promise<BigNumber>;

    "TOMI()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addReward(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addReward(address,uint256)"(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addRewardFromPlatform(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRewardFromPlatform(address,uint256)"(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeOwner(_newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimReward(
      _pair: string,
      _rewardToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimReward(address,address)"(
      _pair: string,
      _rewardToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _TOMI: string,
      _WETH: string,
      _FACTORY: string,
      _PLATFORM: string,
      _CONFIG: string,
      _GOVERNANCE: string,
      _FUNDING: string,
      _LOTTERY: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address,address,address)"(
      _TOMI: string,
      _WETH: string,
      _FACTORY: string,
      _PLATFORM: string,
      _CONFIG: string,
      _GOVERNANCE: string,
      _FUNDING: string,
      _LOTTERY: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairAmountPerShare(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pairAmountPerShare(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pairReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postProductivityChanged(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "postProductivityChanged(address,address)"(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    preProductivityChanged(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "preProductivityChanged(address,address)"(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queryReward(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryReward(address,address)"(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReward(overrides?: CallOverrides): Promise<BigNumber>;

    "totalReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      _newPool: string,
      _pairs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgrade(address,address[])"(
      _newPool: string,
      _pairs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    users(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "users(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONFIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONFIG()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FACTORY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FUNDING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FUNDING()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOVERNANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GOVERNANCE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOTTERY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LOTTERY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PLATFORM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOMI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOMI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReward(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReward(address,uint256)"(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addRewardFromPlatform(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRewardFromPlatform(address,uint256)"(
      _pair: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _pair: string,
      _rewardToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimReward(address,address)"(
      _pair: string,
      _rewardToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _TOMI: string,
      _WETH: string,
      _FACTORY: string,
      _PLATFORM: string,
      _CONFIG: string,
      _GOVERNANCE: string,
      _FUNDING: string,
      _LOTTERY: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address,address,address)"(
      _TOMI: string,
      _WETH: string,
      _FACTORY: string,
      _PLATFORM: string,
      _CONFIG: string,
      _GOVERNANCE: string,
      _FUNDING: string,
      _LOTTERY: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairAmountPerShare(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairAmountPerShare(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postProductivityChanged(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "postProductivityChanged(address,address)"(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    preProductivityChanged(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "preProductivityChanged(address,address)"(
      _pair: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queryReward(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryReward(address,address)"(
      _pair: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalReward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      _newPool: string,
      _pairs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgrade(address,address[])"(
      _newPool: string,
      _pairs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "users(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
