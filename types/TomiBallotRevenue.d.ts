/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TomiBallotRevenueInterface extends ethers.utils.Interface {
  functions: {
    "TOMI()": FunctionFragment;
    "content()": FunctionFragment;
    "createTime()": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "end()": FunctionFragment;
    "endTime()": FunctionFragment;
    "ended()": FunctionFragment;
    "executionTime()": FunctionFragment;
    "governor()": FunctionFragment;
    "participateByGovernor(address)": FunctionFragment;
    "participators(address)": FunctionFragment;
    "proposer()": FunctionFragment;
    "subject()": FunctionFragment;
    "total()": FunctionFragment;
    "weight(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TOMI", values?: undefined): string;
  encodeFunctionData(functionFragment: "content", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "ended", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executionTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participateByGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "participators",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "proposer", values?: undefined): string;
  encodeFunctionData(functionFragment: "subject", values?: undefined): string;
  encodeFunctionData(functionFragment: "total", values?: undefined): string;
  encodeFunctionData(functionFragment: "weight", values: [string]): string;

  decodeFunctionResult(functionFragment: "TOMI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "content", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ended", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participateByGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weight", data: BytesLike): Result;

  events: {};
}

export class TomiBallotRevenue extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TomiBallotRevenueInterface;

  functions: {
    TOMI(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TOMI()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    content(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "content()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    createTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "createTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    delegate(to: string, overrides?: Overrides): Promise<ContractTransaction>;

    "delegate(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    end(overrides?: Overrides): Promise<ContractTransaction>;

    "end()"(overrides?: Overrides): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "endTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    ended(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "ended()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    executionTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "executionTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    governor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    participateByGovernor(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "participateByGovernor(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    participators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      weight: BigNumber;
      participated: boolean;
      delegate: string;
      0: BigNumber;
      1: boolean;
      2: string;
    }>;

    "participators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      weight: BigNumber;
      participated: boolean;
      delegate: string;
      0: BigNumber;
      1: boolean;
      2: string;
    }>;

    proposer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "proposer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    subject(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "subject()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    total(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "total()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    weight(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "weight(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  TOMI(overrides?: CallOverrides): Promise<string>;

  "TOMI()"(overrides?: CallOverrides): Promise<string>;

  content(overrides?: CallOverrides): Promise<string>;

  "content()"(overrides?: CallOverrides): Promise<string>;

  createTime(overrides?: CallOverrides): Promise<BigNumber>;

  "createTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  delegate(to: string, overrides?: Overrides): Promise<ContractTransaction>;

  "delegate(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  end(overrides?: Overrides): Promise<ContractTransaction>;

  "end()"(overrides?: Overrides): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  ended(overrides?: CallOverrides): Promise<boolean>;

  "ended()"(overrides?: CallOverrides): Promise<boolean>;

  executionTime(overrides?: CallOverrides): Promise<BigNumber>;

  "executionTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  participateByGovernor(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "participateByGovernor(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  participators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    weight: BigNumber;
    participated: boolean;
    delegate: string;
    0: BigNumber;
    1: boolean;
    2: string;
  }>;

  "participators(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    weight: BigNumber;
    participated: boolean;
    delegate: string;
    0: BigNumber;
    1: boolean;
    2: string;
  }>;

  proposer(overrides?: CallOverrides): Promise<string>;

  "proposer()"(overrides?: CallOverrides): Promise<string>;

  subject(overrides?: CallOverrides): Promise<string>;

  "subject()"(overrides?: CallOverrides): Promise<string>;

  total(overrides?: CallOverrides): Promise<BigNumber>;

  "total()"(overrides?: CallOverrides): Promise<BigNumber>;

  weight(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "weight(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    TOMI(overrides?: CallOverrides): Promise<string>;

    "TOMI()"(overrides?: CallOverrides): Promise<string>;

    content(overrides?: CallOverrides): Promise<string>;

    "content()"(overrides?: CallOverrides): Promise<string>;

    createTime(overrides?: CallOverrides): Promise<BigNumber>;

    "createTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(to: string, overrides?: CallOverrides): Promise<void>;

    "delegate(address)"(to: string, overrides?: CallOverrides): Promise<void>;

    end(overrides?: CallOverrides): Promise<boolean>;

    "end()"(overrides?: CallOverrides): Promise<boolean>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    ended(overrides?: CallOverrides): Promise<boolean>;

    "ended()"(overrides?: CallOverrides): Promise<boolean>;

    executionTime(overrides?: CallOverrides): Promise<BigNumber>;

    "executionTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    participateByGovernor(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "participateByGovernor(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    participators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      weight: BigNumber;
      participated: boolean;
      delegate: string;
      0: BigNumber;
      1: boolean;
      2: string;
    }>;

    "participators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      weight: BigNumber;
      participated: boolean;
      delegate: string;
      0: BigNumber;
      1: boolean;
      2: string;
    }>;

    proposer(overrides?: CallOverrides): Promise<string>;

    "proposer()"(overrides?: CallOverrides): Promise<string>;

    subject(overrides?: CallOverrides): Promise<string>;

    "subject()"(overrides?: CallOverrides): Promise<string>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    "total()"(overrides?: CallOverrides): Promise<BigNumber>;

    weight(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "weight(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    TOMI(overrides?: CallOverrides): Promise<BigNumber>;

    "TOMI()"(overrides?: CallOverrides): Promise<BigNumber>;

    content(overrides?: CallOverrides): Promise<BigNumber>;

    "content()"(overrides?: CallOverrides): Promise<BigNumber>;

    createTime(overrides?: CallOverrides): Promise<BigNumber>;

    "createTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(to: string, overrides?: Overrides): Promise<BigNumber>;

    "delegate(address)"(to: string, overrides?: Overrides): Promise<BigNumber>;

    end(overrides?: Overrides): Promise<BigNumber>;

    "end()"(overrides?: Overrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    ended(overrides?: CallOverrides): Promise<BigNumber>;

    "ended()"(overrides?: CallOverrides): Promise<BigNumber>;

    executionTime(overrides?: CallOverrides): Promise<BigNumber>;

    "executionTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    participateByGovernor(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "participateByGovernor(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    participators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "participators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposer(overrides?: CallOverrides): Promise<BigNumber>;

    "proposer()"(overrides?: CallOverrides): Promise<BigNumber>;

    subject(overrides?: CallOverrides): Promise<BigNumber>;

    "subject()"(overrides?: CallOverrides): Promise<BigNumber>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    "total()"(overrides?: CallOverrides): Promise<BigNumber>;

    weight(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "weight(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOMI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOMI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    content(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "content()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "createTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(to: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "delegate(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    end(overrides?: Overrides): Promise<PopulatedTransaction>;

    "end()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ended(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ended()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executionTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "executionTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participateByGovernor(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "participateByGovernor(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    participators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "participators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subject(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "subject()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    total(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "total()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weight(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "weight(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
