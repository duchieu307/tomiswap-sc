/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TomiFundingInterface extends ethers.utils.Interface {
  functions: {
    "changeOwner(address)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "grantClaimable(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "revokeClaimable(address)": FunctionFragment;
    "setTomi(address)": FunctionFragment;
    "tomi()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "grantClaimable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeClaimable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTomi", values: [string]): string;
  encodeFunctionData(functionFragment: "tomi", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTomi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tomi", data: BytesLike): Result;

  events: {
    "ClaimableGranted(address)": EventFragment;
    "ClaimableRevoked(address)": EventFragment;
    "Claimed(address,uint256)": EventFragment;
    "FundingTokenSettled(address)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimableGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimableRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingTokenSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
}

export class TomiFunding extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TomiFundingInterface;

  functions: {
    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    grantClaimable(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantClaimable(address)"(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    revokeClaimable(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeClaimable(address)"(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTomi(_tomi: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setTomi(address)"(
      _tomi: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tomi(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tomi()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  changeOwner(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  grantClaimable(
    _userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantClaimable(address)"(
    _userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  revokeClaimable(
    _userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeClaimable(address)"(
    _userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTomi(_tomi: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setTomi(address)"(
    _tomi: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tomi(overrides?: CallOverrides): Promise<string>;

  "tomi()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claim(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    grantClaimable(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantClaimable(address)"(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    revokeClaimable(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeClaimable(address)"(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTomi(_tomi: string, overrides?: CallOverrides): Promise<void>;

    "setTomi(address)"(_tomi: string, overrides?: CallOverrides): Promise<void>;

    tomi(overrides?: CallOverrides): Promise<string>;

    "tomi()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ClaimableGranted(_userAddress: null): EventFilter;

    ClaimableRevoked(_userAddress: null): EventFilter;

    Claimed(_userAddress: null, _amount: null): EventFilter;

    FundingTokenSettled(tokenAddress: null): EventFilter;

    OwnerChanged(
      _oldOwner: string | null,
      _newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    changeOwner(_newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "claim(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    grantClaimable(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantClaimable(address)"(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    revokeClaimable(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeClaimable(address)"(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTomi(_tomi: string, overrides?: Overrides): Promise<BigNumber>;

    "setTomi(address)"(
      _tomi: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tomi(overrides?: CallOverrides): Promise<BigNumber>;

    "tomi()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    grantClaimable(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantClaimable(address)"(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeClaimable(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeClaimable(address)"(
      _userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTomi(
      _tomi: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTomi(address)"(
      _tomi: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tomi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tomi()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
