/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TomiDelegateInterface extends ethers.utils.Interface {
  functions: {
    "PLATFORM()": FunctionFragment;
    "POOL()": FunctionFragment;
    "TOMI()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addLiquidityETH(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addPlayerPair(address)": FunctionFragment;
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "contractCodeHash()": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "getPlayerPairCount(address)": FunctionFragment;
    "isAddPlayerPair(address,address)": FunctionFragment;
    "isPair(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "playerPairs(address,uint256)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "upgradePlatform(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PLATFORM", values?: undefined): string;
  encodeFunctionData(functionFragment: "POOL", values?: undefined): string;
  encodeFunctionData(functionFragment: "TOMI", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlayerPair",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contractCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerPairCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAddPlayerPair",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isPair", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerPairs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePlatform",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "PLATFORM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "POOL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOMI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPlayerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerPairCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAddPlayerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePlatform",
    data: BytesLike
  ): Result;

  events: {
    "OwnerChanged(address,address)": EventFragment;
    "PairCreated(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
}

export class TomiDelegate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TomiDelegateInterface;

  functions: {
    PLATFORM(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    POOL(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "POOL()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    TOMI(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TOMI()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WETH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addPlayerPair(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPlayerPair(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allPairsLength(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "allPairsLength()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    contractCodeHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "contractCodeHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPlayerPairCount(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPlayerPairCount(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isAddPlayerPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAddPlayerPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isPair(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isPair(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    playerPairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "playerPairs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(address,address,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradePlatform(
      _PLATFORM: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradePlatform(address)"(
      _PLATFORM: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  PLATFORM(overrides?: CallOverrides): Promise<string>;

  "PLATFORM()"(overrides?: CallOverrides): Promise<string>;

  POOL(overrides?: CallOverrides): Promise<string>;

  "POOL()"(overrides?: CallOverrides): Promise<string>;

  TOMI(overrides?: CallOverrides): Promise<string>;

  "TOMI()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    tokenA: string,
    tokenB: string,
    amountA: BigNumberish,
    amountB: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
    tokenA: string,
    tokenB: string,
    amountA: BigNumberish,
    amountB: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    token: string,
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidityETH(address,uint256,uint256,uint256,uint256)"(
    token: string,
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addPlayerPair(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPlayerPair(address)"(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "allPairs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allPairsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  changeOwner(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  contractCodeHash(overrides?: CallOverrides): Promise<string>;

  "contractCodeHash()"(overrides?: CallOverrides): Promise<string>;

  getPair(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPair(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPlayerPairCount(
    player: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPlayerPairCount(address)"(
    player: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAddPlayerPair(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAddPlayerPair(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPair(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isPair(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  playerPairs(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "playerPairs(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeLiquidity(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(address,address,uint256,uint256,uint256,uint256)"(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETH(address,uint256,uint256,uint256,uint256)"(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradePlatform(
    _PLATFORM: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradePlatform(address)"(
    _PLATFORM: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    PLATFORM(overrides?: CallOverrides): Promise<string>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<string>;

    POOL(overrides?: CallOverrides): Promise<string>;

    "POOL()"(overrides?: CallOverrides): Promise<string>;

    TOMI(overrides?: CallOverrides): Promise<string>;

    "TOMI()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountA: BigNumber;
      _amountB: BigNumber;
      _liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountA: BigNumber;
      _amountB: BigNumber;
      _liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountToken: BigNumber;
      _amountETH: BigNumber;
      _liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "addLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountToken: BigNumber;
      _amountETH: BigNumber;
      _liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    addPlayerPair(_user: string, overrides?: CallOverrides): Promise<void>;

    "addPlayerPair(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allPairsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contractCodeHash(overrides?: CallOverrides): Promise<string>;

    "contractCodeHash()"(overrides?: CallOverrides): Promise<string>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPlayerPairCount(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPlayerPairCount(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAddPlayerPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAddPlayerPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPair(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isPair(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    playerPairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "playerPairs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountA: BigNumber;
      _amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidity(address,address,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountA: BigNumber;
      _amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountToken: BigNumber;
      _amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountToken: BigNumber;
      _amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    upgradePlatform(
      _PLATFORM: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradePlatform(address)"(
      _PLATFORM: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnerChanged(
      _oldOwner: string | null,
      _newOwner: string | null
    ): EventFilter;

    PairCreated(
      token0: string | null,
      token1: string | null,
      pair: null,
      undefined: null
    ): EventFilter;
  };

  estimateGas: {
    PLATFORM(overrides?: CallOverrides): Promise<BigNumber>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<BigNumber>;

    POOL(overrides?: CallOverrides): Promise<BigNumber>;

    "POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOMI(overrides?: CallOverrides): Promise<BigNumber>;

    "TOMI()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addPlayerPair(_user: string, overrides?: Overrides): Promise<BigNumber>;

    "addPlayerPair(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allPairsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(_newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    contractCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    "contractCodeHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerPairCount(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPlayerPairCount(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAddPlayerPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAddPlayerPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPair(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPair(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    playerPairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "playerPairs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(address,address,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradePlatform(
      _PLATFORM: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradePlatform(address)"(
      _PLATFORM: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PLATFORM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PLATFORM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "POOL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOMI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOMI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      amountA: BigNumberish,
      amountB: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addPlayerPair(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPlayerPair(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allPairsLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    contractCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractCodeHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerPairCount(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPlayerPairCount(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAddPlayerPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAddPlayerPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPair(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPair(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerPairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerPairs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(address,address,uint256,uint256,uint256,uint256)"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETH(address,uint256,uint256,uint256,uint256)"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradePlatform(
      _PLATFORM: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradePlatform(address)"(
      _PLATFORM: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
