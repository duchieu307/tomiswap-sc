/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenQueryInterface extends ethers.utils.Interface {
  functions: {
    "queryInfo(address,address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "queryInfo",
    values: [string, string[]]
  ): string;

  decodeFunctionResult(functionFragment: "queryInfo", data: BytesLike): Result;

  events: {};
}

export class TokenQuery extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenQueryInterface;

  functions: {
    queryInfo(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<{
      info_list: {
        name: string;
        symbol: string;
        decimals: number;
        balanceOf: BigNumber;
        0: string;
        1: string;
        2: number;
        3: BigNumber;
      }[];
      0: {
        name: string;
        symbol: string;
        decimals: number;
        balanceOf: BigNumber;
        0: string;
        1: string;
        2: number;
        3: BigNumber;
      }[];
    }>;

    "queryInfo(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<{
      info_list: {
        name: string;
        symbol: string;
        decimals: number;
        balanceOf: BigNumber;
        0: string;
        1: string;
        2: number;
        3: BigNumber;
      }[];
      0: {
        name: string;
        symbol: string;
        decimals: number;
        balanceOf: BigNumber;
        0: string;
        1: string;
        2: number;
        3: BigNumber;
      }[];
    }>;
  };

  queryInfo(
    user: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    {
      name: string;
      symbol: string;
      decimals: number;
      balanceOf: BigNumber;
      0: string;
      1: string;
      2: number;
      3: BigNumber;
    }[]
  >;

  "queryInfo(address,address[])"(
    user: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    {
      name: string;
      symbol: string;
      decimals: number;
      balanceOf: BigNumber;
      0: string;
      1: string;
      2: number;
      3: BigNumber;
    }[]
  >;

  callStatic: {
    queryInfo(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      {
        name: string;
        symbol: string;
        decimals: number;
        balanceOf: BigNumber;
        0: string;
        1: string;
        2: number;
        3: BigNumber;
      }[]
    >;

    "queryInfo(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      {
        name: string;
        symbol: string;
        decimals: number;
        balanceOf: BigNumber;
        0: string;
        1: string;
        2: number;
        3: BigNumber;
      }[]
    >;
  };

  filters: {};

  estimateGas: {
    queryInfo(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryInfo(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    queryInfo(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryInfo(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
