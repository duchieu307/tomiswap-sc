/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITomiPlatformInterface extends ethers.utils.Interface {
  functions: {
    "existPair(address,address)": FunctionFragment;
    "getReserves(address,address)": FunctionFragment;
    "swapPrecondition(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "existPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPrecondition",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "existPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPrecondition",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITomiPlatform extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITomiPlatformInterface;

  functions: {
    existPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "existPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    swapPrecondition(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "swapPrecondition(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  existPair(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "existPair(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReserves(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "getReserves(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  swapPrecondition(token: string, overrides?: CallOverrides): Promise<boolean>;

  "swapPrecondition(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    existPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "existPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    swapPrecondition(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "swapPrecondition(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    existPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "existPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapPrecondition(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapPrecondition(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    existPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "existPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserves(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapPrecondition(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapPrecondition(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
