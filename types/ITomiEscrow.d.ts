/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITomiEscrowInterface extends ethers.utils.Interface {
  functions: {
    "depositReward(address,uint256)": FunctionFragment;
    "setShareToken(address,uint256)": FunctionFragment;
    "shareTokenExisted(address)": FunctionFragment;
    "shareTokenReward(address)": FunctionFragment;
    "updateShareTokenRate(address,uint256)": FunctionFragment;
    "withdrawReward(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShareToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareTokenExisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareTokenReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateShareTokenRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShareToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareTokenExisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareTokenReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateShareTokenRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITomiEscrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITomiEscrowInterface;

  functions: {
    depositReward(
      _tokenAddress: string,
      _reward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositReward(address,uint256)"(
      _tokenAddress: string,
      _reward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setShareToken(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setShareToken(address,uint256)"(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareTokenExisted(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "shareTokenExisted(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    shareTokenReward(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "shareTokenReward(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    updateShareTokenRate(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateShareTokenRate(address,uint256)"(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawReward(
      _shareToken: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawReward(address,uint256,address)"(
      _shareToken: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  depositReward(
    _tokenAddress: string,
    _reward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositReward(address,uint256)"(
    _tokenAddress: string,
    _reward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setShareToken(
    _tokenAddress: string,
    _dgasRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setShareToken(address,uint256)"(
    _tokenAddress: string,
    _dgasRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareTokenExisted(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "shareTokenExisted(address)"(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  shareTokenReward(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "shareTokenReward(address)"(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateShareTokenRate(
    _tokenAddress: string,
    _dgasRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateShareTokenRate(address,uint256)"(
    _tokenAddress: string,
    _dgasRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawReward(
    _shareToken: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawReward(address,uint256,address)"(
    _shareToken: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    depositReward(
      _tokenAddress: string,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositReward(address,uint256)"(
      _tokenAddress: string,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setShareToken(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setShareToken(address,uint256)"(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shareTokenExisted(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "shareTokenExisted(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    shareTokenReward(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareTokenReward(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateShareTokenRate(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateShareTokenRate(address,uint256)"(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawReward(
      _shareToken: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawReward(address,uint256,address)"(
      _shareToken: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    depositReward(
      _tokenAddress: string,
      _reward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositReward(address,uint256)"(
      _tokenAddress: string,
      _reward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setShareToken(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setShareToken(address,uint256)"(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareTokenExisted(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareTokenExisted(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareTokenReward(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareTokenReward(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateShareTokenRate(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateShareTokenRate(address,uint256)"(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawReward(
      _shareToken: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawReward(address,uint256,address)"(
      _shareToken: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositReward(
      _tokenAddress: string,
      _reward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositReward(address,uint256)"(
      _tokenAddress: string,
      _reward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setShareToken(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setShareToken(address,uint256)"(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareTokenExisted(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shareTokenExisted(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shareTokenReward(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shareTokenReward(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateShareTokenRate(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateShareTokenRate(address,uint256)"(
      _tokenAddress: string,
      _dgasRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      _shareToken: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawReward(address,uint256,address)"(
      _shareToken: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
