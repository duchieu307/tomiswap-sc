/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TgasStaking } from "../TgasStaking";

export class TgasStaking__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_baseToken: string, overrides?: Overrides): Promise<TgasStaking> {
    return super.deploy(_baseToken, overrides || {}) as Promise<TgasStaking>;
  }
  getDeployTransaction(
    _baseToken: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_baseToken, overrides || {});
  }
  attach(address: string): TgasStaking {
    return super.attach(address) as TgasStaking;
  }
  connect(signer: Signer): TgasStaking__factory {
    return super.connect(signer) as TgasStaking__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TgasStaking {
    return new Contract(address, _abi, signerOrProvider) as TgasStaking;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_baseToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lockTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610ada380380610ada8339818101604052602081101561003357600080fd5b5051610047816001600160e01b0361004d16565b50610108565b6000546001600160a01b031615610099576040805162461bcd60e51b815260206004820152600b60248201526a125392551250531256915160aa1b604482015290519081900360640190fd5b6001600160a01b0381166100e6576040805162461bcd60e51b815260206004820152600f60248201526e414444524553535f49535f5a45524f60881b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6109c3806101176000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a0823114610106578063b6b55f251461012c578063c55dae6314610149578063f377e7cf1461016d57610088565b80630d6680871461008d57806318160ddd146100a75780632e1a7d4d146100af5780633e5beab9146100e0575b600080fd5b610095610175565b60408051918252519081900360200190f35b61009561017b565b6100cc600480360360208110156100c557600080fd5b5035610181565b604080519115158252519081900360200190f35b610095600480360360208110156100f657600080fd5b50356001600160a01b03166102a0565b6100956004803603602081101561011c57600080fd5b50356001600160a01b03166102b2565b6100cc6004803603602081101561014257600080fd5b50356102c4565b6101516102e9565b604080516001600160a01b039092168252519081900360200190f35b6100956102f8565b60015481565b60025481565b3360009081526005602052604081205442116101e4576040805162461bcd60e51b815260206004820152601460248201527f546761735374616b696e673a204e4f545f445545000000000000000000000000604482015290519081900360640190fd5b6000546101fb906001600160a01b031633846102fe565b6102053383610496565b600054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561026957600080fd5b505afa15801561027d573d6000803e3d6000fd5b505050506040513d602081101561029357600080fd5b5051600255506001919050565b60056020526000908152604090205481565b60046020526000908152604090205481565b600080546102dd906001600160a01b0316333085610555565b610205338360006106e0565b6000546001600160a01b031681565b60035481565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106103a95780518252601f19909201916020918201910161038a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461040b576040519150601f19603f3d011682016040523d82523d6000602084013e610410565b606091505b509150915081801561043e57508051158061043e575080806020019051602081101561043b57600080fd5b50515b61048f576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6001600160a01b03821660009081526004602052604090205481118015906104be5750600081115b6104f95760405162461bcd60e51b81526004018080602001828103825260218152602001806109496021913960400191505060405180910390fd5b6001600160a01b038216600090815260046020526040902054610522908263ffffffff6107ba16565b6001600160a01b03831660009081526004602052604090205560035461054e908263ffffffff6107ba16565b6003555050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106106085780518252601f1990920191602091820191016105e9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461066a576040519150601f19603f3d011682016040523d82523d6000602084013e61066f565b606091505b509150915081801561069d57508051158061069d575080806020019051602081101561069a57600080fd5b50515b6106d85760405162461bcd60e51b815260040180806020018281038252602481526020018061096a6024913960400191505060405180910390fd5b505050505050565b60008211610737576040805162461bcd60e51b8152602060048083019190915260248201527f5a45524f00000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038316600090815260046020526040902054610760908363ffffffff61080516565b6001600160a01b03841660009081526004602052604090205560035461078c908363ffffffff61080516565b600355610799838261085f565b6001600160a01b039093166000908152600560205260409020929092555050565b60006107fc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b1565b90505b92915050565b6000828201838110156107fc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600560205260408120548261089a57600154420181811161088f5781610891565b805b925050506107ff565b8083116108a757806108a9565b825b949350505050565b600081848411156109405760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109055781810151838201526020016108ed565b50505050905090810190601f1680156109325780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe546761735374616b696e673a20494e53554646494349454e545f42414c414e43455472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a26469706673582212203da53cc2f87707f931ce10948bc566497773a9a7e1ec2a8bd61eb29cf1f1aab564736f6c63430006060033";
