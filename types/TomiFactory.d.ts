/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TomiFactoryInterface extends ethers.utils.Interface {
  functions: {
    "CONFIG()": FunctionFragment;
    "TOMI()": FunctionFragment;
    "addPlayerPair(address,address)": FunctionFragment;
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "contractCodeHash()": FunctionFragment;
    "createPair(address,address)": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "getPlayerPairCount(address)": FunctionFragment;
    "isPair(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "playerPairs(address,uint256)": FunctionFragment;
    "updateConfig(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CONFIG", values?: undefined): string;
  encodeFunctionData(functionFragment: "TOMI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPlayerPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerPairCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isPair", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerPairs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CONFIG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOMI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPlayerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerPairCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "PairCreated(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
}

export class TomiFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TomiFactoryInterface;

  functions: {
    CONFIG(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "CONFIG()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    TOMI(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TOMI()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    addPlayerPair(
      _player: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPlayerPair(address,address)"(
      _player: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allPairsLength(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "allPairsLength()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    contractCodeHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "contractCodeHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPlayerPairCount(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPlayerPairCount(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isPair(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isPair(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    playerPairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "playerPairs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    updateConfig(
      _CONFIG: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateConfig(address)"(
      _CONFIG: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "version()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  CONFIG(overrides?: CallOverrides): Promise<string>;

  "CONFIG()"(overrides?: CallOverrides): Promise<string>;

  TOMI(overrides?: CallOverrides): Promise<string>;

  "TOMI()"(overrides?: CallOverrides): Promise<string>;

  addPlayerPair(
    _player: string,
    _pair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPlayerPair(address,address)"(
    _player: string,
    _pair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "allPairs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allPairsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  contractCodeHash(overrides?: CallOverrides): Promise<string>;

  "contractCodeHash()"(overrides?: CallOverrides): Promise<string>;

  createPair(
    tokenA: string,
    tokenB: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPair(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPair(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPair(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPlayerPairCount(
    player: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPlayerPairCount(address)"(
    player: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isPair(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isPair(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  playerPairs(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "playerPairs(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updateConfig(
    _CONFIG: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateConfig(address)"(
    _CONFIG: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  "version()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CONFIG(overrides?: CallOverrides): Promise<string>;

    "CONFIG()"(overrides?: CallOverrides): Promise<string>;

    TOMI(overrides?: CallOverrides): Promise<string>;

    "TOMI()"(overrides?: CallOverrides): Promise<string>;

    addPlayerPair(
      _player: string,
      _pair: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addPlayerPair(address,address)"(
      _player: string,
      _pair: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allPairsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractCodeHash(overrides?: CallOverrides): Promise<string>;

    "contractCodeHash()"(overrides?: CallOverrides): Promise<string>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPlayerPairCount(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPlayerPairCount(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPair(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isPair(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    playerPairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "playerPairs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updateConfig(_CONFIG: string, overrides?: CallOverrides): Promise<void>;

    "updateConfig(address)"(
      _CONFIG: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    PairCreated(
      token0: string | null,
      token1: string | null,
      pair: null,
      undefined: null
    ): EventFilter;
  };

  estimateGas: {
    CONFIG(overrides?: CallOverrides): Promise<BigNumber>;

    "CONFIG()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOMI(overrides?: CallOverrides): Promise<BigNumber>;

    "TOMI()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPlayerPair(
      _player: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPlayerPair(address,address)"(
      _player: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allPairsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    "contractCodeHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerPairCount(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPlayerPairCount(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPair(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPair(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    playerPairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "playerPairs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateConfig(_CONFIG: string, overrides?: Overrides): Promise<BigNumber>;

    "updateConfig(address)"(
      _CONFIG: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONFIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONFIG()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOMI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOMI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPlayerPair(
      _player: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPlayerPair(address,address)"(
      _player: string,
      _pair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allPairsLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractCodeHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPair(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerPairCount(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPlayerPairCount(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPair(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPair(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerPairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerPairs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateConfig(
      _CONFIG: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateConfig(address)"(
      _CONFIG: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
