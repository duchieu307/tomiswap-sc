/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TomiGovernanceInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FREEZE_DURATION()": FunctionFragment;
    "REVENUE_FREEZE_DURATION()": FunctionFragment;
    "REVENUE_VOTE_DURATION()": FunctionFragment;
    "SUPER_ADMIN_ROLE()": FunctionFragment;
    "T_CONFIG()": FunctionFragment;
    "T_LIST_TOKEN()": FunctionFragment;
    "T_REVENUE()": FunctionFragment;
    "T_SNAPSHOT()": FunctionFragment;
    "T_TOKEN()": FunctionFragment;
    "VOTE_DURATION()": FunctionFragment;
    "addReward(uint256)": FunctionFragment;
    "allowance(address)": FunctionFragment;
    "applyTokenOf(address,address)": FunctionFragment;
    "audit(address)": FunctionFragment;
    "auditConfig(address)": FunctionFragment;
    "auditListToken(address)": FunctionFragment;
    "auditToken(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "ballotCount()": FunctionFragment;
    "ballotFactoryAddr()": FunctionFragment;
    "ballotOf(address)": FunctionFragment;
    "ballotRevenueCount()": FunctionFragment;
    "ballotTypes(address)": FunctionFragment;
    "ballots(uint256)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "changeProposalDuration(uint256[4])": FunctionFragment;
    "collectReward(address)": FunctionFragment;
    "collectUsers(address,address)": FunctionFragment;
    "configAddr()": FunctionFragment;
    "configBallots(address)": FunctionFragment;
    "createConfigBallot(bytes32,uint256,uint256,string,string)": FunctionFragment;
    "createRevenueBallot(string,string)": FunctionFragment;
    "createSnapshotBallot(uint256,string,string)": FunctionFragment;
    "createTokenBallot(address,uint256,uint256,string,string)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getConfigValue(bytes32)": FunctionFragment;
    "getRewardForRevenueProposal(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "listToken(address,uint256,string,string)": FunctionFragment;
    "lockTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "participate(address,uint256)": FunctionFragment;
    "receiveReward(address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revenueBallots(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardAddr()": FunctionFragment;
    "rewardOf(address)": FunctionFragment;
    "stakingSupply()": FunctionFragment;
    "tokenBallots(address)": FunctionFragment;
    "tokenUsers(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "updateTgasGovernor(address)": FunctionFragment;
    "upgradeApproveReward()": FunctionFragment;
    "version()": FunctionFragment;
    "vote(address,uint256,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FREEZE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVENUE_FREEZE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVENUE_VOTE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPER_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "T_CONFIG", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "T_LIST_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "T_REVENUE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "T_SNAPSHOT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "T_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VOTE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "allowance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "applyTokenOf",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "audit", values: [string]): string;
  encodeFunctionData(functionFragment: "auditConfig", values: [string]): string;
  encodeFunctionData(
    functionFragment: "auditListToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "auditToken", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ballotCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ballotFactoryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ballotOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ballotRevenueCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ballotTypes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ballots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeProposalDuration",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectUsers",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "configAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configBallots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createConfigBallot",
    values: [BytesLike, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createRevenueBallot",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createSnapshotBallot",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenBallot",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigValue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForRevenueProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listToken",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "lockTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueBallots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBallots",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tokenUsers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTgasGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeApproveReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FREEZE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVENUE_FREEZE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVENUE_VOTE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPER_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "T_CONFIG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "T_LIST_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "T_REVENUE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "T_SNAPSHOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "T_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyTokenOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "audit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auditConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auditListToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auditToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ballotCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ballotFactoryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ballotOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ballotRevenueCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ballotTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ballots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProposalDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createConfigBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRevenueBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSnapshotBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConfigValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForRevenueProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTgasGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeApproveReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ConfigAudited(bytes32,address,uint256)": EventFragment;
    "ConfigBallotCreated(address,bytes32,uint256,address,uint256)": EventFragment;
    "ListTokenAudited(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "ProposalerRewardRateUpdated(uint256,uint256)": EventFragment;
    "RewardCollected(address,address,uint256)": EventFragment;
    "RewardReceived(address,uint256)": EventFragment;
    "RewardTransfered(address,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokenAudited(address,address,uint256,bool)": EventFragment;
    "TokenBallotCreated(address,address,uint256,address,uint256)": EventFragment;
    "TokenListed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigAudited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigBallotCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListTokenAudited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProposalerRewardRateUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAudited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBallotCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenListed"): EventFragment;
}

export class TomiGovernance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TomiGovernanceInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    FREEZE_DURATION(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "FREEZE_DURATION()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    REVENUE_FREEZE_DURATION(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "REVENUE_FREEZE_DURATION()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    REVENUE_VOTE_DURATION(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "REVENUE_VOTE_DURATION()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    SUPER_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "SUPER_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    T_CONFIG(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "T_CONFIG()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    T_LIST_TOKEN(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "T_LIST_TOKEN()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    T_REVENUE(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "T_REVENUE()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    T_SNAPSHOT(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "T_SNAPSHOT()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    T_TOKEN(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "T_TOKEN()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    VOTE_DURATION(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "VOTE_DURATION()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    addReward(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReward(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    applyTokenOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "applyTokenOf(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    audit(_ballot: string, overrides?: Overrides): Promise<ContractTransaction>;

    "audit(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auditConfig(
      _ballot: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "auditConfig(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auditListToken(
      _ballot: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "auditListToken(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auditToken(
      _ballot: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "auditToken(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ballotCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "ballotCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    ballotFactoryAddr(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ballotFactoryAddr()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ballotOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ballotOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ballotRevenueCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "ballotRevenueCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    ballotTypes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ballotTypes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ballots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ballots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    baseToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "baseToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeProposalDuration(
      _durations: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeProposalDuration(uint256[4])"(
      _durations: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectReward(
      _ballot: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectReward(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectUsers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "collectUsers(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    configAddr(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "configAddr()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    configBallots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "configBallots(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    createConfigBallot(
      _name: BytesLike,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createConfigBallot(bytes32,uint256,uint256,string,string)"(
      _name: BytesLike,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createRevenueBallot(
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createRevenueBallot(string,string)"(
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createSnapshotBallot(
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createSnapshotBallot(uint256,string,string)"(
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createTokenBallot(
      _token: string,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createTokenBallot(address,uint256,uint256,string,string)"(
      _token: string,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getConfigValue(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getConfigValue(bytes32)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRewardForRevenueProposal(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRewardForRevenueProposal(address)"(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    initialize(
      _rewardAddr: string,
      _configContractAddr: string,
      _ballotFactoryAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _rewardAddr: string,
      _configContractAddr: string,
      _ballotFactoryAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    listToken(
      _token: string,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "listToken(address,uint256,string,string)"(
      _token: string,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lockTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    participate(
      _ballot: string,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "participate(address,uint256)"(
      _ballot: string,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    receiveReward(
      _from: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "receiveReward(address,uint256)"(
      _from: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revenueBallots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "revenueBallots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardAddr(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "rewardAddr()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rewardOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewardOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stakingSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "stakingSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tokenBallots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenBallots(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenUsers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenUsers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    updateTgasGovernor(
      _new: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTgasGovernor(address)"(
      _new: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeApproveReward(overrides?: Overrides): Promise<ContractTransaction>;

    "upgradeApproveReward()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "version()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    vote(
      _ballot: string,
      _proposal: BigNumberish,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vote(address,uint256,uint256)"(
      _ballot: string,
      _proposal: BigNumberish,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  FREEZE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "FREEZE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  REVENUE_FREEZE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "REVENUE_FREEZE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  REVENUE_VOTE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "REVENUE_VOTE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  SUPER_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "SUPER_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  T_CONFIG(overrides?: CallOverrides): Promise<BigNumber>;

  "T_CONFIG()"(overrides?: CallOverrides): Promise<BigNumber>;

  T_LIST_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

  "T_LIST_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

  T_REVENUE(overrides?: CallOverrides): Promise<BigNumber>;

  "T_REVENUE()"(overrides?: CallOverrides): Promise<BigNumber>;

  T_SNAPSHOT(overrides?: CallOverrides): Promise<BigNumber>;

  "T_SNAPSHOT()"(overrides?: CallOverrides): Promise<BigNumber>;

  T_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

  "T_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

  VOTE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "VOTE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  addReward(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReward(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "allowance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyTokenOf(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "applyTokenOf(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  audit(_ballot: string, overrides?: Overrides): Promise<ContractTransaction>;

  "audit(address)"(
    _ballot: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auditConfig(
    _ballot: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "auditConfig(address)"(
    _ballot: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auditListToken(
    _ballot: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "auditListToken(address)"(
    _ballot: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auditToken(
    _ballot: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "auditToken(address)"(
    _ballot: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ballotCount(overrides?: CallOverrides): Promise<BigNumber>;

  "ballotCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  ballotFactoryAddr(overrides?: CallOverrides): Promise<string>;

  "ballotFactoryAddr()"(overrides?: CallOverrides): Promise<string>;

  ballotOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "ballotOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ballotRevenueCount(overrides?: CallOverrides): Promise<BigNumber>;

  "ballotRevenueCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  ballotTypes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "ballotTypes(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ballots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ballots(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  "baseToken()"(overrides?: CallOverrides): Promise<string>;

  changeOwner(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeProposalDuration(
    _durations: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeProposalDuration(uint256[4])"(
    _durations: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectReward(
    _ballot: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectReward(address)"(
    _ballot: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectUsers(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "collectUsers(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  configAddr(overrides?: CallOverrides): Promise<string>;

  "configAddr()"(overrides?: CallOverrides): Promise<string>;

  configBallots(arg0: string, overrides?: CallOverrides): Promise<string>;

  "configBallots(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  createConfigBallot(
    _name: BytesLike,
    _value: BigNumberish,
    _amount: BigNumberish,
    _subject: string,
    _content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createConfigBallot(bytes32,uint256,uint256,string,string)"(
    _name: BytesLike,
    _value: BigNumberish,
    _amount: BigNumberish,
    _subject: string,
    _content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createRevenueBallot(
    _subject: string,
    _content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createRevenueBallot(string,string)"(
    _subject: string,
    _content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createSnapshotBallot(
    _amount: BigNumberish,
    _subject: string,
    _content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createSnapshotBallot(uint256,string,string)"(
    _amount: BigNumberish,
    _subject: string,
    _content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createTokenBallot(
    _token: string,
    _value: BigNumberish,
    _amount: BigNumberish,
    _subject: string,
    _content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createTokenBallot(address,uint256,uint256,string,string)"(
    _token: string,
    _value: BigNumberish,
    _amount: BigNumberish,
    _subject: string,
    _content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getConfigValue(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getConfigValue(bytes32)"(
    _name: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardForRevenueProposal(
    _ballot: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRewardForRevenueProposal(address)"(
    _ballot: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _rewardAddr: string,
    _configContractAddr: string,
    _ballotFactoryAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _rewardAddr: string,
    _configContractAddr: string,
    _ballotFactoryAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  listToken(
    _token: string,
    _amount: BigNumberish,
    _subject: string,
    _content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "listToken(address,uint256,string,string)"(
    _token: string,
    _amount: BigNumberish,
    _subject: string,
    _content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lockTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  participate(
    _ballot: string,
    _collateral: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "participate(address,uint256)"(
    _ballot: string,
    _collateral: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  receiveReward(
    _from: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "receiveReward(address,uint256)"(
    _from: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revenueBallots(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "revenueBallots(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardAddr(overrides?: CallOverrides): Promise<string>;

  "rewardAddr()"(overrides?: CallOverrides): Promise<string>;

  rewardOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "rewardOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "stakingSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenBallots(arg0: string, overrides?: CallOverrides): Promise<string>;

  "tokenBallots(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenUsers(arg0: string, overrides?: CallOverrides): Promise<string>;

  "tokenUsers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateTgasGovernor(
    _new: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTgasGovernor(address)"(
    _new: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeApproveReward(overrides?: Overrides): Promise<ContractTransaction>;

  "upgradeApproveReward()"(overrides?: Overrides): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  "version()"(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _ballot: string,
    _proposal: BigNumberish,
    _collateral: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vote(address,uint256,uint256)"(
    _ballot: string,
    _proposal: BigNumberish,
    _collateral: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    FREEZE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "FREEZE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    REVENUE_FREEZE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "REVENUE_FREEZE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    REVENUE_VOTE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "REVENUE_VOTE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    SUPER_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "SUPER_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    T_CONFIG(overrides?: CallOverrides): Promise<BigNumber>;

    "T_CONFIG()"(overrides?: CallOverrides): Promise<BigNumber>;

    T_LIST_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    "T_LIST_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

    T_REVENUE(overrides?: CallOverrides): Promise<BigNumber>;

    "T_REVENUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    T_SNAPSHOT(overrides?: CallOverrides): Promise<BigNumber>;

    "T_SNAPSHOT()"(overrides?: CallOverrides): Promise<BigNumber>;

    T_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    "T_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "VOTE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    addReward(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addReward(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allowance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyTokenOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "applyTokenOf(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    audit(_ballot: string, overrides?: CallOverrides): Promise<boolean>;

    "audit(address)"(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auditConfig(_ballot: string, overrides?: CallOverrides): Promise<boolean>;

    "auditConfig(address)"(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auditListToken(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "auditListToken(address)"(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auditToken(_ballot: string, overrides?: CallOverrides): Promise<boolean>;

    "auditToken(address)"(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballotCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ballotCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ballotFactoryAddr(overrides?: CallOverrides): Promise<string>;

    "ballotFactoryAddr()"(overrides?: CallOverrides): Promise<string>;

    ballotOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ballotOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballotRevenueCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ballotRevenueCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ballotTypes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ballotTypes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ballots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    "baseToken()"(overrides?: CallOverrides): Promise<string>;

    changeOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeProposalDuration(
      _durations: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "changeProposalDuration(uint256[4])"(
      _durations: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    collectReward(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectReward(address)"(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectUsers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "collectUsers(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    configAddr(overrides?: CallOverrides): Promise<string>;

    "configAddr()"(overrides?: CallOverrides): Promise<string>;

    configBallots(arg0: string, overrides?: CallOverrides): Promise<string>;

    "configBallots(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createConfigBallot(
      _name: BytesLike,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createConfigBallot(bytes32,uint256,uint256,string,string)"(
      _name: BytesLike,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createRevenueBallot(
      _subject: string,
      _content: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createRevenueBallot(string,string)"(
      _subject: string,
      _content: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createSnapshotBallot(
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createSnapshotBallot(uint256,string,string)"(
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createTokenBallot(
      _token: string,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createTokenBallot(address,uint256,uint256,string,string)"(
      _token: string,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getConfigValue(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConfigValue(bytes32)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardForRevenueProposal(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardForRevenueProposal(address)"(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _rewardAddr: string,
      _configContractAddr: string,
      _ballotFactoryAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _rewardAddr: string,
      _configContractAddr: string,
      _ballotFactoryAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    listToken(
      _token: string,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "listToken(address,uint256,string,string)"(
      _token: string,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: CallOverrides
    ): Promise<string>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    participate(
      _ballot: string,
      _collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "participate(address,uint256)"(
      _ballot: string,
      _collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    receiveReward(
      _from: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "receiveReward(address,uint256)"(
      _from: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revenueBallots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "revenueBallots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardAddr(overrides?: CallOverrides): Promise<string>;

    "rewardAddr()"(overrides?: CallOverrides): Promise<string>;

    rewardOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewardOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBallots(arg0: string, overrides?: CallOverrides): Promise<string>;

    "tokenBallots(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenUsers(arg0: string, overrides?: CallOverrides): Promise<string>;

    "tokenUsers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateTgasGovernor(_new: string, overrides?: CallOverrides): Promise<void>;

    "updateTgasGovernor(address)"(
      _new: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeApproveReward(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradeApproveReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _ballot: string,
      _proposal: BigNumberish,
      _collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(address,uint256,uint256)"(
      _ballot: string,
      _proposal: BigNumberish,
      _collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    ConfigAudited(
      name: null,
      ballot: string | null,
      proposal: null
    ): EventFilter;

    ConfigBallotCreated(
      proposer: string | null,
      name: null,
      value: null,
      ballotAddr: string | null,
      reward: null
    ): EventFilter;

    ListTokenAudited(
      user: null,
      token: null,
      status: null,
      burn: null,
      reward: null,
      refund: null
    ): EventFilter;

    OwnerChanged(
      _oldOwner: string | null,
      _newOwner: string | null
    ): EventFilter;

    ProposalerRewardRateUpdated(oldVaue: null, newValue: null): EventFilter;

    RewardCollected(
      user: string | null,
      ballot: string | null,
      value: null
    ): EventFilter;

    RewardReceived(user: string | null, value: null): EventFilter;

    RewardTransfered(
      from: string | null,
      to: string | null,
      value: null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    TokenAudited(
      user: null,
      token: null,
      status: null,
      result: null
    ): EventFilter;

    TokenBallotCreated(
      proposer: string | null,
      token: string | null,
      value: null,
      ballotAddr: string | null,
      reward: null
    ): EventFilter;

    TokenListed(user: null, token: null, amount: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    FREEZE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "FREEZE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    REVENUE_FREEZE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "REVENUE_FREEZE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    REVENUE_VOTE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "REVENUE_VOTE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    SUPER_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SUPER_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    T_CONFIG(overrides?: CallOverrides): Promise<BigNumber>;

    "T_CONFIG()"(overrides?: CallOverrides): Promise<BigNumber>;

    T_LIST_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    "T_LIST_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

    T_REVENUE(overrides?: CallOverrides): Promise<BigNumber>;

    "T_REVENUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    T_SNAPSHOT(overrides?: CallOverrides): Promise<BigNumber>;

    "T_SNAPSHOT()"(overrides?: CallOverrides): Promise<BigNumber>;

    T_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    "T_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "VOTE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    addReward(_value: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "addReward(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allowance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyTokenOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "applyTokenOf(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    audit(_ballot: string, overrides?: Overrides): Promise<BigNumber>;

    "audit(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    auditConfig(_ballot: string, overrides?: Overrides): Promise<BigNumber>;

    "auditConfig(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    auditListToken(_ballot: string, overrides?: Overrides): Promise<BigNumber>;

    "auditListToken(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    auditToken(_ballot: string, overrides?: Overrides): Promise<BigNumber>;

    "auditToken(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballotCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ballotCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ballotFactoryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "ballotFactoryAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    ballotOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ballotOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballotRevenueCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ballotRevenueCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ballotTypes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ballotTypes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ballots(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "ballots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "baseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(_newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeProposalDuration(
      _durations: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeProposalDuration(uint256[4])"(
      _durations: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectReward(_ballot: string, overrides?: Overrides): Promise<BigNumber>;

    "collectReward(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectUsers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectUsers(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "configAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    configBallots(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "configBallots(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createConfigBallot(
      _name: BytesLike,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createConfigBallot(bytes32,uint256,uint256,string,string)"(
      _name: BytesLike,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createRevenueBallot(
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createRevenueBallot(string,string)"(
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createSnapshotBallot(
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createSnapshotBallot(uint256,string,string)"(
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createTokenBallot(
      _token: string,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createTokenBallot(address,uint256,uint256,string,string)"(
      _token: string,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getConfigValue(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConfigValue(bytes32)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardForRevenueProposal(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardForRevenueProposal(address)"(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _rewardAddr: string,
      _configContractAddr: string,
      _ballotFactoryAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _rewardAddr: string,
      _configContractAddr: string,
      _ballotFactoryAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    listToken(
      _token: string,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "listToken(address,uint256,string,string)"(
      _token: string,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    participate(
      _ballot: string,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "participate(address,uint256)"(
      _ballot: string,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    receiveReward(
      _from: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "receiveReward(address,uint256)"(
      _from: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revenueBallots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "revenueBallots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewardOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBallots(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenBallots(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenUsers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenUsers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateTgasGovernor(_new: string, overrides?: Overrides): Promise<BigNumber>;

    "updateTgasGovernor(address)"(
      _new: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeApproveReward(overrides?: Overrides): Promise<BigNumber>;

    "upgradeApproveReward()"(overrides?: Overrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _ballot: string,
      _proposal: BigNumberish,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vote(address,uint256,uint256)"(
      _ballot: string,
      _proposal: BigNumberish,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FREEZE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FREEZE_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVENUE_FREEZE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "REVENUE_FREEZE_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVENUE_VOTE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "REVENUE_VOTE_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUPER_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SUPER_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    T_CONFIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "T_CONFIG()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    T_LIST_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "T_LIST_TOKEN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    T_REVENUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "T_REVENUE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    T_SNAPSHOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "T_SNAPSHOT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    T_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "T_TOKEN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VOTE_DURATION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReward(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReward(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyTokenOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "applyTokenOf(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    audit(
      _ballot: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "audit(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auditConfig(
      _ballot: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "auditConfig(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auditListToken(
      _ballot: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "auditListToken(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auditToken(
      _ballot: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "auditToken(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ballotCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ballotCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ballotFactoryAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ballotFactoryAddr()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ballotOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ballotOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ballotRevenueCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ballotRevenueCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ballotTypes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ballotTypes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ballots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ballots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeProposalDuration(
      _durations: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeProposalDuration(uint256[4])"(
      _durations: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectReward(
      _ballot: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectReward(address)"(
      _ballot: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectUsers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collectUsers(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "configAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configBallots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "configBallots(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createConfigBallot(
      _name: BytesLike,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createConfigBallot(bytes32,uint256,uint256,string,string)"(
      _name: BytesLike,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createRevenueBallot(
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createRevenueBallot(string,string)"(
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createSnapshotBallot(
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createSnapshotBallot(uint256,string,string)"(
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createTokenBallot(
      _token: string,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createTokenBallot(address,uint256,uint256,string,string)"(
      _token: string,
      _value: BigNumberish,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getConfigValue(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConfigValue(bytes32)"(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardForRevenueProposal(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardForRevenueProposal(address)"(
      _ballot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _rewardAddr: string,
      _configContractAddr: string,
      _ballotFactoryAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _rewardAddr: string,
      _configContractAddr: string,
      _ballotFactoryAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    listToken(
      _token: string,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "listToken(address,uint256,string,string)"(
      _token: string,
      _amount: BigNumberish,
      _subject: string,
      _content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participate(
      _ballot: string,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "participate(address,uint256)"(
      _ballot: string,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    receiveReward(
      _from: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "receiveReward(address,uint256)"(
      _from: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revenueBallots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "revenueBallots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBallots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenBallots(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenUsers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenUsers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTgasGovernor(
      _new: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTgasGovernor(address)"(
      _new: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeApproveReward(overrides?: Overrides): Promise<PopulatedTransaction>;

    "upgradeApproveReward()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _ballot: string,
      _proposal: BigNumberish,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vote(address,uint256,uint256)"(
      _ballot: string,
      _proposal: BigNumberish,
      _collateral: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
