/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITokenRegistryInterface extends ethers.utils.Interface {
  functions: {
    "CLOSED()": FunctionFragment;
    "NONE()": FunctionFragment;
    "OPENED()": FunctionFragment;
    "PENDING()": FunctionFragment;
    "REGISTERED()": FunctionFragment;
    "iterateValidTokens(uint32,uint32)": FunctionFragment;
    "pairStatus(address,address)": FunctionFragment;
    "publishToken(address)": FunctionFragment;
    "registryToken(address)": FunctionFragment;
    "tokenCount()": FunctionFragment;
    "tokenStatus(address)": FunctionFragment;
    "updatePair(address,address,uint256)": FunctionFragment;
    "updateToken(address,uint256)": FunctionFragment;
    "validTokens()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CLOSED", values?: undefined): string;
  encodeFunctionData(functionFragment: "NONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "OPENED", values?: undefined): string;
  encodeFunctionData(functionFragment: "PENDING", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REGISTERED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "iterateValidTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pairStatus",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "publishToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registryToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenStatus", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updatePair",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "CLOSED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OPENED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PENDING", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REGISTERED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "iterateValidTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITokenRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITokenRegistryInterface;

  functions: {
    CLOSED(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "CLOSED()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    NONE(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "NONE()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    OPENED(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "OPENED()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    PENDING(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "PENDING()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    REGISTERED(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "REGISTERED()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    iterateValidTokens(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "iterateValidTokens(uint32,uint32)"(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    pairStatus(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pairStatus(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    publishToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "publishToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registryToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registryToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "tokenCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tokenStatus(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenStatus(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    updatePair(
      tokenA: string,
      tokenB: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePair(address,address,uint256)"(
      tokenA: string,
      tokenB: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateToken(
      _token: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateToken(address,uint256)"(
      _token: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validTokens(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "validTokens()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;
  };

  CLOSED(overrides?: CallOverrides): Promise<BigNumber>;

  "CLOSED()"(overrides?: CallOverrides): Promise<BigNumber>;

  NONE(overrides?: CallOverrides): Promise<BigNumber>;

  "NONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  OPENED(overrides?: CallOverrides): Promise<BigNumber>;

  "OPENED()"(overrides?: CallOverrides): Promise<BigNumber>;

  PENDING(overrides?: CallOverrides): Promise<BigNumber>;

  "PENDING()"(overrides?: CallOverrides): Promise<BigNumber>;

  REGISTERED(overrides?: CallOverrides): Promise<BigNumber>;

  "REGISTERED()"(overrides?: CallOverrides): Promise<BigNumber>;

  iterateValidTokens(
    _start: BigNumberish,
    _end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "iterateValidTokens(uint32,uint32)"(
    _start: BigNumberish,
    _end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  pairStatus(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pairStatus(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  publishToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "publishToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registryToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registryToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenStatus(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "tokenStatus(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updatePair(
    tokenA: string,
    tokenB: string,
    _status: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePair(address,address,uint256)"(
    tokenA: string,
    tokenB: string,
    _status: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateToken(
    _token: string,
    _status: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateToken(address,uint256)"(
    _token: string,
    _status: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validTokens(overrides?: CallOverrides): Promise<string[]>;

  "validTokens()"(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    CLOSED(overrides?: CallOverrides): Promise<BigNumber>;

    "CLOSED()"(overrides?: CallOverrides): Promise<BigNumber>;

    NONE(overrides?: CallOverrides): Promise<BigNumber>;

    "NONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    OPENED(overrides?: CallOverrides): Promise<BigNumber>;

    "OPENED()"(overrides?: CallOverrides): Promise<BigNumber>;

    PENDING(overrides?: CallOverrides): Promise<BigNumber>;

    "PENDING()"(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTERED(overrides?: CallOverrides): Promise<BigNumber>;

    "REGISTERED()"(overrides?: CallOverrides): Promise<BigNumber>;

    iterateValidTokens(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "iterateValidTokens(uint32,uint32)"(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    pairStatus(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pairStatus(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "publishToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registryToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "registryToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenStatus(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenStatus(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePair(
      tokenA: string,
      tokenB: string,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updatePair(address,address,uint256)"(
      tokenA: string,
      tokenB: string,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateToken(
      _token: string,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateToken(address,uint256)"(
      _token: string,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validTokens(overrides?: CallOverrides): Promise<string[]>;

    "validTokens()"(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    CLOSED(overrides?: CallOverrides): Promise<BigNumber>;

    "CLOSED()"(overrides?: CallOverrides): Promise<BigNumber>;

    NONE(overrides?: CallOverrides): Promise<BigNumber>;

    "NONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    OPENED(overrides?: CallOverrides): Promise<BigNumber>;

    "OPENED()"(overrides?: CallOverrides): Promise<BigNumber>;

    PENDING(overrides?: CallOverrides): Promise<BigNumber>;

    "PENDING()"(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTERED(overrides?: CallOverrides): Promise<BigNumber>;

    "REGISTERED()"(overrides?: CallOverrides): Promise<BigNumber>;

    iterateValidTokens(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "iterateValidTokens(uint32,uint32)"(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairStatus(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pairStatus(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "publishToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registryToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "registryToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenStatus(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenStatus(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePair(
      tokenA: string,
      tokenB: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePair(address,address,uint256)"(
      tokenA: string,
      tokenB: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateToken(
      _token: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateToken(address,uint256)"(
      _token: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "validTokens()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CLOSED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CLOSED()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NONE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPENED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OPENED()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PENDING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PENDING()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REGISTERED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REGISTERED()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iterateValidTokens(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "iterateValidTokens(uint32,uint32)"(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairStatus(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairStatus(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "publishToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registryToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registryToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenStatus(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenStatus(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePair(
      tokenA: string,
      tokenB: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePair(address,address,uint256)"(
      tokenA: string,
      tokenB: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateToken(
      _token: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateToken(address,uint256)"(
      _token: string,
      _status: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
