{
  "address": "0x1b924e04e776B80e958afED1031d3da6D5E4c0AD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "WeightChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLATFORM",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGAS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TGAS",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_FACTORY",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_PLATFORM",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferNotify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pairs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "updatePairPowers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newImpl",
          "type": "address"
        }
      ],
      "name": "updateTGASImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromPair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toPair",
          "type": "address"
        }
      ],
      "name": "upgradeProdutivity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe4c45fee18c107a1bce3e30a3108aea61088318add2ff2c559ebc71fdeb0fafb",
  "receipt": {
    "to": null,
    "from": "0x73964F6F211D5a8428322EDFbDfEc72FF76D9fCd",
    "contractAddress": "0x1b924e04e776B80e958afED1031d3da6D5E4c0AD",
    "transactionIndex": 2,
    "gasUsed": "1091039",
    "logsBloom": "0x
    "blockHash": "0x8498c6b3755d3f47ebbd404c583af09457c15e4f8cd81992f2faf5cf2aabac55",
    "transactionHash": "0xe4c45fee18c107a1bce3e30a3108aea61088318add2ff2c559ebc71fdeb0fafb",
    "logs": [],
    "blockNumber": 10665076,
    "cumulativeGasUsed": "2287646",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6fd9fafb27eecad3e199e40cc6590b7a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"WeightChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGAS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TGAS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FACTORY\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PLATFORM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferNotify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"updatePairPowers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"updateTGASImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toPair\",\"type\":\"address\"}],\"name\":\"upgradeProdutivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/TomiTransferListener.sol\":\"TomiTransferListener\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/TomiTransferListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\nimport './modules/Ownable.sol';\\nimport './interfaces/ITgas.sol';\\nimport './interfaces/ITomiFactory.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/ITomiPair.sol';\\nimport './libraries/TomiSwapLibrary.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract TomiTransferListener is Ownable {\\n    uint256 public version = 1;\\n    address public TGAS;\\n    address public PLATFORM;\\n    address public WETH;\\n    address public FACTORY;\\n    address public admin;\\n\\n    mapping(address => uint) public pairWeights;\\n\\n    event Transfer(address indexed from, address indexed to, address indexed token, uint256 amount);\\n    event WeightChanged(address indexed pair, uint weight);\\n\\n    function initialize(\\n        address _TGAS,\\n        address _FACTORY,\\n        address _WETH,\\n        address _PLATFORM,\\n        address _admin\\n    ) external onlyOwner {\\n        require(\\n            _TGAS != address(0) && _FACTORY != address(0) && _WETH != address(0) && _PLATFORM != address(0),\\n            'TOMI TRANSFER LISTENER : INPUT ADDRESS IS ZERO'\\n        );\\n        TGAS = _TGAS;\\n        FACTORY = _FACTORY;\\n        WETH = _WETH;\\n        PLATFORM = _PLATFORM;\\n        admin = _admin;\\n    }\\n\\n    function changeAdmin(address _admin) external onlyOwner {\\n        admin = _admin;\\n    }\\n\\n    function updateTGASImpl(address _newImpl) external onlyOwner {\\n        ITgas(TGAS).upgradeImpl(_newImpl);\\n    }\\n\\n    function updatePairPowers(address[] calldata _pairs, uint[] calldata _weights) external {\\n        require(msg.sender == admin, 'TOMI TRANSFER LISTENER: ADMIN PERMISSION');\\n        require(_pairs.length == _weights.length, \\\"TOMI TRANSFER LISTENER: INVALID PARAMS\\\");\\n\\n        for(uint i = 0;i < _weights.length;i++) {\\n            pairWeights[_pairs[i]] = _weights[i];\\n            _setProdutivity(_pairs[i]);\\n            emit WeightChanged(_pairs[i], _weights[i]);\\n        }\\n    }\\n\\n\\n    function _setProdutivity(address _pair) internal {\\n        (uint256 lastProdutivity, ) = ITgas(TGAS).getProductivity(_pair);\\n        address token0 = ITomiPair(_pair).token0();\\n        address token1 = ITomiPair(_pair).token1();\\n        (uint reserve0, uint reserve1, ) = ITomiPair(_pair).getReserves();\\n        uint currentProdutivity = 0;\\n        if(token0 == TGAS) {\\n            currentProdutivity = reserve0 * pairWeights[_pair];\\n        } else if(token1 == TGAS) {\\n            currentProdutivity = reserve1 * pairWeights[_pair];\\n        }\\n\\n        if(lastProdutivity != currentProdutivity) {\\n            if(lastProdutivity > 0) {\\n                ITgas(TGAS).decreaseProductivity(_pair, lastProdutivity);\\n            } \\n\\n            if(currentProdutivity > 0) {\\n                ITgas(TGAS).increaseProductivity(_pair, currentProdutivity);\\n            }\\n        }\\n    }\\n\\n    function upgradeProdutivity(address fromPair, address toPair) external {\\n        require(msg.sender == PLATFORM, 'TOMI TRANSFER LISTENER: PERMISSION');\\n        (uint256 fromPairPower, ) = ITgas(TGAS).getProductivity(fromPair);\\n        (uint256 toPairPower, ) = ITgas(TGAS).getProductivity(toPair);\\n        if(fromPairPower > 0 && toPairPower == 0) {\\n            ITgas(TGAS).decreaseProductivity(fromPair, fromPairPower);\\n            ITgas(TGAS).increaseProductivity(toPair, fromPairPower);\\n        }\\n    }\\n\\n    function transferNotify(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) external returns (bool) {\\n        require(msg.sender == PLATFORM, 'TOMI TRANSFER LISTENER: PERMISSION');\\n        if(ITomiFactory(FACTORY).isPair(from) && token == TGAS) {\\n            _setProdutivity(from);\\n        }\\n\\n        if(ITomiFactory(FACTORY).isPair(to) && token == TGAS) {\\n            _setProdutivity(to);\\n        }\\n\\n        emit Transfer(from, to, token, amount);\\n        return true;\\n    }\\n}\",\"keccak256\":\"0xdf759e807f2f6de875ef7fe15d05703c162747d8f3f6793db7f0d72e0cdd9c7e\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\",\"keccak256\":\"0x6e5335393e260d808f34e7e3dfd6177004185a9ad70e5a63a0c49844bba42b87\"},\"contracts/interfaces/ITgas.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITgas {\\n    function amountPerBlock() external view returns (uint);\\n    function changeInterestRatePerBlock(uint value) external returns (bool);\\n    function getProductivity(address user) external view returns (uint, uint);\\n    function increaseProductivity(address user, uint value) external returns (bool);\\n    function decreaseProductivity(address user, uint value) external returns (bool);\\n    function take() external view returns (uint);\\n    function takeWithBlock() external view returns (uint, uint);\\n    function mint() external returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function upgradeImpl(address _newImpl) external;\\n    function upgradeGovernance(address _newGovernor) external;\\n    function transfer(address to, uint value) external returns (bool);\\n    function approve(address spender, uint value) external returns (bool);\\n}\",\"keccak256\":\"0x26f114dcfa8a1d36132aa730809cff39345d65a8ab373abb4572075fb4b4cea1\"},\"contracts/interfaces/ITomiFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITomiFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function contractCodeHash() external view returns (bytes32);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function isPair(address pair) external view returns (bool);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n    function playerPairs(address player, uint index) external view returns (address pair);\\n    function getPlayerPairCount(address player) external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function addPlayerPair(address player, address _pair) external returns (bool);\\n}\",\"keccak256\":\"0x6d242d5d40344fff4d0ac3577771d1092cc19d3f360717bfb7dd17ed99090803\"},\"contracts/interfaces/ITomiPair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITomiPair {\\n  \\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address) external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address from, address to, uint amount) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address tokenA, address tokenB, address platform, address tgas) external;\\n    function swapFee(uint amount, address token, address to) external ;\\n    function queryReward() external view returns (uint rewardAmount, uint blockNumber);\\n    function mintReward() external returns (uint rewardAmount);\\n    function getTGASReserve() external view returns (uint);\\n}\",\"keccak256\":\"0xa709dc414b1ff63e25c3cc225b326c4e0285bc1ec674dae5add53d0737dafcb9\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x2e1df665169560627c2a0dce65572e63de974bb41c759cdeed973cd570b4d7cf\"},\"contracts/libraries/TomiSwapLibrary.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport '../interfaces/ITomiPair.sol';\\nimport '../interfaces/ITomiFactory.sol';\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary TomiSwapLibrary {\\n    using SafeMath for uint;\\n\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'TomiSwapLibrary: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'TomiSwapLibrary: ZERO_ADDRESS');\\n    }\\n\\n    function pairFor(address factory, address tokenA, address tokenB) internal view returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        bytes32 rawAddress = keccak256(\\n        abi.encodePacked(\\n            bytes1(0xff),\\n            factory,\\n            salt,\\n            ITomiFactory(factory).contractCodeHash()\\n            )\\n        );\\n        return address(bytes20(rawAddress << 96));\\n    }\\n\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = ITomiPair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n    \\n    function quoteEnhance(address factory, address tokenA, address tokenB, uint amountA) internal view returns(uint amountB) {\\n        (uint reserveA, uint reserveB) = getReserves(factory, tokenA, tokenB);\\n        return quote(amountA, reserveA, reserveB);\\n    }\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'TomiSwapLibrary: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'TomiSwapLibrary: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'TomiSwapLibrary: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'TomiSwapLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = amountIn.mul(reserveOut);\\n        uint denominator = reserveIn.add(amountIn);\\n        amountOut = numerator / denominator;\\n    }\\n    \\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'TomiSwapLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'TomiSwapLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut);\\n        uint denominator = reserveOut.sub(amountOut);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x63a5b085fb28116ad7b42a0cc7561fb71e1607c380c14378456e540963072770\"},\"contracts/modules/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\\n        _;\\n    }\\n\\n    function changeOwner(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\\n        emit OwnerChanged(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n\\n}\",\"keccak256\":\"0xa20172f0e84dc77ca8c1724023e289a71e7c30fdd3c8d0649204657f87444a95\"}},\"version\":1}",
  "bytecode": "0x608060405260018055600080546001600160a01b0319163317905561120f806100296000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063ad5c464811610066578063ad5c46481461028a578063bd8ea65314610292578063d669c11c146102b8578063f851a4401461037a576100f5565b80638da5cb5b146101e65780638f283970146101ee578063a612dea414610214578063a6f9dae114610264576100f5565b806354fd4d50116100d357806354fd4d50146101705780636ef9a3e71461018a5780637efc77fa146101b857806388976f86146101c0576100f5565b80630c7390a8146100fa5780631459457a1461011e5780632dd3100014610168575b600080fd5b610102610382565b604080516001600160a01b039092168252519081900360200190f35b610166600480360360a081101561013457600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013582169160809091013516610391565b005b6101026104d4565b6101786104e3565b60408051918252519081900360200190f35b610166600480360360408110156101a057600080fd5b506001600160a01b03813581169160200135166104e9565b610102610744565b610178600480360360208110156101d657600080fd5b50356001600160a01b0316610753565b610102610765565b6101666004803603602081101561020457600080fd5b50356001600160a01b0316610774565b6102506004803603608081101561022a57600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356107f7565b604080519115158252519081900360200190f35b6101666004803603602081101561027a57600080fd5b50356001600160a01b03166109e3565b610102610afa565b610166600480360360208110156102a857600080fd5b50356001600160a01b0316610b09565b610166600480360360408110156102ce57600080fd5b8101906020810181356401000000008111156102e957600080fd5b8201836020820111156102fb57600080fd5b8035906020019184602083028401116401000000008311171561031d57600080fd5b91939092909160208101903564010000000081111561033b57600080fd5b82018360208201111561034d57600080fd5b8035906020019184602083028401116401000000008311171561036f57600080fd5b509092509050610bdf565b610102610d62565b6002546001600160a01b031681565b6000546001600160a01b031633146103e5576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b6001600160a01b0385161580159061040557506001600160a01b03841615155b801561041957506001600160a01b03831615155b801561042d57506001600160a01b03821615155b6104685760405162461bcd60e51b815260040180806020018281038252602e81526020018061113c602e913960400191505060405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03978816179091556005805482169587169590951790945560048054851693861693909317909255600380548416918516919091179055600680549092169216919091179055565b6005546001600160a01b031681565b60015481565b6003546001600160a01b031633146105325760405162461bcd60e51b81526004018080602001828103825260228152602001806111906022913960400191505060405180910390fd5b600254604080516328e964e960e01b81526001600160a01b038581166004830152825160009491909116926328e964e99260248082019391829003018186803b15801561057e57600080fd5b505afa158015610592573d6000803e3d6000fd5b505050506040513d60408110156105a857600080fd5b5051600254604080516328e964e960e01b81526001600160a01b03868116600483015282519495506000949316926328e964e992602480840193919291829003018186803b1580156105f957600080fd5b505afa15801561060d573d6000803e3d6000fd5b505050506040513d604081101561062357600080fd5b505190508115801590610634575080155b1561073e576002546040805163257d336b60e11b81526001600160a01b0387811660048301526024820186905291519190921691634afa66d69160448083019260209291908290030181600087803b15801561068f57600080fd5b505af11580156106a3573d6000803e3d6000fd5b505050506040513d60208110156106b957600080fd5b5050600254604080516336f04e4560e01b81526001600160a01b03868116600483015260248201869052915191909216916336f04e459160448083019260209291908290030181600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b505050506040513d602081101561073b57600080fd5b50505b50505050565b6003546001600160a01b031681565b60076020526000908152604090205481565b6000546001600160a01b031681565b6000546001600160a01b031633146107c8576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546000906001600160a01b031633146108435760405162461bcd60e51b81526004018080602001828103825260228152602001806111906022913960400191505060405180910390fd5b6005546040805163e5e31b1360e01b81526001600160a01b0388811660048301529151919092169163e5e31b13916024808301926020929190829003018186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d60208110156108ba57600080fd5b505180156108d557506002546001600160a01b038481169116145b156108e3576108e385610d71565b6005546040805163e5e31b1360e01b81526001600160a01b0387811660048301529151919092169163e5e31b13916024808301926020929190829003018186803b15801561093057600080fd5b505afa158015610944573d6000803e3d6000fd5b505050506040513d602081101561095a57600080fd5b5051801561097557506002546001600160a01b038481169116145b156109835761098384610d71565b826001600160a01b0316846001600160a01b0316866001600160a01b03167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f856040518082815260200191505060405180910390a4506001949350505050565b6000546001600160a01b03163314610a37576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b6001600160a01b038116610a92576040805162461bcd60e51b815260206004820152601860248201527f4f776e61626c653a20494e56414c49445f414444524553530000000000000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b6000546001600160a01b03163314610b5d576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b600254604080517f1a2f13630000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291519190921691631a2f136391602480830192600092919082900301818387803b158015610bc457600080fd5b505af1158015610bd8573d6000803e3d6000fd5b5050505050565b6006546001600160a01b03163314610c285760405162461bcd60e51b81526004018080602001828103825260288152602001806111b26028913960400191505060405180910390fd5b828114610c665760405162461bcd60e51b815260040180806020018281038252602681526020018061116a6026913960400191505060405180910390fd5b60005b81811015610bd857828282818110610c7d57fe5b9050602002013560076000878785818110610c9457fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002081905550610cec858583818110610cd757fe5b905060200201356001600160a01b0316610d71565b848482818110610cf857fe5b905060200201356001600160a01b03166001600160a01b03167f8eb4dcf04b639a7ab18d22bf585bc00af297a19524c4f0ad9ddf0be20b2e7bb6848484818110610d3e57fe5b905060200201356040518082815260200191505060405180910390a2600101610c69565b6006546001600160a01b031681565b600254604080516328e964e960e01b81526001600160a01b038481166004830152825160009491909116926328e964e99260248082019391829003018186803b158015610dbd57600080fd5b505afa158015610dd1573d6000803e3d6000fd5b505050506040513d6040811015610de757600080fd5b5051604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b03851691630dfe1681916004808301926020929190829003018186803b158015610e4857600080fd5b505afa158015610e5c573d6000803e3d6000fd5b505050506040513d6020811015610e7257600080fd5b5051604080517fd21220a700000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b0386169163d21220a7916004808301926020929190829003018186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d6020811015610efd57600080fd5b5051604080517f0902f1ac000000000000000000000000000000000000000000000000000000008152905191925060009182916001600160a01b03881691630902f1ac91600480820192606092909190829003018186803b158015610f6157600080fd5b505afa158015610f75573d6000803e3d6000fd5b505050506040513d6060811015610f8b57600080fd5b5080516020909101516002546dffffffffffffffffffffffffffff9283169450911691506000906001600160a01b0386811691161415610fe657506001600160a01b0386166000908152600760205260409020548202611019565b6002546001600160a01b038581169116141561101957506001600160a01b03861660009081526007602052604090205481025b8086146111325785156110a9576002546040805163257d336b60e11b81526001600160a01b038a81166004830152602482018a905291519190921691634afa66d69160448083019260209291908290030181600087803b15801561107c57600080fd5b505af1158015611090573d6000803e3d6000fd5b505050506040513d60208110156110a657600080fd5b50505b801561113257600254604080516336f04e4560e01b81526001600160a01b038a8116600483015260248201859052915191909216916336f04e459160448083019260209291908290030181600087803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b505050506040513d602081101561112f57600080fd5b50505b5050505050505056fe544f4d49205452414e53464552204c495354454e4552203a20494e5055542041444452455353204953205a45524f544f4d49205452414e53464552204c495354454e45523a20494e56414c494420504152414d53544f4d49205452414e53464552204c495354454e45523a205045524d495353494f4e544f4d49205452414e53464552204c495354454e45523a2041444d494e205045524d495353494f4ea264697066735822122088b88c39af071563d7b578be6388c78b7fd8cc05d2d36c134b9b33f64bbed88f64736f6c63430006060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063ad5c464811610066578063ad5c46481461028a578063bd8ea65314610292578063d669c11c146102b8578063f851a4401461037a576100f5565b80638da5cb5b146101e65780638f283970146101ee578063a612dea414610214578063a6f9dae114610264576100f5565b806354fd4d50116100d357806354fd4d50146101705780636ef9a3e71461018a5780637efc77fa146101b857806388976f86146101c0576100f5565b80630c7390a8146100fa5780631459457a1461011e5780632dd3100014610168575b600080fd5b610102610382565b604080516001600160a01b039092168252519081900360200190f35b610166600480360360a081101561013457600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013582169160809091013516610391565b005b6101026104d4565b6101786104e3565b60408051918252519081900360200190f35b610166600480360360408110156101a057600080fd5b506001600160a01b03813581169160200135166104e9565b610102610744565b610178600480360360208110156101d657600080fd5b50356001600160a01b0316610753565b610102610765565b6101666004803603602081101561020457600080fd5b50356001600160a01b0316610774565b6102506004803603608081101561022a57600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356107f7565b604080519115158252519081900360200190f35b6101666004803603602081101561027a57600080fd5b50356001600160a01b03166109e3565b610102610afa565b610166600480360360208110156102a857600080fd5b50356001600160a01b0316610b09565b610166600480360360408110156102ce57600080fd5b8101906020810181356401000000008111156102e957600080fd5b8201836020820111156102fb57600080fd5b8035906020019184602083028401116401000000008311171561031d57600080fd5b91939092909160208101903564010000000081111561033b57600080fd5b82018360208201111561034d57600080fd5b8035906020019184602083028401116401000000008311171561036f57600080fd5b509092509050610bdf565b610102610d62565b6002546001600160a01b031681565b6000546001600160a01b031633146103e5576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b6001600160a01b0385161580159061040557506001600160a01b03841615155b801561041957506001600160a01b03831615155b801561042d57506001600160a01b03821615155b6104685760405162461bcd60e51b815260040180806020018281038252602e81526020018061113c602e913960400191505060405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03978816179091556005805482169587169590951790945560048054851693861693909317909255600380548416918516919091179055600680549092169216919091179055565b6005546001600160a01b031681565b60015481565b6003546001600160a01b031633146105325760405162461bcd60e51b81526004018080602001828103825260228152602001806111906022913960400191505060405180910390fd5b600254604080516328e964e960e01b81526001600160a01b038581166004830152825160009491909116926328e964e99260248082019391829003018186803b15801561057e57600080fd5b505afa158015610592573d6000803e3d6000fd5b505050506040513d60408110156105a857600080fd5b5051600254604080516328e964e960e01b81526001600160a01b03868116600483015282519495506000949316926328e964e992602480840193919291829003018186803b1580156105f957600080fd5b505afa15801561060d573d6000803e3d6000fd5b505050506040513d604081101561062357600080fd5b505190508115801590610634575080155b1561073e576002546040805163257d336b60e11b81526001600160a01b0387811660048301526024820186905291519190921691634afa66d69160448083019260209291908290030181600087803b15801561068f57600080fd5b505af11580156106a3573d6000803e3d6000fd5b505050506040513d60208110156106b957600080fd5b5050600254604080516336f04e4560e01b81526001600160a01b03868116600483015260248201869052915191909216916336f04e459160448083019260209291908290030181600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b505050506040513d602081101561073b57600080fd5b50505b50505050565b6003546001600160a01b031681565b60076020526000908152604090205481565b6000546001600160a01b031681565b6000546001600160a01b031633146107c8576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546000906001600160a01b031633146108435760405162461bcd60e51b81526004018080602001828103825260228152602001806111906022913960400191505060405180910390fd5b6005546040805163e5e31b1360e01b81526001600160a01b0388811660048301529151919092169163e5e31b13916024808301926020929190829003018186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d60208110156108ba57600080fd5b505180156108d557506002546001600160a01b038481169116145b156108e3576108e385610d71565b6005546040805163e5e31b1360e01b81526001600160a01b0387811660048301529151919092169163e5e31b13916024808301926020929190829003018186803b15801561093057600080fd5b505afa158015610944573d6000803e3d6000fd5b505050506040513d602081101561095a57600080fd5b5051801561097557506002546001600160a01b038481169116145b156109835761098384610d71565b826001600160a01b0316846001600160a01b0316866001600160a01b03167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f856040518082815260200191505060405180910390a4506001949350505050565b6000546001600160a01b03163314610a37576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b6001600160a01b038116610a92576040805162461bcd60e51b815260206004820152601860248201527f4f776e61626c653a20494e56414c49445f414444524553530000000000000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b6000546001600160a01b03163314610b5d576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b600254604080517f1a2f13630000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291519190921691631a2f136391602480830192600092919082900301818387803b158015610bc457600080fd5b505af1158015610bd8573d6000803e3d6000fd5b5050505050565b6006546001600160a01b03163314610c285760405162461bcd60e51b81526004018080602001828103825260288152602001806111b26028913960400191505060405180910390fd5b828114610c665760405162461bcd60e51b815260040180806020018281038252602681526020018061116a6026913960400191505060405180910390fd5b60005b81811015610bd857828282818110610c7d57fe5b9050602002013560076000878785818110610c9457fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002081905550610cec858583818110610cd757fe5b905060200201356001600160a01b0316610d71565b848482818110610cf857fe5b905060200201356001600160a01b03166001600160a01b03167f8eb4dcf04b639a7ab18d22bf585bc00af297a19524c4f0ad9ddf0be20b2e7bb6848484818110610d3e57fe5b905060200201356040518082815260200191505060405180910390a2600101610c69565b6006546001600160a01b031681565b600254604080516328e964e960e01b81526001600160a01b038481166004830152825160009491909116926328e964e99260248082019391829003018186803b158015610dbd57600080fd5b505afa158015610dd1573d6000803e3d6000fd5b505050506040513d6040811015610de757600080fd5b5051604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b03851691630dfe1681916004808301926020929190829003018186803b158015610e4857600080fd5b505afa158015610e5c573d6000803e3d6000fd5b505050506040513d6020811015610e7257600080fd5b5051604080517fd21220a700000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b0386169163d21220a7916004808301926020929190829003018186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d6020811015610efd57600080fd5b5051604080517f0902f1ac000000000000000000000000000000000000000000000000000000008152905191925060009182916001600160a01b03881691630902f1ac91600480820192606092909190829003018186803b158015610f6157600080fd5b505afa158015610f75573d6000803e3d6000fd5b505050506040513d6060811015610f8b57600080fd5b5080516020909101516002546dffffffffffffffffffffffffffff9283169450911691506000906001600160a01b0386811691161415610fe657506001600160a01b0386166000908152600760205260409020548202611019565b6002546001600160a01b038581169116141561101957506001600160a01b03861660009081526007602052604090205481025b8086146111325785156110a9576002546040805163257d336b60e11b81526001600160a01b038a81166004830152602482018a905291519190921691634afa66d69160448083019260209291908290030181600087803b15801561107c57600080fd5b505af1158015611090573d6000803e3d6000fd5b505050506040513d60208110156110a657600080fd5b50505b801561113257600254604080516336f04e4560e01b81526001600160a01b038a8116600483015260248201859052915191909216916336f04e459160448083019260209291908290030181600087803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b505050506040513d602081101561112f57600080fd5b50505b5050505050505056fe544f4d49205452414e53464552204c495354454e4552203a20494e5055542041444452455353204953205a45524f544f4d49205452414e53464552204c495354454e45523a20494e56414c494420504152414d53544f4d49205452414e53464552204c495354454e45523a205045524d495353494f4e544f4d49205452414e53464552204c495354454e45523a2041444d494e205045524d495353494f4ea264697066735822122088b88c39af071563d7b578be6388c78b7fd8cc05d2d36c134b9b33f64bbed88f64736f6c63430006060033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14775,
        "contract": "contracts/TomiTransferListener.sol:TomiTransferListener",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10497,
        "contract": "contracts/TomiTransferListener.sol:TomiTransferListener",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10499,
        "contract": "contracts/TomiTransferListener.sol:TomiTransferListener",
        "label": "TGAS",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10501,
        "contract": "contracts/TomiTransferListener.sol:TomiTransferListener",
        "label": "PLATFORM",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10503,
        "contract": "contracts/TomiTransferListener.sol:TomiTransferListener",
        "label": "WETH",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10505,
        "contract": "contracts/TomiTransferListener.sol:TomiTransferListener",
        "label": "FACTORY",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10507,
        "contract": "contracts/TomiTransferListener.sol:TomiTransferListener",
        "label": "admin",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10511,
        "contract": "contracts/TomiTransferListener.sol:TomiTransferListener",
        "label": "pairWeights",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}