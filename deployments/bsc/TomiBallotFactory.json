{
  "address": "0x9A2035121Bc45Dff21038F71c26331bd02e7Bd1b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ballotAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "createTime",
          "type": "uint256"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_subject",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa157653676f1e852ab116e2c2f37c0155d636bbb732a6ef627801c89f6f2614f",
  "receipt": {
    "to": null,
    "from": "0x73964F6F211D5a8428322EDFbDfEc72FF76D9fCd",
    "contractAddress": "0x9A2035121Bc45Dff21038F71c26331bd02e7Bd1b",
    "transactionIndex": 2,
    "gasUsed": "1002188",
    "logsBloom": "0x
    "blockHash": "0x22c1413a3eed3a0c05ec24bd86f7f30c37fb6fbfcf0d328f990abc303cc11844",
    "transactionHash": "0xa157653676f1e852ab116e2c2f37c0155d636bbb732a6ef627801c89f6f2614f",
    "logs": [],
    "blockNumber": 10665032,
    "cumulativeGasUsed": "2450603",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6fd9fafb27eecad3e199e40cc6590b7a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ballotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ballots/TomiBallotFactory.sol\":\"TomiBallotFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/ballots/TomiBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport '../interfaces/IERC20.sol';\\n\\n/**\\n * @title TomiBallot\\n * @dev Implements voting process along with vote delegation\\n */\\ncontract TomiBallot {\\n    struct Voter {\\n        uint256 weight; // weight is accumulated by delegation\\n        bool voted; // if true, that person already voted\\n        address delegate; // person delegated to\\n        uint256 vote; // index of the voted proposal\\n    }\\n\\n    mapping(address => Voter) public voters;\\n    mapping(uint256 => uint256) public proposals;\\n\\n    address public governor;\\n    address public proposer;\\n    uint256 public value;\\n    uint256 public endBlockNumber;\\n    bool public ended;\\n    string public subject;\\n    string public content;\\n\\n    uint256 private constant NONE = 0;\\n    uint256 private constant YES = 1;\\n    uint256 private constant NO = 2;\\n\\n    uint256 public total;\\n    uint256 public createTime;\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, 'TomiBallot: FORBIDDEN');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Create a new ballot.\\n     */\\n    constructor(\\n        address _proposer,\\n        uint256 _value,\\n        uint256 _endBlockNumber,\\n        address _governor,\\n        string memory _subject,\\n        string memory _content\\n    ) public {\\n        proposer = _proposer;\\n        value = _value;\\n        endBlockNumber = _endBlockNumber;\\n        governor = _governor;\\n        subject = _subject;\\n        content = _content;\\n        proposals[YES] = 0;\\n        proposals[NO] = 0;\\n        createTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Give 'voter' the right to vote on this ballot.\\n     * @param voter address of voter\\n     */\\n    function _giveRightToVote(address voter) private returns (Voter storage) {\\n        require(block.number < endBlockNumber, 'Bollot is ended');\\n        Voter storage sender = voters[voter];\\n        require(!sender.voted, 'You already voted');\\n        sender.weight += IERC20(governor).balanceOf(voter);\\n        require(sender.weight != 0, 'Has no right to vote');\\n        return sender;\\n    }\\n\\n    /**\\n     * @dev Delegate your vote to the voter 'to'.\\n     * @param to address to which vote is delegated\\n     */\\n    function delegate(address to) public {\\n        Voter storage sender = _giveRightToVote(msg.sender);\\n        require(to != msg.sender, 'Self-delegation is disallowed');\\n\\n        while (voters[to].delegate != address(0)) {\\n            to = voters[to].delegate;\\n\\n            // We found a loop in the delegation, not allowed.\\n            require(to != msg.sender, 'Found loop in delegation');\\n        }\\n        sender.voted = true;\\n        sender.delegate = to;\\n        Voter storage delegate_ = voters[to];\\n        if (delegate_.voted) {\\n            // If the delegate already voted,\\n            // directly add to the number of votes\\n            proposals[delegate_.vote] += sender.weight;\\n            total += sender.weight;\\n        } else {\\n            // If the delegate did not vote yet,\\n            // add to her weight.\\n            delegate_.weight += sender.weight;\\n            total += sender.weight;\\n        }\\n    }\\n\\n    /**\\n     * @dev Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.\\n     * @param proposal index of proposal in the proposals array\\n     */\\n    function vote(uint256 proposal) public {\\n        Voter storage sender = _giveRightToVote(msg.sender);\\n        require(proposal == YES || proposal == NO, 'Only vote 1 or 2');\\n        sender.voted = true;\\n        sender.vote = proposal;\\n        proposals[proposal] += sender.weight;\\n        total += sender.weight;\\n    }\\n\\n    /**\\n     * @dev Computes the winning proposal taking all previous votes into account.\\n     * @return winningProposal_ index of winning proposal in the proposals array\\n     */\\n    function winningProposal() public view returns (uint256) {\\n        if (proposals[YES] > proposals[NO]) {\\n            return YES;\\n        } else if (proposals[YES] < proposals[NO]) {\\n            return NO;\\n        } else {\\n            return NONE;\\n        }\\n    }\\n\\n    function result() public view returns (bool) {\\n        uint256 winner = winningProposal();\\n        if (winner == YES) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function end() public onlyGovernor returns (bool) {\\n        require(block.number >= endBlockNumber, 'ballot not yet ended');\\n        require(!ended, 'end has already been called');\\n        ended = true;\\n        return result();\\n    }\\n\\n    function weight(address user) external view returns (uint256) {\\n        Voter memory voter = voters[user];\\n        return voter.weight;\\n    }\\n}\",\"keccak256\":\"0xe11ac908c375a1655f2876a37aabf40131c2881ace166947fddc521cae6e371e\"},\"contracts/ballots/TomiBallotFactory.sol\":{\"content\":\"pragma solidity >=0.6.6;\\n\\nimport \\\"./TomiBallot.sol\\\";\\n\\ncontract TomiBallotFactory {\\n    event Created(address indexed proposer, address indexed ballotAddr, uint256 createTime);\\n\\n    constructor() public {}\\n\\n    function create(\\n        address _proposer,\\n        uint256 _value,\\n        uint256 _endBlockNumber,\\n        string calldata _subject,\\n        string calldata _content\\n    ) external returns (address) {\\n        require(_value >= 0, 'TomiBallotFactory: INVALID_PARAMTERS');\\n        address ballotAddr = address(\\n            new TomiBallot(_proposer, _value, _endBlockNumber, msg.sender, _subject, _content)\\n        );\\n        emit Created(_proposer, ballotAddr, block.timestamp);\\n        return ballotAddr;\\n    }\\n}\\n\",\"keccak256\":\"0xa2f2b6dac1c0dfc0ab1a643ce3fb916123658ca49e4acf4e931cacacc8cd97b2\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\",\"keccak256\":\"0x6e5335393e260d808f34e7e3dfd6177004185a9ad70e5a63a0c49844bba42b87\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611136806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806325c8b42814610030575b600080fd5b61010e600480360360a081101561004657600080fd5b6001600160a01b03823516916020810135916040820135919081019060808101606082013564010000000081111561007d57600080fd5b82018360208201111561008f57600080fd5b803590602001918460018302840111640100000000831117156100b157600080fd5b9193909290916020810190356401000000008111156100cf57600080fd5b8201836020820111156100e157600080fd5b8035906020019184600183028401116401000000008311171561010357600080fd5b50909250905061012a565b604080516001600160a01b039092168252519081900360200190f35b60008088888833898989896040516101419061023a565b6001600160a01b03808a16825260208201899052604082018890528616606082015260c06080820181815290820185905260a0820160e08301878780828437600083820152601f01601f1916909101848103835285815260200190508585808284376000838201819052604051601f909201601f19169093018190039d509b50909950505050505050505050f0801580156101e0573d6000803e3d6000fd5b509050806001600160a01b0316896001600160a01b03167f822b3073be62c5c7f143c2dcd71ee266434ee935d90a1eec3be34710ac8ec1a2426040518082815260200191505060405180910390a398975050505050505050565b610eb9806102488339019056fe60806040523480156200001157600080fd5b5060405162000eb938038062000eb9833981810160405260c08110156200003757600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200007357600080fd5b9083019060208201858111156200008957600080fd5b8251640100000000811182820188101715620000a457600080fd5b82525081516020918201929091019080838360005b83811015620000d3578181015183820152602001620000b9565b50505050905090810190601f168015620001015780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200012557600080fd5b9083019060208201858111156200013b57600080fd5b82516401000000008111828201881017156200015657600080fd5b82525081516020918201929091019080838360005b83811015620001855781810151838201526020016200016b565b50505050905090810190601f168015620001b35780820380516001836020036101000a031916815260200191505b506040525050600380546001600160a01b03808a166001600160a01b0319928316179092556004889055600587905560028054928716929091169190911790555081516200020990600790602085019062000281565b5080516200021f90600890602084019062000281565b50506001602052505060007fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f819055600281527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f55505042600a555062000326565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c457805160ff1916838001178555620002f4565b82800160010185558215620002f4579182015b82811115620002f4578251825591602001919060010190620002d7565b506200030292915062000306565b5090565b6200032391905b808211156200030257600081556001016200030d565b90565b610b8380620003366000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063609ff1bd116100b2578063a3ec138d11610081578063b4999e8511610066578063b4999e85146102dd578063efbe1c1c146102e5578063f4396e2a146102ed5761011b565b8063a3ec138d14610281578063a8e4fb90146102d55761011b565b8063609ff1bd1461026157806361dcd7ab1461026957806365372147146102715780638a4d5a67146102795761011b565b806312fa6feb116100ee57806312fa6feb1461020f5780632ddbd13a1461022b5780633fa4f245146102335780635c19a95c1461023b5761011b565b80630121b93f14610120578063013cf08b1461013f5780630a59a98c1461016e5780630c340a24146101eb575b600080fd5b61013d6004803603602081101561013657600080fd5b5035610313565b005b61015c6004803603602081101561015557600080fd5b50356103bc565b60408051918252519081900360200190f35b6101766103ce565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b0578181015183820152602001610198565b50505050905090810190601f1680156101dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f361045c565b604080516001600160a01b039092168252519081900360200190f35b61021761046b565b604080519115158252519081900360200190f35b61015c610474565b61015c61047a565b61013d6004803603602081101561025157600080fd5b50356001600160a01b0316610480565b61015c610637565b61015c6106fb565b610217610701565b610176610729565b6102a76004803603602081101561029757600080fd5b50356001600160a01b0316610784565b6040805194855292151560208501526001600160a01b03909116838301526060830152519081900360800190f35b6101f36107b9565b61015c6107c8565b6102176107ce565b61015c6004803603602081101561030357600080fd5b50356001600160a01b03166108f9565b600061031e33610961565b9050600182148061032f5750600282145b610380576040805162461bcd60e51b815260206004820152601060248201527f4f6e6c7920766f74652031206f72203200000000000000000000000000000000604482015290519081900360640190fd5b6001818101805460ff19168217905560028201839055815460009384526020919091526040909220805490920190915554600980549091019055565b60016020526000908152604090205481565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104545780601f1061042957610100808354040283529160200191610454565b820191906000526020600020905b81548152906001019060200180831161043757829003601f168201915b505050505081565b6002546001600160a01b031681565b60065460ff1681565b60095481565b60045481565b600061048b33610961565b90506001600160a01b0382163314156104eb576040805162461bcd60e51b815260206004820152601d60248201527f53656c662d64656c65676174696f6e20697320646973616c6c6f776564000000604482015290519081900360640190fd5b6001600160a01b0382811660009081526020819052604090206001015461010090041615610593576001600160a01b039182166000908152602081905260409020600101546101009004909116903382141561058e576040805162461bcd60e51b815260206004820152601860248201527f466f756e64206c6f6f7020696e2064656c65676174696f6e0000000000000000604482015290519081900360640190fd5b6104eb565b6001818101805460ff191682177fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b0386169081029190911790915560009081526020819052604090209081015460ff161561061f57815460028201546000908152600160205260409020805490910190558154600980549091019055610632565b8154815401815581546009805490910190555b505050565b600160208190527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f5460009182527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f541115610695575060016106f8565b600160208190527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f546000919091527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5410156106f4575060026106f8565b5060005b90565b600a5481565b60008061070c610637565b905060018114156107215760019150506106f8565b600091505090565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104545780601f1061042957610100808354040283529160200191610454565b600060208190529081526040902080546001820154600290920154909160ff8116916101009091046001600160a01b03169084565b6003546001600160a01b031681565b60055481565b6002546000906001600160a01b03163314610830576040805162461bcd60e51b815260206004820152601560248201527f546f6d6942616c6c6f743a20464f5242494444454e0000000000000000000000604482015290519081900360640190fd5b600554431015610887576040805162461bcd60e51b815260206004820152601460248201527f62616c6c6f74206e6f742079657420656e646564000000000000000000000000604482015290519081900360640190fd5b60065460ff16156108df576040805162461bcd60e51b815260206004820152601b60248201527f656e642068617320616c7265616479206265656e2063616c6c65640000000000604482015290519081900360640190fd5b6006805460ff191660011790556108f4610701565b905090565b6000610903610b1a565b50506001600160a01b039081166000908152602081815260409182902082516080810184528154808252600183015460ff81161515948301949094526101009093049094169284019290925260029091015460609092019190915290565b600060055443106109b9576040805162461bcd60e51b815260206004820152600f60248201527f426f6c6c6f7420697320656e6465640000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152602081905260409020600181015460ff1615610a2b576040805162461bcd60e51b815260206004820152601160248201527f596f7520616c726561647920766f746564000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152915191909216916370a08231916024808301926020929190829003018186803b158015610a9157600080fd5b505afa158015610aa5573d6000803e3d6000fd5b505050506040513d6020811015610abb57600080fd5b5051815401808255610b14576040805162461bcd60e51b815260206004820152601460248201527f486173206e6f20726967687420746f20766f7465000000000000000000000000604482015290519081900360640190fd5b92915050565b60405180608001604052806000815260200160001515815260200160006001600160a01b0316815260200160008152509056fea2646970667358221220e8990914c66437dafd4cd956bc77dae676175640c80f8a3caff11e9f33f70cae64736f6c63430006060033a264697066735822122035d8be2f809ac875d24da7c18b362a6a00170049665c6da98160dc1c69e8c22764736f6c63430006060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806325c8b42814610030575b600080fd5b61010e600480360360a081101561004657600080fd5b6001600160a01b03823516916020810135916040820135919081019060808101606082013564010000000081111561007d57600080fd5b82018360208201111561008f57600080fd5b803590602001918460018302840111640100000000831117156100b157600080fd5b9193909290916020810190356401000000008111156100cf57600080fd5b8201836020820111156100e157600080fd5b8035906020019184600183028401116401000000008311171561010357600080fd5b50909250905061012a565b604080516001600160a01b039092168252519081900360200190f35b60008088888833898989896040516101419061023a565b6001600160a01b03808a16825260208201899052604082018890528616606082015260c06080820181815290820185905260a0820160e08301878780828437600083820152601f01601f1916909101848103835285815260200190508585808284376000838201819052604051601f909201601f19169093018190039d509b50909950505050505050505050f0801580156101e0573d6000803e3d6000fd5b509050806001600160a01b0316896001600160a01b03167f822b3073be62c5c7f143c2dcd71ee266434ee935d90a1eec3be34710ac8ec1a2426040518082815260200191505060405180910390a398975050505050505050565b610eb9806102488339019056fe60806040523480156200001157600080fd5b5060405162000eb938038062000eb9833981810160405260c08110156200003757600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200007357600080fd5b9083019060208201858111156200008957600080fd5b8251640100000000811182820188101715620000a457600080fd5b82525081516020918201929091019080838360005b83811015620000d3578181015183820152602001620000b9565b50505050905090810190601f168015620001015780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200012557600080fd5b9083019060208201858111156200013b57600080fd5b82516401000000008111828201881017156200015657600080fd5b82525081516020918201929091019080838360005b83811015620001855781810151838201526020016200016b565b50505050905090810190601f168015620001b35780820380516001836020036101000a031916815260200191505b506040525050600380546001600160a01b03808a166001600160a01b0319928316179092556004889055600587905560028054928716929091169190911790555081516200020990600790602085019062000281565b5080516200021f90600890602084019062000281565b50506001602052505060007fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f819055600281527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f55505042600a555062000326565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c457805160ff1916838001178555620002f4565b82800160010185558215620002f4579182015b82811115620002f4578251825591602001919060010190620002d7565b506200030292915062000306565b5090565b6200032391905b808211156200030257600081556001016200030d565b90565b610b8380620003366000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063609ff1bd116100b2578063a3ec138d11610081578063b4999e8511610066578063b4999e85146102dd578063efbe1c1c146102e5578063f4396e2a146102ed5761011b565b8063a3ec138d14610281578063a8e4fb90146102d55761011b565b8063609ff1bd1461026157806361dcd7ab1461026957806365372147146102715780638a4d5a67146102795761011b565b806312fa6feb116100ee57806312fa6feb1461020f5780632ddbd13a1461022b5780633fa4f245146102335780635c19a95c1461023b5761011b565b80630121b93f14610120578063013cf08b1461013f5780630a59a98c1461016e5780630c340a24146101eb575b600080fd5b61013d6004803603602081101561013657600080fd5b5035610313565b005b61015c6004803603602081101561015557600080fd5b50356103bc565b60408051918252519081900360200190f35b6101766103ce565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b0578181015183820152602001610198565b50505050905090810190601f1680156101dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f361045c565b604080516001600160a01b039092168252519081900360200190f35b61021761046b565b604080519115158252519081900360200190f35b61015c610474565b61015c61047a565b61013d6004803603602081101561025157600080fd5b50356001600160a01b0316610480565b61015c610637565b61015c6106fb565b610217610701565b610176610729565b6102a76004803603602081101561029757600080fd5b50356001600160a01b0316610784565b6040805194855292151560208501526001600160a01b03909116838301526060830152519081900360800190f35b6101f36107b9565b61015c6107c8565b6102176107ce565b61015c6004803603602081101561030357600080fd5b50356001600160a01b03166108f9565b600061031e33610961565b9050600182148061032f5750600282145b610380576040805162461bcd60e51b815260206004820152601060248201527f4f6e6c7920766f74652031206f72203200000000000000000000000000000000604482015290519081900360640190fd5b6001818101805460ff19168217905560028201839055815460009384526020919091526040909220805490920190915554600980549091019055565b60016020526000908152604090205481565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104545780601f1061042957610100808354040283529160200191610454565b820191906000526020600020905b81548152906001019060200180831161043757829003601f168201915b505050505081565b6002546001600160a01b031681565b60065460ff1681565b60095481565b60045481565b600061048b33610961565b90506001600160a01b0382163314156104eb576040805162461bcd60e51b815260206004820152601d60248201527f53656c662d64656c65676174696f6e20697320646973616c6c6f776564000000604482015290519081900360640190fd5b6001600160a01b0382811660009081526020819052604090206001015461010090041615610593576001600160a01b039182166000908152602081905260409020600101546101009004909116903382141561058e576040805162461bcd60e51b815260206004820152601860248201527f466f756e64206c6f6f7020696e2064656c65676174696f6e0000000000000000604482015290519081900360640190fd5b6104eb565b6001818101805460ff191682177fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b0386169081029190911790915560009081526020819052604090209081015460ff161561061f57815460028201546000908152600160205260409020805490910190558154600980549091019055610632565b8154815401815581546009805490910190555b505050565b600160208190527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f5460009182527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f541115610695575060016106f8565b600160208190527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f546000919091527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5410156106f4575060026106f8565b5060005b90565b600a5481565b60008061070c610637565b905060018114156107215760019150506106f8565b600091505090565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104545780601f1061042957610100808354040283529160200191610454565b600060208190529081526040902080546001820154600290920154909160ff8116916101009091046001600160a01b03169084565b6003546001600160a01b031681565b60055481565b6002546000906001600160a01b03163314610830576040805162461bcd60e51b815260206004820152601560248201527f546f6d6942616c6c6f743a20464f5242494444454e0000000000000000000000604482015290519081900360640190fd5b600554431015610887576040805162461bcd60e51b815260206004820152601460248201527f62616c6c6f74206e6f742079657420656e646564000000000000000000000000604482015290519081900360640190fd5b60065460ff16156108df576040805162461bcd60e51b815260206004820152601b60248201527f656e642068617320616c7265616479206265656e2063616c6c65640000000000604482015290519081900360640190fd5b6006805460ff191660011790556108f4610701565b905090565b6000610903610b1a565b50506001600160a01b039081166000908152602081815260409182902082516080810184528154808252600183015460ff81161515948301949094526101009093049094169284019290925260029091015460609092019190915290565b600060055443106109b9576040805162461bcd60e51b815260206004820152600f60248201527f426f6c6c6f7420697320656e6465640000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152602081905260409020600181015460ff1615610a2b576040805162461bcd60e51b815260206004820152601160248201527f596f7520616c726561647920766f746564000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152915191909216916370a08231916024808301926020929190829003018186803b158015610a9157600080fd5b505afa158015610aa5573d6000803e3d6000fd5b505050506040513d6020811015610abb57600080fd5b5051815401808255610b14576040805162461bcd60e51b815260206004820152601460248201527f486173206e6f20726967687420746f20766f7465000000000000000000000000604482015290519081900360640190fd5b92915050565b60405180608001604052806000815260200160001515815260200160006001600160a01b0316815260200160008152509056fea2646970667358221220e8990914c66437dafd4cd956bc77dae676175640c80f8a3caff11e9f33f70cae64736f6c63430006060033a264697066735822122035d8be2f809ac875d24da7c18b362a6a00170049665c6da98160dc1c69e8c22764736f6c63430006060033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}