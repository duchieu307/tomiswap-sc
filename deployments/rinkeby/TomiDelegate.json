{
  "address": "0xa8b77196B1366d864b2cBaD41d0Ba7f34ec7b753",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_PLATFORM",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_POOL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_TOMI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PLATFORM",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOMI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "addPlayerPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerPairCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAddPlayerPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_PLATFORM",
          "type": "address"
        }
      ],
      "name": "upgradePlatform",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb8c1e398f340b6c36c9f096471b143b773654e3c956402c85d56c60aa022ed9c",
  "receipt": {
    "to": null,
    "from": "0x9ef6eBF5A3E71d7f89eAdb94c8EA4293E64E4B4e",
    "contractAddress": "0xa8b77196B1366d864b2cBaD41d0Ba7f34ec7b753",
    "transactionIndex": 11,
    "gasUsed": "3790504",
    "logsBloom": "0x
    "blockHash": "0xecd1dbab36b521adcd84910f5fa186908a0c3ba14aab4ee8e05cd916afacaea8",
    "transactionHash": "0xb8c1e398f340b6c36c9f096471b143b773654e3c956402c85d56c60aa022ed9c",
    "logs": [],
    "blockNumber": 9163625,
    "cumulativeGasUsed": "8559443",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a5020c260ea63ccE013049995a79b0419B5EE03",
    "0x96347e718B2dc8eC282663F2a5a5B9f2f3a1eB0B",
    "0xE774238f5eF7EA239BE157D4adb82bc753b36836",
    "0xc778417e063141139fce010982780140aa0cd5ab"
  ],
  "solcInputHash": "f36eb242fadd798d11ee81fd592eb5f4",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PLATFORM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_POOL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TOMI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PLATFORM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOMI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addPlayerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerPairCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAddPlayerPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PLATFORM\",\"type\":\"address\"}],\"name\":\"upgradePlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/TomiDelegate.sol\":\"TomiDelegate\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/TomiDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport './TomiLP.sol';\\nimport './modules/Ownable.sol';\\n\\ninterface ITomiLP {\\n    function addLiquidity(\\n        address user,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB,\\n            uint256 _liquidity\\n        );\\n    function removeLiquidity(\\n        address user,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB\\n        );\\n    function addLiquidityETH(\\n        address user,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline) external payable returns (\\n            uint256 _amountToken,\\n            uint256 _amountETH,\\n            uint256 _liquidity\\n        );\\n    function removeLiquidityETH (\\n        address user,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline) external returns (uint256 _amountToken, uint256 _amountETH);\\n    function initialize(address _tokenA, address _tokenB, address _TOMI, address _POOL, address _PLATFORM, address _WETH) external;\\n    function upgrade(address _PLATFORM) external;\\n    function tokenA() external returns(address);\\n}\\n\\ncontract TomiDelegate is Ownable{\\n    using SafeMath for uint;\\n    \\n    address public PLATFORM;\\n    address public POOL;\\n    address public TOMI;\\n    address public WETH;\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n    mapping(address => bool) public isPair;\\n    mapping(address => address[]) public playerPairs;\\n    mapping(address => mapping(address => bool)) public isAddPlayerPair;\\n\\n    bytes32 public contractCodeHash;\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n    \\n    constructor(address _PLATFORM, address _POOL, address _TOMI, address _WETH) public {\\n        PLATFORM = _PLATFORM;\\n        POOL = _POOL;\\n        TOMI = _TOMI;\\n        WETH = _WETH;\\n    }\\n    \\n    receive() external payable {\\n    }\\n    \\n    function upgradePlatform(address _PLATFORM) external onlyOwner {\\n        for(uint i = 0; i < allPairs.length;i++) {\\n            ITomiLP(allPairs[i]).upgrade(_PLATFORM);\\n        }\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function getPlayerPairCount(address player) external view returns (uint256) {\\n        return playerPairs[player].length;\\n    }\\n\\n    function _addPlayerPair(address _user, address _pair) internal {\\n        if (isAddPlayerPair[_user][_pair] == false) {\\n            isAddPlayerPair[_user][_pair] = true;\\n            playerPairs[_user].push(_pair);\\n        }\\n    }\\n\\n    function addPlayerPair(address _user) external {\\n        require(isPair[msg.sender], 'addPlayerPair Forbidden');\\n        _addPlayerPair(_user, msg.sender);\\n    }\\n    \\n    function approveContract(address token, address spender, uint amount) internal {\\n        uint allowAmount = IERC20(token).totalSupply();\\n        if(allowAmount < amount) {\\n            allowAmount = amount;\\n        }\\n        if(IERC20(token).allowance(address(this), spender) < amount) {\\n            TransferHelper.safeApprove(token, spender, allowAmount);\\n        }\\n    }\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline\\n        ) payable external returns (\\n            uint256 _amountToken,\\n            uint256 _amountETH,\\n            uint256 _liquidity\\n        ) {\\n        address pair = getPair[token][WETH];\\n            if(pair == address(0)) {\\n                pair = _createPair(token, WETH);\\n            }\\n            \\n            _addPlayerPair(msg.sender, pair);\\n\\n            TransferHelper.safeTransferFrom(token, msg.sender, address(this), amountTokenDesired);\\n            approveContract(token, pair, amountTokenDesired);\\n            (_amountToken, _amountETH, _liquidity) = ITomiLP(pair).addLiquidityETH{value: msg.value}(msg.sender, amountTokenDesired, amountTokenMin, amountETHMin, deadline);\\n    }\\n    \\n    \\n    \\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB,\\n            uint256 _liquidity\\n        ) {\\n            address pair = getPair[tokenA][tokenB];\\n            if(pair == address(0)) {\\n                pair = _createPair(tokenA, tokenB);\\n            }\\n\\n            _addPlayerPair(msg.sender, pair);\\n\\n            if(tokenA != ITomiLP(pair).tokenA()) {\\n                (tokenA, tokenB) = (tokenB, tokenA);\\n                (amountA, amountB, amountAMin, amountBMin) = (amountB, amountA, amountBMin, amountAMin);\\n            }\\n            \\n            TransferHelper.safeTransferFrom(tokenA, msg.sender, address(this), amountA);\\n            TransferHelper.safeTransferFrom(tokenB, msg.sender, address(this), amountB);\\n            approveContract(tokenA, pair, amountA);\\n            approveContract(tokenB, pair, amountB);\\n\\n            (_amountA, _amountB, _liquidity) = ITomiLP(pair).addLiquidity(msg.sender, amountA, amountB, amountAMin, amountBMin, deadline);\\n            if(tokenA != ITomiLP(pair).tokenA()) {\\n                (_amountA, _amountB) = (_amountB, _amountA);\\n            }\\n    }\\n    \\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        uint deadline\\n        ) external returns (uint _amountToken, uint _amountETH) {\\n            address pair = getPair[token][WETH];\\n            (_amountToken, _amountETH) = ITomiLP(pair).removeLiquidityETH(msg.sender, liquidity, amountTokenMin, amountETHMin, deadline);\\n        }\\n    \\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB\\n        ) {\\n        address pair = getPair[tokenA][tokenB];\\n        (_amountA, _amountB) = ITomiLP(pair).removeLiquidity(msg.sender, liquidity, amountAMin, amountBMin, deadline);\\n    }\\n\\n    function _createPair(address tokenA, address tokenB) internal returns (address pair){\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'TOMI FACTORY: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'TOMI FACTORY: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(TomiLP).creationCode;\\n        if (uint256(contractCodeHash) == 0) {\\n            contractCodeHash = keccak256(bytecode);\\n        }\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        isPair[pair] = true;\\n        ITomiLP(pair).initialize(token0, token1, TOMI, POOL, PLATFORM, WETH);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n}\",\"keccak256\":\"0x2443ae8a964e68730d2b72af7110034f5e5777ed2e159db4ddaca8c577c972e5\"},\"contracts/TomiLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport './libraries/SafeMath.sol';\\nimport './modules/BaseShareField.sol';\\n\\ninterface ITomiPool {\\n    function queryReward(address _pair, address _user) external view returns(uint);\\n    function claimReward(address _pair, address _rewardToken) external;\\n}\\n\\ninterface ITomiPair {\\n    function queryReward() external view returns (uint256 rewardAmount, uint256 blockNumber);\\n    function mintReward() external returns (uint256 userReward);\\n}\\n\\ninterface ITomiDelegate {\\n    function addPlayerPair(address _user) external;\\n}\\n\\ninterface ITomiPlatform{\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 _amountA,\\n            uint256 _amountB,\\n            uint256 _liquidity\\n        );\\n        \\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 _amountToken,\\n            uint256 _amountETH,\\n            uint256 _liquidity\\n        );\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n    \\n    function pairFor(address tokenA, address tokenB) external view returns (address);\\n}\\n\\ncontract TomiLP is BaseShareField {\\n    // ERC20 Start\\n    \\n    using SafeMath for uint;\\n\\n    string public constant name = 'Tomi LP';\\n    string public constant symbol = 'BLP';\\n    uint8 public constant decimals = 18;\\n    uint public totalSupply;\\n    \\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    event Mint(address indexed user, uint amount);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    \\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n    \\n    receive() external payable {\\n    }\\n    \\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        if (to == address(0)) { // burn\\n            totalSupply = totalSupply.sub(value);\\n        }\\n\\n        ITomiDelegate(owner).addPlayerPair(to);\\n        _mintReward();\\n        _decreaseProductivity(from, value);\\n        _increaseProductivity(to, value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        _transfer(from, to, value);\\n        return true;\\n    }    \\n    \\n    // ERC20 End\\n    \\n    \\n    address public owner;\\n    address public POOL;\\n    address public PLATFORM;\\n    address public tokenA;\\n    address public tokenB;\\n    address public WETH;\\n    \\n    event AddLiquidity (address indexed user, uint amountA, uint amountB, uint value);\\n    event RemoveLiquidity (address indexed user, uint amountA, uint amountB, uint value);\\n    \\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n    \\n    function initialize(address _tokenA, address _tokenB, address _TOMI, address _POOL, address _PLATFORM, address _WETH) external {\\n        require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n        tokenA = _tokenA;\\n        tokenB = _tokenB;\\n        _setShareToken(_TOMI);\\n        PLATFORM = _PLATFORM;\\n        POOL = _POOL;\\n        WETH = _WETH;\\n    }\\n \\n    function upgrade(address _PLATFORM) external {\\n        require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n        PLATFORM = _PLATFORM;\\n    }\\n\\n    function approveContract(address token, address spender, uint amount) internal {\\n        uint allowAmount = IERC20(token).totalSupply();\\n        if(allowAmount < amount) {\\n            allowAmount = amount;\\n        }\\n        if(IERC20(token).allowance(address(this), spender) < amount) {\\n            TransferHelper.safeApprove(token, spender, allowAmount);\\n        }\\n    }\\n    \\n    function addLiquidityETH(\\n        address user,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline) external payable returns (\\n            uint256 _amountToken,\\n            uint256 _amountETH,\\n            uint256 _liquidity\\n        ) {\\n           require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n           require(tokenA == WETH || tokenB == WETH, \\\"INVALID CALL\\\");\\n           address token = tokenA == WETH ? tokenB: tokenA;\\n           approveContract(token, PLATFORM, amountTokenDesired);\\n           TransferHelper.safeTransferFrom(token, msg.sender, address(this), amountTokenDesired);\\n           \\n           (_amountToken, _amountETH, _liquidity) = ITomiPlatform(PLATFORM).addLiquidityETH{value: msg.value}(token, amountTokenDesired, amountTokenMin, amountETHMin, deadline);\\n           \\n           if(amountTokenDesired > _amountToken) {\\n                TransferHelper.safeTransfer(token, user, amountTokenDesired.sub(_amountToken));\\n            }\\n            \\n            if(msg.value > _amountETH) {\\n                TransferHelper.safeTransferETH(user, msg.value.sub(_amountETH));\\n            }\\n        _mintReward();\\n        _mint(user, _liquidity);\\n        _increaseProductivity(user, _liquidity);\\n        (uint amountA, uint amountB) = token == tokenA ? (_amountToken, _amountETH): (_amountETH, _amountToken);\\n        emit AddLiquidity (user, amountA, amountB, _liquidity);\\n    }\\n    \\n    function addLiquidity(\\n        address user,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB,\\n            uint256 _liquidity\\n        ) {\\n            require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n            approveContract(tokenA, PLATFORM, amountA);\\n            approveContract(tokenB, PLATFORM, amountB);\\n            TransferHelper.safeTransferFrom(tokenA, msg.sender, address(this), amountA);\\n            TransferHelper.safeTransferFrom(tokenB, msg.sender, address(this), amountB);\\n        (_amountA, _amountB, _liquidity) = ITomiPlatform(PLATFORM).addLiquidity(tokenA, tokenB, amountA, amountB, amountAMin, amountBMin, deadline);\\n        if(amountA > _amountA) {\\n            TransferHelper.safeTransfer(tokenA, user, amountA.sub(_amountA));\\n        }\\n        \\n        if(amountB > _amountB) {\\n            TransferHelper.safeTransfer(tokenB, user, amountB.sub(_amountB));\\n        }\\n        \\n        _mintReward();\\n        _mint(user, _liquidity);\\n        _increaseProductivity(user, _liquidity);\\n        emit AddLiquidity (user, _amountA, _amountB, _liquidity);\\n    }\\n    \\n    function removeLiquidityETH (\\n        address user,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline) external returns (uint256 _amountToken, uint256 _amountETH) {\\n         require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n         require(tokenA == WETH || tokenB == WETH, \\\"INVALID CALL\\\");\\n         address token = tokenA == WETH ? tokenB: tokenA;\\n           \\n        (_amountToken, _amountETH) = ITomiPlatform(PLATFORM).removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, user, deadline);\\n         \\n        _mintReward();\\n        _burn(user, liquidity);\\n        _decreaseProductivity(user, liquidity);\\n        (uint amountA, uint amountB) = token == tokenA ? (_amountToken, _amountETH): (_amountETH, _amountToken);\\n        emit RemoveLiquidity (user, amountA, amountB, liquidity);\\n    }\\n    \\n    function removeLiquidity(\\n        address user,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline) external returns (\\n            uint256 _amountA,\\n            uint256 _amountB\\n        ) {\\n            require(msg.sender == owner, \\\"Tomi LP Forbidden\\\");\\n        (_amountA, _amountB) = ITomiPlatform(PLATFORM).removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, user, deadline);\\n        \\n        _mintReward();\\n        _burn(user, liquidity);\\n        _decreaseProductivity(user, liquidity);\\n        emit RemoveLiquidity (user, _amountA, _amountB, liquidity);\\n    }\\n    \\n    function _currentReward() internal override view returns (uint) {\\n        address pair = ITomiPlatform(PLATFORM).pairFor(tokenA, tokenB);\\n        uint countractAmount = mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\\n        if(pair != address(0)) {\\n            uint poolAmount = ITomiPool(POOL).queryReward(pair, address(this));\\n            // (uint pairAmount, ) = ITomiPair(pair).queryReward();\\n            // return countractAmount.add(poolAmount).add(pairAmount);\\n            return countractAmount.add(poolAmount);\\n        } else {\\n            return countractAmount;\\n        }\\n    }\\n    \\n    function _mintReward() internal {\\n        address pair = ITomiPlatform(PLATFORM).pairFor(tokenA, tokenB);\\n        if(pair != address(0)) {\\n            uint poolAmount = ITomiPool(POOL).queryReward(pair, address(this));\\n            // (uint pairAmount, ) = ITomiPair(pair).queryReward();\\n            if(poolAmount > 0) {\\n                ITomiPool(POOL).claimReward(pair, shareToken);\\n            }\\n            \\n            // if(pairAmount > 0) {\\n            //     ITomiPair(pair).mintReward();\\n            // }\\n        } \\n    }\\n    \\n    function queryReward() external view returns (uint) {\\n        return _takeWithAddress(msg.sender);\\n    }\\n    \\n    function mintReward() external returns (uint amount) {\\n        _mintReward();\\n        amount = _mint(msg.sender);\\n        emit Mint(msg.sender, amount);\\n    }\\n}\",\"keccak256\":\"0xb2f0e0e11e314c2c53435c2b0d420f11c30d0278fc3d8aaf66be7e2287178ebb\"},\"contracts/interfaces/ERC2917-Interface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\nimport '../interfaces/IERC20.sol';\\n\\ninterface IERC2917 is IERC20 {\\n\\n    /// @dev This emit when interests amount per block is changed by the owner of the contract.\\n    /// It emits with the old interests amount and the new interests amount.\\n    event InterestRatePerBlockChanged (uint oldValue, uint newValue);\\n\\n    /// @dev This emit when a users' productivity has changed\\n    /// It emits with the user's address and the the value after the change.\\n    event ProductivityIncreased (address indexed user, uint value);\\n\\n    /// @dev This emit when a users' productivity has changed\\n    /// It emits with the user's address and the the value after the change.\\n    event ProductivityDecreased (address indexed user, uint value);\\n\\n    /// @dev Return the current contract's interests rate per block.\\n    /// @return The amount of interests currently producing per each block.\\n    function interestsPerBlock() external view returns (uint);\\n\\n    /// @notice Change the current contract's interests rate.\\n    /// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\\n    /// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestRatePerBlockChanged event.\\n    function changeInterestRatePerBlock(uint value) external returns (bool);\\n\\n    /// @notice It will get the productivity of given user.\\n    /// @dev it will return 0 if user has no productivity proved in the contract.\\n    /// @return user's productivity and overall productivity.\\n    function getProductivity(address user) external view returns (uint, uint);\\n\\n    /// @notice increase a user's productivity.\\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\\n    /// @return true to confirm that the productivity added success.\\n    function increaseProductivity(address user, uint value) external returns (bool);\\n\\n    /// @notice decrease a user's productivity.\\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\\n    /// @return true to confirm that the productivity removed success.\\n    function decreaseProductivity(address user, uint value) external returns (bool);\\n\\n    /// @notice take() will return the interests that callee will get at current block height.\\n    /// @dev it will always calculated by block.number, so it will change when block height changes.\\n    /// @return amount of the interests that user are able to mint() at current block height.\\n    function take() external view returns (uint);\\n\\n    /// @notice similar to take(), but with the block height joined to calculate return.\\n    /// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\\n    /// @return amount of interests and the block height.\\n    function takeWithBlock() external view returns (uint, uint);\\n\\n    /// @notice mint the avaiable interests to callee.\\n    /// @dev once it mint, the amount of interests will transfer to callee's address.\\n    /// @return the amount of interests minted.\\n    function mint() external returns (uint);\\n}\\n\",\"keccak256\":\"0x7e14c440b54d2697e53cf60e0abb0e5d8548e5e167e6e02aa0c84a1a8268b0f6\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\",\"keccak256\":\"0x6e5335393e260d808f34e7e3dfd6177004185a9ad70e5a63a0c49844bba42b87\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0xc8945d481ee64b22f7619e467ee2563c3f4c83079cce98cea6aa86b18b9223cb\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x66eeb857a4e1b189ee4fa48fd976ce16cc510d29eab7e0671cbc47b81fee7654\"},\"contracts/modules/BaseShareField.sol\":{\"content\":\"pragma solidity >=0.6.6;\\nimport '../interfaces/ERC2917-Interface.sol';\\nimport '../libraries/SafeMath.sol';\\nimport '../libraries/TransferHelper.sol';\\n\\ncontract BaseShareField {\\n    using SafeMath for uint;\\n    \\n    uint totalProductivity;\\n    uint accAmountPerShare;\\n    \\n    uint public totalShare;\\n    uint public mintedShare;\\n    uint public mintCumulation;\\n    \\n    address public shareToken;\\n    \\n    struct UserInfo {\\n        uint amount;     // How many tokens the user has provided.\\n        uint rewardDebt; // Reward debt. \\n        uint rewardEarn; // Reward earn and not minted\\n    }\\n\\n    mapping(address => UserInfo) public users;\\n    \\n    function _setShareToken(address _shareToken) internal {\\n        shareToken = _shareToken;\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _update() internal virtual {\\n        if (totalProductivity == 0) {\\n            totalShare = totalShare.add(_currentReward());\\n            return;\\n        }\\n        \\n        uint256 reward = _currentReward();\\n        accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\\n        totalShare = totalShare.add(reward);\\n    }\\n    \\n    function _currentReward() internal virtual view returns (uint) {\\n        return mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\\n    }\\n    \\n    // Audit user's reward to be up-to-date\\n    function _audit(address user) internal virtual {\\n        UserInfo storage userInfo = users[user];\\n        if (userInfo.amount > 0) {\\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\\n            mintCumulation = mintCumulation.add(pending);\\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        }\\n    }\\n\\n    // External function call\\n    // This function increase user's productivity and updates the global productivity.\\n    // the users' actual share percentage will calculated by:\\n    // Formula:     user_productivity / global_productivity\\n    function _increaseProductivity(address user, uint value) internal virtual returns (bool) {\\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\\n\\n        UserInfo storage userInfo = users[user];\\n        _update();\\n        _audit(user);\\n\\n        totalProductivity = totalProductivity.add(value);\\n\\n        userInfo.amount = userInfo.amount.add(value);\\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        return true;\\n    }\\n\\n    // External function call \\n    // This function will decreases user's productivity by value, and updates the global productivity\\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\\n    function _decreaseProductivity(address user, uint value) internal virtual returns (bool) {\\n        UserInfo storage userInfo = users[user];\\n        require(value > 0 && userInfo.amount >= value, 'INSUFFICIENT_PRODUCTIVITY');\\n        \\n        _update();\\n        _audit(user);\\n        \\n        userInfo.amount = userInfo.amount.sub(value);\\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        totalProductivity = totalProductivity.sub(value);\\n        \\n        return true;\\n    }\\n    \\n    function _takeWithAddress(address user) internal view returns (uint) {\\n        UserInfo storage userInfo = users[user];\\n        uint _accAmountPerShare = accAmountPerShare;\\n        // uint256 lpSupply = totalProductivity;\\n        if (totalProductivity != 0) {\\n            uint reward = _currentReward();\\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\\n        }\\n        return userInfo.amount.mul(_accAmountPerShare).div(1e12).add(userInfo.rewardEarn).sub(userInfo.rewardDebt);\\n    }\\n\\n    // External function call\\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\\n    // Also it calculates global token supply from last time the user mint to this time.\\n    function _mint(address user) internal virtual returns (uint) {\\n        _update();\\n        _audit(user);\\n        require(users[user].rewardEarn > 0, \\\"NOTHING TO MINT\\\");\\n        uint amount = users[user].rewardEarn;\\n        TransferHelper.safeTransfer(shareToken, msg.sender, amount);\\n        users[user].rewardEarn = 0;\\n        mintedShare += amount;\\n        return amount;\\n    }\\n\\n    // Returns how many productivity a user has and global has.\\n    function getProductivity(address user) public virtual view returns (uint, uint) {\\n        return (users[user].amount, totalProductivity);\\n    }\\n\\n    // Returns the current gorss product rate.\\n    function interestsPerBlock() public virtual view returns (uint) {\\n        return accAmountPerShare;\\n    }\\n    \\n}\",\"keccak256\":\"0xb65eb225b2090ca7066b6e43637385352f1c2aa05149362a4ab71514ea4ef6c8\"},\"contracts/modules/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\\n        _;\\n    }\\n\\n    function changeOwner(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\\n        emit OwnerChanged(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n\\n}\",\"keccak256\":\"0xa20172f0e84dc77ca8c1724023e289a71e7c30fdd3c8d0649204657f87444a95\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161425c38038061425c8339818101604052608081101561003357600080fd5b50805160208201516040830151606090930151600080546001600160a01b03199081163317909155600180546001600160a01b0395861690831617905560028054938516938216939093179092556003805494841694831694909417909355600480549290931691161790556141ae806100ae6000396000f3fe6080604052600436106101635760003560e01c80638da5cb5b116100c0578063bf1512d311610074578063e5e31b1311610059578063e5e31b13146104e2578063e6a4390514610515578063f6f1e306146105505761016a565b8063bf1512d314610494578063c1dfe652146104cd5761016a565b8063a6f9dae1116100a5578063a6f9dae114610419578063a93518be1461044c578063ad5c46481461047f5761016a565b80638da5cb5b146103b9578063a2ad989f146103ce5761016a565b80637535d246116101175780637c7f84ee116100fc5780637c7f84ee146103405780637efc77fa1461035557806388080d4b1461036a5761016a565b80637535d246146102b25780637ae06e58146102c75761016a565b8063574f2ba311610148578063574f2ba3146102235780636319d8bc1461024a5780636c42fa661461027f5761016a565b80631e3dd18b1461016f57806344483d53146101b55761016a565b3661016a57005b600080fd5b34801561017b57600080fd5b506101996004803603602081101561019257600080fd5b503561058e565b604080516001600160a01b039092168252519081900360200190f35b3480156101c157600080fd5b5061020a600480360360c08110156101d857600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a001356105b5565b6040805192835260208301919091528051918290030190f35b34801561022f57600080fd5b50610238610695565b60408051918252519081900360200190f35b34801561025657600080fd5b5061027d6004803603602081101561026d57600080fd5b50356001600160a01b031661069b565b005b34801561028b57600080fd5b50610238600480360360208110156102a257600080fd5b50356001600160a01b031661070c565b3480156102be57600080fd5b50610199610727565b3480156102d357600080fd5b50610322600480360360e08110156102ea57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060c00135610736565b60408051938452602084019290925282820152519081900360600190f35b34801561034c57600080fd5b5061023861099b565b34801561036157600080fd5b506101996109a1565b34801561037657600080fd5b506103a56004803603604081101561038d57600080fd5b506001600160a01b03813581169160200135166109b0565b604080519115158252519081900360200190f35b3480156103c557600080fd5b506101996109d0565b3480156103da57600080fd5b5061020a600480360360a08110156103f157600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001356109df565b34801561042557600080fd5b5061027d6004803603602081101561043c57600080fd5b50356001600160a01b0316610ac0565b34801561045857600080fd5b5061027d6004803603602081101561046f57600080fd5b50356001600160a01b0316610be2565b34801561048b57600080fd5b50610199610cee565b3480156104a057600080fd5b50610199600480360360408110156104b757600080fd5b506001600160a01b038135169060200135610cfd565b3480156104d957600080fd5b50610199610d32565b3480156104ee57600080fd5b506103a56004803603602081101561050557600080fd5b50356001600160a01b0316610d41565b34801561052157600080fd5b506101996004803603604081101561053857600080fd5b506001600160a01b0381358116916020013516610d56565b610322600480360360a081101561056657600080fd5b506001600160a01b038135169060208101359060408101359060608101359060800135610d7c565b6006818154811061059b57fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03808716600090815260056020908152604080832089851684529091528082205481517f1392808200000000000000000000000000000000000000000000000000000000815233600482015260248101899052604481018890526064810187905260848101869052825193948594921692839263139280829260a480820193929182900301818887803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b505050506040513d604081101561067c57600080fd5b508051602090910151909a909950975050505050505050565b60065490565b3360009081526007602052604090205460ff166106ff576040805162461bcd60e51b815260206004820152601760248201527f616464506c617965725061697220466f7262696464656e000000000000000000604482015290519081900360640190fd5b6107098133610eb5565b50565b6001600160a01b031660009081526008602052604090205490565b6002546001600160a01b031681565b6001600160a01b0380881660009081526005602090815260408083208a851684529091528120549091829182911680610776576107738b8b610f4f565b90505b6107803382610eb5565b806001600160a01b0316630fc63d106040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b505050506040513d60208110156107e557600080fd5b50516001600160a01b038c8116911614610803579899989697969495945b61080f8b33308c61129c565b61081b8a33308b61129c565b6108268b828b611427565b6108318a828a611427565b604080517f2563e426000000000000000000000000000000000000000000000000000000008152336004820152602481018b9052604481018a9052606481018990526084810188905260a4810187905290516001600160a01b03831691632563e4269160c48083019260609291908290030181600087803b1580156108b557600080fd5b505af11580156108c9573d6000803e3d6000fd5b505050506040513d60608110156108df57600080fd5b50805160208083015160409384015184517f0fc63d10000000000000000000000000000000000000000000000000000000008152945193985090965094506001600160a01b03841692630fc63d1092600480830193928290030181600087803b15801561094b57600080fd5b505af115801561095f573d6000803e3d6000fd5b505050506040513d602081101561097557600080fd5b50516001600160a01b038c811691161461098d579192915b509750975097945050505050565b600a5481565b6001546001600160a01b031681565b600960209081526000928352604080842090915290825290205460ff1681565b6000546001600160a01b031681565b6001600160a01b038086166000908152600560209081526040808320600480548616855292528083205481517fa2ad989f000000000000000000000000000000000000000000000000000000008152339381019390935260248301899052604483018890526064830187905260848301869052815193948594911692839263a2ad989f9260a48084019382900301818887803b158015610a7e57600080fd5b505af1158015610a92573d6000803e3d6000fd5b505050506040513d6040811015610aa857600080fd5b50805160209091015190999098509650505050505050565b6000546001600160a01b03163314610b1f576040805162461bcd60e51b815260206004820152601260248201527f4f776e61626c653a20464f5242494444454e0000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116610b7a576040805162461bcd60e51b815260206004820152601860248201527f4f776e61626c653a20494e56414c49445f414444524553530000000000000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610c41576040805162461bcd60e51b815260206004820152601260248201527f4f776e61626c653a20464f5242494444454e0000000000000000000000000000604482015290519081900360640190fd5b60005b600654811015610cea5760068181548110610c5b57fe5b6000918252602082200154604080517f0900f0100000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015291519190921692630900f010926024808201939182900301818387803b158015610cc657600080fd5b505af1158015610cda573d6000803e3d6000fd5b505060019092019150610c449050565b5050565b6004546001600160a01b031681565b60086020528160005260406000208181548110610d1657fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b60076020526000908152604090205460ff1681565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6001600160a01b038086166000908152600560209081526040808320600454851684529091528120549091829182911680610dcb57600454610dc8908a906001600160a01b0316610f4f565b90505b610dd53382610eb5565b610de18933308b61129c565b610dec89828a611427565b604080517ff6f1e306000000000000000000000000000000000000000000000000000000008152336004820152602481018a905260448101899052606481018890526084810187905290516001600160a01b0383169163f6f1e30691349160a48082019260609290919082900301818588803b158015610e6b57600080fd5b505af1158015610e7f573d6000803e3d6000fd5b50505050506040513d6060811015610e9657600080fd5b5080516020820151604090920151909b919a5098509650505050505050565b6001600160a01b0380831660009081526009602090815260408083209385168352929052205460ff16610cea576001600160a01b038083166000818152600960209081526040808320948616808452948252808320805460ff19166001908117909155938352600882528220805493840181558252902001805473ffffffffffffffffffffffffffffffffffffffff191690911790555050565b6000806000836001600160a01b0316856001600160a01b031610610f74578385610f77565b84845b90925090506001600160a01b038216610fd7576040805162461bcd60e51b815260206004820152601a60248201527f544f4d4920464143544f52593a205a45524f5f41444452455353000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260056020908152604080832085851684529091529020541615611051576040805162461bcd60e51b815260206004820152601960248201527f544f4d4920464143544f52593a20504149525f45584953545300000000000000604482015290519081900360640190fd5b606060405180602001611063906116df565b601f1982820381018352601f90910116604052600a5490915061108b5780516020820120600a555b6000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56001600160a01b03808216600081815260076020526040808220805460ff1916600190811790915560035460025491546004805485517fcc2a9a5b0000000000000000000000000000000000000000000000000000000081528e8a16928101929092528c89166024830152928816604482015292871660648401528616608483015290941660a485015251939850909263cc2a9a5b9260c480820193929182900301818387803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526005602081815260408084208987168086529083528185208054978d1673ffffffffffffffffffffffffffffffffffffffff1998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061134f5780518252601f199092019160209182019101611330565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146113b1576040519150601f19603f3d011682016040523d82523d6000602084013e6113b6565b606091505b50915091508180156113e45750805115806113e457508080602001905160208110156113e157600080fd5b50515b61141f5760405162461bcd60e51b81526004018080602001828103825260248152602001806141556024913960400191505060405180910390fd5b505050505050565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561146257600080fd5b505afa158015611476573d6000803e3d6000fd5b505050506040513d602081101561148c57600080fd5b505190508181101561149b5750805b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0385811660248301529151849287169163dd62ed3e916044808301926020929190829003018186803b15801561150457600080fd5b505afa158015611518573d6000803e3d6000fd5b505050506040513d602081101561152e57600080fd5b5051101561154157611541848483611547565b50505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106115f25780518252601f1990920191602091820191016115d3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611654576040519150601f19603f3d011682016040523d82523d6000602084013e611659565b606091505b5091509150818015611687575080511580611687575080806020019051602081101561168457600080fd5b50515b6116d8576040805162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c45440000604482015290519081900360640190fd5b5050505050565b612a68806116ed8339019056fe608060405234801561001057600080fd5b50600a80546001600160a01b03191633179055612a36806100326000396000f3fe6080604052600436106101d15760003560e01c806370a08231116100f7578063a9059cbb11610095578063cf67536511610064578063cf675365146106e1578063d14c9641146106f6578063dd62ed3e1461070b578063f6f1e30614610746576101d8565b8063a9059cbb14610623578063ad5c46481461065c578063bfc8b20814610671578063cc2a9a5b14610686576101d8565b80638da5cb5b116100d15780638da5cb5b1461057b57806395d89b4114610590578063a2ad989f146105a5578063a87430ba146105f0576101d8565b806370a082311461051e5780637535d246146105515780637efc77fa14610566576101d8565b806318160ddd1161016f5780632c79db111161013e5780632c79db11146104b4578063313ce567146104c95780635f64b55b146104f45780636c9fa59e14610509576101d8565b806318160ddd146103ba57806323b872dd146103cf5780632563e4261461041257806328e964e914610481576101d8565b8063095ea7b3116101ab578063095ea7b3146102c35780630fc63d10146103105780631392808214610341578063174f57af146103a5576101d8565b8063026c4207146101dd57806306fdde03146102045780630900f0101461028e576101d8565b366101d857005b600080fd5b3480156101e957600080fd5b506101f2610784565b60408051918252519081900360200190f35b34801561021057600080fd5b5061021961078a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025357818101518382015260200161023b565b50505050905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029a57600080fd5b506102c1600480360360208110156102b157600080fd5b50356001600160a01b03166107c3565b005b3480156102cf57600080fd5b506102fc600480360360408110156102e657600080fd5b506001600160a01b038135169060200135610845565b604080519115158252519081900360200190f35b34801561031c57600080fd5b506103256108ac565b604080516001600160a01b039092168252519081900360200190f35b34801561034d57600080fd5b5061038c600480360360a081101561036457600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001356108bb565b6040805192835260208301919091528051918290030190f35b3480156103b157600080fd5b506101f2610a53565b3480156103c657600080fd5b506101f2610aa1565b3480156103db57600080fd5b506102fc600480360360608110156103f257600080fd5b506001600160a01b03813581169160208101359091169060400135610aa7565b34801561041e57600080fd5b50610463600480360360c081101561043557600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a00135610b76565b60408051938452602084019290925282820152519081900360600190f35b34801561048d57600080fd5b5061038c600480360360208110156104a457600080fd5b50356001600160a01b0316610dde565b3480156104c057600080fd5b506101f2610dfc565b3480156104d557600080fd5b506104de610e0d565b6040805160ff9092168252519081900360200190f35b34801561050057600080fd5b50610325610e12565b34801561051557600080fd5b50610325610e21565b34801561052a57600080fd5b506101f26004803603602081101561054157600080fd5b50356001600160a01b0316610e30565b34801561055d57600080fd5b50610325610e42565b34801561057257600080fd5b50610325610e51565b34801561058757600080fd5b50610325610e60565b34801561059c57600080fd5b50610219610e6f565b3480156105b157600080fd5b5061038c600480360360a08110156105c857600080fd5b506001600160a01b038135169060208101359060408101359060608101359060800135610ea8565b3480156105fc57600080fd5b506104636004803603602081101561061357600080fd5b50356001600160a01b031661110a565b34801561062f57600080fd5b506102fc6004803603604081101561064657600080fd5b506001600160a01b03813516906020013561112b565b34801561066857600080fd5b50610325611141565b34801561067d57600080fd5b506101f2611150565b34801561069257600080fd5b506102c1600480360360c08110156106a957600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a0013516611156565b3480156106ed57600080fd5b506101f261123c565b34801561070257600080fd5b506101f2611242565b34801561071757600080fd5b506101f26004803603604081101561072e57600080fd5b506001600160a01b0381358116916020013516611248565b610463600480360360a081101561075c57600080fd5b506001600160a01b038135169060208101359060408101359060608101359060800135611265565b60025481565b6040518060400160405280600781526020017f546f6d69204c500000000000000000000000000000000000000000000000000081525081565b600a546001600160a01b03163314610816576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360008181526009602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600d546001600160a01b031681565b600a5460009081906001600160a01b03163314610913576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600c54600d54600e54604080517fbaa2abde0000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152604482018a905260648201899052608482018890528a831660a483015260c482018790528051929093169263baa2abde9260e4808401938290030181600087803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b505050506040513d60408110156109d257600080fd5b50805160209091015190925090506109e8611533565b6109f287876116e9565b6109fc8787611786565b50604080518381526020810183905280820188905290516001600160a01b038916917f59c3a0b60c6ab7deb62e1440c9e72441db6db7dfe514dba8cb18e60c0d896efa919081900360600190a29550959350505050565b6000610a5d611533565b610a6633611874565b60408051828152905191925033917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859181900360200190a290565b60075481565b6001600160a01b0383166000908152600960209081526040808320338452909152812054821115610b095760405162461bcd60e51b815260040180806020018281038252602281526020018061294b6022913960400191505060405180910390fd5b6001600160a01b0384166000908152600960209081526040808320338452909152902054610b3d908363ffffffff61194c16565b6001600160a01b0385166000908152600960209081526040808320338452909152902055610b6c848484611995565b5060019392505050565b600a54600090819081906001600160a01b03163314610bd0576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600d54600c54610bed916001600160a01b0390811691168a611b84565b600e54600c54610c0a916001600160a01b03908116911689611b84565b600d54610c22906001600160a01b031633308b611ca4565b600e54610c3a906001600160a01b031633308a611ca4565b600c54600d54600e54604080517f7ae06e580000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152604482018c9052606482018b9052608482018a905260a4820189905260c48201889052519190921691637ae06e589160e48083019260609291908290030181600087803b158015610cd257600080fd5b505af1158015610ce6573d6000803e3d6000fd5b505050506040513d6060811015610cfc57600080fd5b5080516020820151604090920151909450909250905082881115610d4057600d54610d40906001600160a01b03168a610d3b8b8763ffffffff61194c16565b611e12565b81871115610d6957600e54610d69906001600160a01b03168a610d3b8a8663ffffffff61194c16565b610d71611533565b610d7b8982611f95565b610d85898261202c565b50604080518481526020810184905280820183905290516001600160a01b038b16917fbeb3885786d637a474cbc287c0a44587231633a077f0bd30354d5a4b18996fce919081900360600190a296509650969350505050565b6001600160a01b031660009081526006602052604081205490549091565b6000610e07336120eb565b90505b90565b601281565b600e546001600160a01b031681565b6005546001600160a01b031681565b60086020526000908152604090205481565b600b546001600160a01b031681565b600c546001600160a01b031681565b600a546001600160a01b031681565b6040518060400160405280600381526020017f424c50000000000000000000000000000000000000000000000000000000000081525081565b600a5460009081906001600160a01b03163314610f00576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600f54600d546001600160a01b0390811691161480610f2f5750600f54600e546001600160a01b039081169116145b610f6f576040805162461bcd60e51b815260206004820152600c60248201526b125395905312510810d0531360a21b604482015290519081900360640190fd5b600f54600d546000916001600160a01b03918216911614610f9b57600d546001600160a01b0316610fa8565b600e546001600160a01b03165b600c54604080517f02751cec0000000000000000000000000000000000000000000000000000000081526001600160a01b038085166004830152602482018c9052604482018b9052606482018a90528c8116608483015260a482018990528251949550909216926302751cec9260c48082019392918290030181600087803b15801561103357600080fd5b505af1158015611047573d6000803e3d6000fd5b505050506040513d604081101561105d57600080fd5b5080516020909101519093509150611073611533565b61107d88886116e9565b6110878888611786565b50600d5460009081906001600160a01b038481169116146110a95783856110ac565b84845b60408051838152602081018390528082018d905290519294509092506001600160a01b038c16917f59c3a0b60c6ab7deb62e1440c9e72441db6db7dfe514dba8cb18e60c0d896efa9181900360600190a25050509550959350505050565b60066020526000908152604090208054600182015460029092015490919083565b6000611138338484611995565b50600192915050565b600f546001600160a01b031681565b60015490565b600a546001600160a01b031633146111a9576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600d80546001600160a01b0380891673ffffffffffffffffffffffffffffffffffffffff1992831617909255600e8054928816929091169190911790556111ef8461219b565b600c805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0394851617909155600b8054821694841694909417909355600f80549093169116179055505050565b60045481565b60035481565b600960209081526000928352604080842090915290825290205481565b600a54600090819081906001600160a01b031633146112bf576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600f54600d546001600160a01b03908116911614806112ee5750600f54600e546001600160a01b039081169116145b61132e576040805162461bcd60e51b815260206004820152600c60248201526b125395905312510810d0531360a21b604482015290519081900360640190fd5b600f54600d546000916001600160a01b0391821691161461135a57600d546001600160a01b0316611367565b600e546001600160a01b03165b600c549091506113829082906001600160a01b03168a611b84565b61138e8133308b611ca4565b600c54604080517ff6f1e3060000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018c9052604482018b9052606482018a9052608482018990529151919092169163f6f1e30691349160a48082019260609290919082900301818588803b15801561141457600080fd5b505af1158015611428573d6000803e3d6000fd5b50505050506040513d606081101561143f57600080fd5b508051602082015160409092015190955090935091508388111561147257611472818a610d3b8b8863ffffffff61194c16565b82341115611493576114938961148e348663ffffffff61194c16565b6121ca565b61149b611533565b6114a58983611f95565b6114af898361202c565b50600d5460009081906001600160a01b038481169116146114d15784866114d4565b85855b604080518381526020810183905280820188905290519294509092506001600160a01b038d16917fbeb3885786d637a474cbc287c0a44587231633a077f0bd30354d5a4b18996fce9181900360600190a2505050955095509592505050565b600c54600d54600e54604080516396ed28f960e01b81526001600160a01b03938416600482015291831660248301525160009392909216916396ed28f991604480820192602092909190829003018186803b15801561159157600080fd5b505afa1580156115a5573d6000803e3d6000fd5b505050506040513d60208110156115bb57600080fd5b505190506001600160a01b038116156116e657600b54604080516305ea697560e31b81526001600160a01b03848116600483015230602483015291516000939290921691632f534ba891604480820192602092909190829003018186803b15801561162557600080fd5b505afa158015611639573d6000803e3d6000fd5b505050506040513d602081101561164f57600080fd5b5051905080156116e457600b54600554604080517f4953c7820000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152928316602482015290519190921691634953c78291604480830192600092919082900301818387803b1580156116cb57600080fd5b505af11580156116df573d6000803e3d6000fd5b505050505b505b50565b6001600160a01b038216600090815260086020526040902054611712908263ffffffff61194c16565b6001600160a01b03831660009081526008602052604090205560075461173e908263ffffffff61194c16565b6007556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216600090815260066020526040812082158015906117ae575080548311155b6117ff576040805162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f50524f44554354495649545900000000000000604482015290519081900360640190fd5b6118076122c2565b61181084612344565b8054611822908463ffffffff61194c16565b80825560015461184f9164e8d4a5100091611843919063ffffffff6123eb16565b9063ffffffff61244416565b6001820155600054611867908463ffffffff61194c16565b6000555060019392505050565b600061187e6122c2565b61188782612344565b6001600160a01b0382166000908152600660205260409020600201546118f4576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5448494e4720544f204d494e540000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03808316600090815260066020526040902060020154600554909161192291163383611e12565b6001600160a01b039290921660009081526006602052604081206002015550600380548201905590565b600061198e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612486565b9392505050565b6001600160a01b038316600090815260086020526040902054811115611a02576040805162461bcd60e51b815260206004820181905260248201527f4552433230546f6b656e3a20494e53554646494349454e545f42414c414e4345604482015290519081900360640190fd5b6001600160a01b038316600090815260086020526040902054611a2b908263ffffffff61194c16565b6001600160a01b038085166000908152600860205260408082209390935590841681522054611a60908263ffffffff61251d16565b6001600160a01b038316600081815260086020526040902091909155611a9757600754611a93908263ffffffff61194c16565b6007555b600a54604080517f6319d8bc0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291519190921691636319d8bc91602480830192600092919082900301818387803b158015611afe57600080fd5b505af1158015611b12573d6000803e3d6000fd5b50505050611b1e611533565b611b288382611786565b50611b33828261202c565b50816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bbf57600080fd5b505afa158015611bd3573d6000803e3d6000fd5b505050506040513d6020811015611be957600080fd5b5051905081811015611bf85750805b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0385811660248301529151849287169163dd62ed3e916044808301926020929190829003018186803b158015611c6157600080fd5b505afa158015611c75573d6000803e3d6000fd5b505050506040513d6020811015611c8b57600080fd5b50511015611c9e57611c9e848483612577565b50505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310611d425780518252601f199092019160209182019101611d23565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611da4576040519150601f19603f3d011682016040523d82523d6000602084013e611da9565b606091505b5091509150818015611dd7575080511580611dd75750808060200190516020811015611dd457600080fd5b50515b6116df5760405162461bcd60e51b81526004018080602001828103825260248152602001806129dd6024913960400191505060405180910390fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b60208310611ea85780518252601f199092019160209182019101611e89565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611f0a576040519150601f19603f3d011682016040523d82523d6000602084013e611f0f565b606091505b5091509150818015611f3d575080511580611f3d5750808060200190516020811015611f3a57600080fd5b50515b611f8e576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b600754611fa8908263ffffffff61251d16565b6007556001600160a01b038216600090815260086020526040902054611fd4908263ffffffff61251d16565b6001600160a01b03831660008181526008602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600080821161206c5760405162461bcd60e51b815260040180806020018281038252602c8152602001806129b1602c913960400191505060405180910390fd5b6001600160a01b038316600090815260066020526040902061208c6122c2565b61209584612344565b6000546120a8908463ffffffff61251d16565b60005580546120bd908463ffffffff61251d16565b8082556001546120de9164e8d4a5100091611843919063ffffffff6123eb16565b6001918201559392505050565b6001600160a01b038116600090815260066020526040812060015482541561214b5760006121176126f3565b905061214761213a60005461184364e8d4a51000856123eb90919063ffffffff16565b839063ffffffff61251d16565b9150505b6121938260010154612187846002015461217b64e8d4a510006118438789600001546123eb90919063ffffffff16565b9063ffffffff61251d16565b9063ffffffff61194c16565b949350505050565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106122165780518252601f1990920191602091820191016121f7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612278576040519150601f19603f3d011682016040523d82523d6000602084013e61227d565b606091505b50509050806122bd5760405162461bcd60e51b815260040180806020018281038252602381526020018061298e6023913960400191505060405180910390fd5b505050565b6000546122eb576122e36122d46126f3565b6002549063ffffffff61251d16565b600255612342565b60006122f56126f3565b905061232761231860005461184364e8d4a51000856123eb90919063ffffffff16565b6001549063ffffffff61251d16565b60015560025461233d908263ffffffff61251d16565b600255505b565b6001600160a01b03811660009081526006602052604090208054156116e457600061238f826001015461218764e8d4a5100061184360015487600001546123eb90919063ffffffff16565b60028301549091506123a7908263ffffffff61251d16565b60028301556004546123bf908263ffffffff61251d16565b60045560015482546123e19164e8d4a51000916118439163ffffffff6123eb16565b6001830155505050565b6000826123fa575060006108a6565b8282028284828161240757fe5b041461198e5760405162461bcd60e51b815260040180806020018281038252602181526020018061296d6021913960400191505060405180910390fd5b600061198e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506128e5565b600081848411156125155760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124da5781810151838201526020016124c2565b50505050905090810190601f1680156125075780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561198e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167f095ea7b300000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061260d5780518252601f1990920191602091820191016125ee565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461266f576040519150601f19603f3d011682016040523d82523d6000602084013e612674565b606091505b50915091508180156126a25750805115806126a2575080806020019051602081101561269f57600080fd5b50515b611f8e576040805162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c45440000604482015290519081900360640190fd5b600c54600d54600e54604080516396ed28f960e01b81526001600160a01b039384166004820152918316602483015251600093849316916396ed28f9916044808301926020929190829003018186803b15801561274f57600080fd5b505afa158015612763573d6000803e3d6000fd5b505050506040513d602081101561277957600080fd5b5051600254600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945060009361282c9392612187926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b1580156127f157600080fd5b505afa158015612805573d6000803e3d6000fd5b505050506040513d602081101561281b57600080fd5b50516003549063ffffffff61251d16565b90506001600160a01b038216156128dc57600b54604080516305ea697560e31b81526001600160a01b03858116600483015230602483015291516000939290921691632f534ba891604480820192602092909190829003018186803b15801561289457600080fd5b505afa1580156128a8573d6000803e3d6000fd5b505050506040513d60208110156128be57600080fd5b505190506128d2828263ffffffff61251d16565b9350505050610e0a565b9150610e0a9050565b600081836129345760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156124da5781810151838201526020016124c2565b50600083858161294057fe5b049594505050505056fe4552433230546f6b656e3a20494e53554646494349454e545f414c4c4f57414e4345536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c454450524f4455435449564954595f56414c55455f4d5553545f42455f475245415445525f5448414e5f5a45524f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a264697066735822122099577898cf516758b63a04419e7d7459f224547a409aa34a58fd706b1ca72caf64736f6c634300060600335472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a26469706673582212204395632fa489eace8ba5ad1d69c94f2fea659d9af783caaeb4f952ddf4655c2f64736f6c63430006060033",
  "deployedBytecode": "0x6080604052600436106101635760003560e01c80638da5cb5b116100c0578063bf1512d311610074578063e5e31b1311610059578063e5e31b13146104e2578063e6a4390514610515578063f6f1e306146105505761016a565b8063bf1512d314610494578063c1dfe652146104cd5761016a565b8063a6f9dae1116100a5578063a6f9dae114610419578063a93518be1461044c578063ad5c46481461047f5761016a565b80638da5cb5b146103b9578063a2ad989f146103ce5761016a565b80637535d246116101175780637c7f84ee116100fc5780637c7f84ee146103405780637efc77fa1461035557806388080d4b1461036a5761016a565b80637535d246146102b25780637ae06e58146102c75761016a565b8063574f2ba311610148578063574f2ba3146102235780636319d8bc1461024a5780636c42fa661461027f5761016a565b80631e3dd18b1461016f57806344483d53146101b55761016a565b3661016a57005b600080fd5b34801561017b57600080fd5b506101996004803603602081101561019257600080fd5b503561058e565b604080516001600160a01b039092168252519081900360200190f35b3480156101c157600080fd5b5061020a600480360360c08110156101d857600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a001356105b5565b6040805192835260208301919091528051918290030190f35b34801561022f57600080fd5b50610238610695565b60408051918252519081900360200190f35b34801561025657600080fd5b5061027d6004803603602081101561026d57600080fd5b50356001600160a01b031661069b565b005b34801561028b57600080fd5b50610238600480360360208110156102a257600080fd5b50356001600160a01b031661070c565b3480156102be57600080fd5b50610199610727565b3480156102d357600080fd5b50610322600480360360e08110156102ea57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060c00135610736565b60408051938452602084019290925282820152519081900360600190f35b34801561034c57600080fd5b5061023861099b565b34801561036157600080fd5b506101996109a1565b34801561037657600080fd5b506103a56004803603604081101561038d57600080fd5b506001600160a01b03813581169160200135166109b0565b604080519115158252519081900360200190f35b3480156103c557600080fd5b506101996109d0565b3480156103da57600080fd5b5061020a600480360360a08110156103f157600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001356109df565b34801561042557600080fd5b5061027d6004803603602081101561043c57600080fd5b50356001600160a01b0316610ac0565b34801561045857600080fd5b5061027d6004803603602081101561046f57600080fd5b50356001600160a01b0316610be2565b34801561048b57600080fd5b50610199610cee565b3480156104a057600080fd5b50610199600480360360408110156104b757600080fd5b506001600160a01b038135169060200135610cfd565b3480156104d957600080fd5b50610199610d32565b3480156104ee57600080fd5b506103a56004803603602081101561050557600080fd5b50356001600160a01b0316610d41565b34801561052157600080fd5b506101996004803603604081101561053857600080fd5b506001600160a01b0381358116916020013516610d56565b610322600480360360a081101561056657600080fd5b506001600160a01b038135169060208101359060408101359060608101359060800135610d7c565b6006818154811061059b57fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03808716600090815260056020908152604080832089851684529091528082205481517f1392808200000000000000000000000000000000000000000000000000000000815233600482015260248101899052604481018890526064810187905260848101869052825193948594921692839263139280829260a480820193929182900301818887803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b505050506040513d604081101561067c57600080fd5b508051602090910151909a909950975050505050505050565b60065490565b3360009081526007602052604090205460ff166106ff576040805162461bcd60e51b815260206004820152601760248201527f616464506c617965725061697220466f7262696464656e000000000000000000604482015290519081900360640190fd5b6107098133610eb5565b50565b6001600160a01b031660009081526008602052604090205490565b6002546001600160a01b031681565b6001600160a01b0380881660009081526005602090815260408083208a851684529091528120549091829182911680610776576107738b8b610f4f565b90505b6107803382610eb5565b806001600160a01b0316630fc63d106040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b505050506040513d60208110156107e557600080fd5b50516001600160a01b038c8116911614610803579899989697969495945b61080f8b33308c61129c565b61081b8a33308b61129c565b6108268b828b611427565b6108318a828a611427565b604080517f2563e426000000000000000000000000000000000000000000000000000000008152336004820152602481018b9052604481018a9052606481018990526084810188905260a4810187905290516001600160a01b03831691632563e4269160c48083019260609291908290030181600087803b1580156108b557600080fd5b505af11580156108c9573d6000803e3d6000fd5b505050506040513d60608110156108df57600080fd5b50805160208083015160409384015184517f0fc63d10000000000000000000000000000000000000000000000000000000008152945193985090965094506001600160a01b03841692630fc63d1092600480830193928290030181600087803b15801561094b57600080fd5b505af115801561095f573d6000803e3d6000fd5b505050506040513d602081101561097557600080fd5b50516001600160a01b038c811691161461098d579192915b509750975097945050505050565b600a5481565b6001546001600160a01b031681565b600960209081526000928352604080842090915290825290205460ff1681565b6000546001600160a01b031681565b6001600160a01b038086166000908152600560209081526040808320600480548616855292528083205481517fa2ad989f000000000000000000000000000000000000000000000000000000008152339381019390935260248301899052604483018890526064830187905260848301869052815193948594911692839263a2ad989f9260a48084019382900301818887803b158015610a7e57600080fd5b505af1158015610a92573d6000803e3d6000fd5b505050506040513d6040811015610aa857600080fd5b50805160209091015190999098509650505050505050565b6000546001600160a01b03163314610b1f576040805162461bcd60e51b815260206004820152601260248201527f4f776e61626c653a20464f5242494444454e0000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116610b7a576040805162461bcd60e51b815260206004820152601860248201527f4f776e61626c653a20494e56414c49445f414444524553530000000000000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610c41576040805162461bcd60e51b815260206004820152601260248201527f4f776e61626c653a20464f5242494444454e0000000000000000000000000000604482015290519081900360640190fd5b60005b600654811015610cea5760068181548110610c5b57fe5b6000918252602082200154604080517f0900f0100000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015291519190921692630900f010926024808201939182900301818387803b158015610cc657600080fd5b505af1158015610cda573d6000803e3d6000fd5b505060019092019150610c449050565b5050565b6004546001600160a01b031681565b60086020528160005260406000208181548110610d1657fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b60076020526000908152604090205460ff1681565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6001600160a01b038086166000908152600560209081526040808320600454851684529091528120549091829182911680610dcb57600454610dc8908a906001600160a01b0316610f4f565b90505b610dd53382610eb5565b610de18933308b61129c565b610dec89828a611427565b604080517ff6f1e306000000000000000000000000000000000000000000000000000000008152336004820152602481018a905260448101899052606481018890526084810187905290516001600160a01b0383169163f6f1e30691349160a48082019260609290919082900301818588803b158015610e6b57600080fd5b505af1158015610e7f573d6000803e3d6000fd5b50505050506040513d6060811015610e9657600080fd5b5080516020820151604090920151909b919a5098509650505050505050565b6001600160a01b0380831660009081526009602090815260408083209385168352929052205460ff16610cea576001600160a01b038083166000818152600960209081526040808320948616808452948252808320805460ff19166001908117909155938352600882528220805493840181558252902001805473ffffffffffffffffffffffffffffffffffffffff191690911790555050565b6000806000836001600160a01b0316856001600160a01b031610610f74578385610f77565b84845b90925090506001600160a01b038216610fd7576040805162461bcd60e51b815260206004820152601a60248201527f544f4d4920464143544f52593a205a45524f5f41444452455353000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260056020908152604080832085851684529091529020541615611051576040805162461bcd60e51b815260206004820152601960248201527f544f4d4920464143544f52593a20504149525f45584953545300000000000000604482015290519081900360640190fd5b606060405180602001611063906116df565b601f1982820381018352601f90910116604052600a5490915061108b5780516020820120600a555b6000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56001600160a01b03808216600081815260076020526040808220805460ff1916600190811790915560035460025491546004805485517fcc2a9a5b0000000000000000000000000000000000000000000000000000000081528e8a16928101929092528c89166024830152928816604482015292871660648401528616608483015290941660a485015251939850909263cc2a9a5b9260c480820193929182900301818387803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526005602081815260408084208987168086529083528185208054978d1673ffffffffffffffffffffffffffffffffffffffff1998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061134f5780518252601f199092019160209182019101611330565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146113b1576040519150601f19603f3d011682016040523d82523d6000602084013e6113b6565b606091505b50915091508180156113e45750805115806113e457508080602001905160208110156113e157600080fd5b50515b61141f5760405162461bcd60e51b81526004018080602001828103825260248152602001806141556024913960400191505060405180910390fd5b505050505050565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561146257600080fd5b505afa158015611476573d6000803e3d6000fd5b505050506040513d602081101561148c57600080fd5b505190508181101561149b5750805b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0385811660248301529151849287169163dd62ed3e916044808301926020929190829003018186803b15801561150457600080fd5b505afa158015611518573d6000803e3d6000fd5b505050506040513d602081101561152e57600080fd5b5051101561154157611541848483611547565b50505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106115f25780518252601f1990920191602091820191016115d3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611654576040519150601f19603f3d011682016040523d82523d6000602084013e611659565b606091505b5091509150818015611687575080511580611687575080806020019051602081101561168457600080fd5b50515b6116d8576040805162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c45440000604482015290519081900360640190fd5b5050505050565b612a68806116ed8339019056fe608060405234801561001057600080fd5b50600a80546001600160a01b03191633179055612a36806100326000396000f3fe6080604052600436106101d15760003560e01c806370a08231116100f7578063a9059cbb11610095578063cf67536511610064578063cf675365146106e1578063d14c9641146106f6578063dd62ed3e1461070b578063f6f1e30614610746576101d8565b8063a9059cbb14610623578063ad5c46481461065c578063bfc8b20814610671578063cc2a9a5b14610686576101d8565b80638da5cb5b116100d15780638da5cb5b1461057b57806395d89b4114610590578063a2ad989f146105a5578063a87430ba146105f0576101d8565b806370a082311461051e5780637535d246146105515780637efc77fa14610566576101d8565b806318160ddd1161016f5780632c79db111161013e5780632c79db11146104b4578063313ce567146104c95780635f64b55b146104f45780636c9fa59e14610509576101d8565b806318160ddd146103ba57806323b872dd146103cf5780632563e4261461041257806328e964e914610481576101d8565b8063095ea7b3116101ab578063095ea7b3146102c35780630fc63d10146103105780631392808214610341578063174f57af146103a5576101d8565b8063026c4207146101dd57806306fdde03146102045780630900f0101461028e576101d8565b366101d857005b600080fd5b3480156101e957600080fd5b506101f2610784565b60408051918252519081900360200190f35b34801561021057600080fd5b5061021961078a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025357818101518382015260200161023b565b50505050905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029a57600080fd5b506102c1600480360360208110156102b157600080fd5b50356001600160a01b03166107c3565b005b3480156102cf57600080fd5b506102fc600480360360408110156102e657600080fd5b506001600160a01b038135169060200135610845565b604080519115158252519081900360200190f35b34801561031c57600080fd5b506103256108ac565b604080516001600160a01b039092168252519081900360200190f35b34801561034d57600080fd5b5061038c600480360360a081101561036457600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001356108bb565b6040805192835260208301919091528051918290030190f35b3480156103b157600080fd5b506101f2610a53565b3480156103c657600080fd5b506101f2610aa1565b3480156103db57600080fd5b506102fc600480360360608110156103f257600080fd5b506001600160a01b03813581169160208101359091169060400135610aa7565b34801561041e57600080fd5b50610463600480360360c081101561043557600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a00135610b76565b60408051938452602084019290925282820152519081900360600190f35b34801561048d57600080fd5b5061038c600480360360208110156104a457600080fd5b50356001600160a01b0316610dde565b3480156104c057600080fd5b506101f2610dfc565b3480156104d557600080fd5b506104de610e0d565b6040805160ff9092168252519081900360200190f35b34801561050057600080fd5b50610325610e12565b34801561051557600080fd5b50610325610e21565b34801561052a57600080fd5b506101f26004803603602081101561054157600080fd5b50356001600160a01b0316610e30565b34801561055d57600080fd5b50610325610e42565b34801561057257600080fd5b50610325610e51565b34801561058757600080fd5b50610325610e60565b34801561059c57600080fd5b50610219610e6f565b3480156105b157600080fd5b5061038c600480360360a08110156105c857600080fd5b506001600160a01b038135169060208101359060408101359060608101359060800135610ea8565b3480156105fc57600080fd5b506104636004803603602081101561061357600080fd5b50356001600160a01b031661110a565b34801561062f57600080fd5b506102fc6004803603604081101561064657600080fd5b506001600160a01b03813516906020013561112b565b34801561066857600080fd5b50610325611141565b34801561067d57600080fd5b506101f2611150565b34801561069257600080fd5b506102c1600480360360c08110156106a957600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a0013516611156565b3480156106ed57600080fd5b506101f261123c565b34801561070257600080fd5b506101f2611242565b34801561071757600080fd5b506101f26004803603604081101561072e57600080fd5b506001600160a01b0381358116916020013516611248565b610463600480360360a081101561075c57600080fd5b506001600160a01b038135169060208101359060408101359060608101359060800135611265565b60025481565b6040518060400160405280600781526020017f546f6d69204c500000000000000000000000000000000000000000000000000081525081565b600a546001600160a01b03163314610816576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360008181526009602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600d546001600160a01b031681565b600a5460009081906001600160a01b03163314610913576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600c54600d54600e54604080517fbaa2abde0000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152604482018a905260648201899052608482018890528a831660a483015260c482018790528051929093169263baa2abde9260e4808401938290030181600087803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b505050506040513d60408110156109d257600080fd5b50805160209091015190925090506109e8611533565b6109f287876116e9565b6109fc8787611786565b50604080518381526020810183905280820188905290516001600160a01b038916917f59c3a0b60c6ab7deb62e1440c9e72441db6db7dfe514dba8cb18e60c0d896efa919081900360600190a29550959350505050565b6000610a5d611533565b610a6633611874565b60408051828152905191925033917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859181900360200190a290565b60075481565b6001600160a01b0383166000908152600960209081526040808320338452909152812054821115610b095760405162461bcd60e51b815260040180806020018281038252602281526020018061294b6022913960400191505060405180910390fd5b6001600160a01b0384166000908152600960209081526040808320338452909152902054610b3d908363ffffffff61194c16565b6001600160a01b0385166000908152600960209081526040808320338452909152902055610b6c848484611995565b5060019392505050565b600a54600090819081906001600160a01b03163314610bd0576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600d54600c54610bed916001600160a01b0390811691168a611b84565b600e54600c54610c0a916001600160a01b03908116911689611b84565b600d54610c22906001600160a01b031633308b611ca4565b600e54610c3a906001600160a01b031633308a611ca4565b600c54600d54600e54604080517f7ae06e580000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152604482018c9052606482018b9052608482018a905260a4820189905260c48201889052519190921691637ae06e589160e48083019260609291908290030181600087803b158015610cd257600080fd5b505af1158015610ce6573d6000803e3d6000fd5b505050506040513d6060811015610cfc57600080fd5b5080516020820151604090920151909450909250905082881115610d4057600d54610d40906001600160a01b03168a610d3b8b8763ffffffff61194c16565b611e12565b81871115610d6957600e54610d69906001600160a01b03168a610d3b8a8663ffffffff61194c16565b610d71611533565b610d7b8982611f95565b610d85898261202c565b50604080518481526020810184905280820183905290516001600160a01b038b16917fbeb3885786d637a474cbc287c0a44587231633a077f0bd30354d5a4b18996fce919081900360600190a296509650969350505050565b6001600160a01b031660009081526006602052604081205490549091565b6000610e07336120eb565b90505b90565b601281565b600e546001600160a01b031681565b6005546001600160a01b031681565b60086020526000908152604090205481565b600b546001600160a01b031681565b600c546001600160a01b031681565b600a546001600160a01b031681565b6040518060400160405280600381526020017f424c50000000000000000000000000000000000000000000000000000000000081525081565b600a5460009081906001600160a01b03163314610f00576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600f54600d546001600160a01b0390811691161480610f2f5750600f54600e546001600160a01b039081169116145b610f6f576040805162461bcd60e51b815260206004820152600c60248201526b125395905312510810d0531360a21b604482015290519081900360640190fd5b600f54600d546000916001600160a01b03918216911614610f9b57600d546001600160a01b0316610fa8565b600e546001600160a01b03165b600c54604080517f02751cec0000000000000000000000000000000000000000000000000000000081526001600160a01b038085166004830152602482018c9052604482018b9052606482018a90528c8116608483015260a482018990528251949550909216926302751cec9260c48082019392918290030181600087803b15801561103357600080fd5b505af1158015611047573d6000803e3d6000fd5b505050506040513d604081101561105d57600080fd5b5080516020909101519093509150611073611533565b61107d88886116e9565b6110878888611786565b50600d5460009081906001600160a01b038481169116146110a95783856110ac565b84845b60408051838152602081018390528082018d905290519294509092506001600160a01b038c16917f59c3a0b60c6ab7deb62e1440c9e72441db6db7dfe514dba8cb18e60c0d896efa9181900360600190a25050509550959350505050565b60066020526000908152604090208054600182015460029092015490919083565b6000611138338484611995565b50600192915050565b600f546001600160a01b031681565b60015490565b600a546001600160a01b031633146111a9576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600d80546001600160a01b0380891673ffffffffffffffffffffffffffffffffffffffff1992831617909255600e8054928816929091169190911790556111ef8461219b565b600c805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0394851617909155600b8054821694841694909417909355600f80549093169116179055505050565b60045481565b60035481565b600960209081526000928352604080842090915290825290205481565b600a54600090819081906001600160a01b031633146112bf576040805162461bcd60e51b81526020600482015260116024820152702a37b6b4902628102337b93134b23232b760791b604482015290519081900360640190fd5b600f54600d546001600160a01b03908116911614806112ee5750600f54600e546001600160a01b039081169116145b61132e576040805162461bcd60e51b815260206004820152600c60248201526b125395905312510810d0531360a21b604482015290519081900360640190fd5b600f54600d546000916001600160a01b0391821691161461135a57600d546001600160a01b0316611367565b600e546001600160a01b03165b600c549091506113829082906001600160a01b03168a611b84565b61138e8133308b611ca4565b600c54604080517ff6f1e3060000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018c9052604482018b9052606482018a9052608482018990529151919092169163f6f1e30691349160a48082019260609290919082900301818588803b15801561141457600080fd5b505af1158015611428573d6000803e3d6000fd5b50505050506040513d606081101561143f57600080fd5b508051602082015160409092015190955090935091508388111561147257611472818a610d3b8b8863ffffffff61194c16565b82341115611493576114938961148e348663ffffffff61194c16565b6121ca565b61149b611533565b6114a58983611f95565b6114af898361202c565b50600d5460009081906001600160a01b038481169116146114d15784866114d4565b85855b604080518381526020810183905280820188905290519294509092506001600160a01b038d16917fbeb3885786d637a474cbc287c0a44587231633a077f0bd30354d5a4b18996fce9181900360600190a2505050955095509592505050565b600c54600d54600e54604080516396ed28f960e01b81526001600160a01b03938416600482015291831660248301525160009392909216916396ed28f991604480820192602092909190829003018186803b15801561159157600080fd5b505afa1580156115a5573d6000803e3d6000fd5b505050506040513d60208110156115bb57600080fd5b505190506001600160a01b038116156116e657600b54604080516305ea697560e31b81526001600160a01b03848116600483015230602483015291516000939290921691632f534ba891604480820192602092909190829003018186803b15801561162557600080fd5b505afa158015611639573d6000803e3d6000fd5b505050506040513d602081101561164f57600080fd5b5051905080156116e457600b54600554604080517f4953c7820000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152928316602482015290519190921691634953c78291604480830192600092919082900301818387803b1580156116cb57600080fd5b505af11580156116df573d6000803e3d6000fd5b505050505b505b50565b6001600160a01b038216600090815260086020526040902054611712908263ffffffff61194c16565b6001600160a01b03831660009081526008602052604090205560075461173e908263ffffffff61194c16565b6007556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216600090815260066020526040812082158015906117ae575080548311155b6117ff576040805162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f50524f44554354495649545900000000000000604482015290519081900360640190fd5b6118076122c2565b61181084612344565b8054611822908463ffffffff61194c16565b80825560015461184f9164e8d4a5100091611843919063ffffffff6123eb16565b9063ffffffff61244416565b6001820155600054611867908463ffffffff61194c16565b6000555060019392505050565b600061187e6122c2565b61188782612344565b6001600160a01b0382166000908152600660205260409020600201546118f4576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5448494e4720544f204d494e540000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03808316600090815260066020526040902060020154600554909161192291163383611e12565b6001600160a01b039290921660009081526006602052604081206002015550600380548201905590565b600061198e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612486565b9392505050565b6001600160a01b038316600090815260086020526040902054811115611a02576040805162461bcd60e51b815260206004820181905260248201527f4552433230546f6b656e3a20494e53554646494349454e545f42414c414e4345604482015290519081900360640190fd5b6001600160a01b038316600090815260086020526040902054611a2b908263ffffffff61194c16565b6001600160a01b038085166000908152600860205260408082209390935590841681522054611a60908263ffffffff61251d16565b6001600160a01b038316600081815260086020526040902091909155611a9757600754611a93908263ffffffff61194c16565b6007555b600a54604080517f6319d8bc0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291519190921691636319d8bc91602480830192600092919082900301818387803b158015611afe57600080fd5b505af1158015611b12573d6000803e3d6000fd5b50505050611b1e611533565b611b288382611786565b50611b33828261202c565b50816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bbf57600080fd5b505afa158015611bd3573d6000803e3d6000fd5b505050506040513d6020811015611be957600080fd5b5051905081811015611bf85750805b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0385811660248301529151849287169163dd62ed3e916044808301926020929190829003018186803b158015611c6157600080fd5b505afa158015611c75573d6000803e3d6000fd5b505050506040513d6020811015611c8b57600080fd5b50511015611c9e57611c9e848483612577565b50505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310611d425780518252601f199092019160209182019101611d23565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611da4576040519150601f19603f3d011682016040523d82523d6000602084013e611da9565b606091505b5091509150818015611dd7575080511580611dd75750808060200190516020811015611dd457600080fd5b50515b6116df5760405162461bcd60e51b81526004018080602001828103825260248152602001806129dd6024913960400191505060405180910390fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b60208310611ea85780518252601f199092019160209182019101611e89565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611f0a576040519150601f19603f3d011682016040523d82523d6000602084013e611f0f565b606091505b5091509150818015611f3d575080511580611f3d5750808060200190516020811015611f3a57600080fd5b50515b611f8e576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b600754611fa8908263ffffffff61251d16565b6007556001600160a01b038216600090815260086020526040902054611fd4908263ffffffff61251d16565b6001600160a01b03831660008181526008602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600080821161206c5760405162461bcd60e51b815260040180806020018281038252602c8152602001806129b1602c913960400191505060405180910390fd5b6001600160a01b038316600090815260066020526040902061208c6122c2565b61209584612344565b6000546120a8908463ffffffff61251d16565b60005580546120bd908463ffffffff61251d16565b8082556001546120de9164e8d4a5100091611843919063ffffffff6123eb16565b6001918201559392505050565b6001600160a01b038116600090815260066020526040812060015482541561214b5760006121176126f3565b905061214761213a60005461184364e8d4a51000856123eb90919063ffffffff16565b839063ffffffff61251d16565b9150505b6121938260010154612187846002015461217b64e8d4a510006118438789600001546123eb90919063ffffffff16565b9063ffffffff61251d16565b9063ffffffff61194c16565b949350505050565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106122165780518252601f1990920191602091820191016121f7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612278576040519150601f19603f3d011682016040523d82523d6000602084013e61227d565b606091505b50509050806122bd5760405162461bcd60e51b815260040180806020018281038252602381526020018061298e6023913960400191505060405180910390fd5b505050565b6000546122eb576122e36122d46126f3565b6002549063ffffffff61251d16565b600255612342565b60006122f56126f3565b905061232761231860005461184364e8d4a51000856123eb90919063ffffffff16565b6001549063ffffffff61251d16565b60015560025461233d908263ffffffff61251d16565b600255505b565b6001600160a01b03811660009081526006602052604090208054156116e457600061238f826001015461218764e8d4a5100061184360015487600001546123eb90919063ffffffff16565b60028301549091506123a7908263ffffffff61251d16565b60028301556004546123bf908263ffffffff61251d16565b60045560015482546123e19164e8d4a51000916118439163ffffffff6123eb16565b6001830155505050565b6000826123fa575060006108a6565b8282028284828161240757fe5b041461198e5760405162461bcd60e51b815260040180806020018281038252602181526020018061296d6021913960400191505060405180910390fd5b600061198e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506128e5565b600081848411156125155760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124da5781810151838201526020016124c2565b50505050905090810190601f1680156125075780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561198e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167f095ea7b300000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061260d5780518252601f1990920191602091820191016125ee565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461266f576040519150601f19603f3d011682016040523d82523d6000602084013e612674565b606091505b50915091508180156126a25750805115806126a2575080806020019051602081101561269f57600080fd5b50515b611f8e576040805162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c45440000604482015290519081900360640190fd5b600c54600d54600e54604080516396ed28f960e01b81526001600160a01b039384166004820152918316602483015251600093849316916396ed28f9916044808301926020929190829003018186803b15801561274f57600080fd5b505afa158015612763573d6000803e3d6000fd5b505050506040513d602081101561277957600080fd5b5051600254600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945060009361282c9392612187926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b1580156127f157600080fd5b505afa158015612805573d6000803e3d6000fd5b505050506040513d602081101561281b57600080fd5b50516003549063ffffffff61251d16565b90506001600160a01b038216156128dc57600b54604080516305ea697560e31b81526001600160a01b03858116600483015230602483015291516000939290921691632f534ba891604480820192602092909190829003018186803b15801561289457600080fd5b505afa1580156128a8573d6000803e3d6000fd5b505050506040513d60208110156128be57600080fd5b505190506128d2828263ffffffff61251d16565b9350505050610e0a565b9150610e0a9050565b600081836129345760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156124da5781810151838201526020016124c2565b50600083858161294057fe5b049594505050505056fe4552433230546f6b656e3a20494e53554646494349454e545f414c4c4f57414e4345536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c454450524f4455435449564954595f56414c55455f4d5553545f42455f475245415445525f5448414e5f5a45524f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a264697066735822122099577898cf516758b63a04419e7d7459f224547a409aa34a58fd706b1ca72caf64736f6c634300060600335472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a26469706673582212204395632fa489eace8ba5ad1d69c94f2fea659d9af783caaeb4f952ddf4655c2f64736f6c63430006060033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20735,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3080,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "PLATFORM",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3082,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "POOL",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3084,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "TOMI",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3086,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "WETH",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3092,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "getPair",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 3095,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "allPairs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3099,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "isPair",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3104,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "playerPairs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3110,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "isAddPlayerPair",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3112,
        "contract": "contracts/TomiDelegate.sol:TomiDelegate",
        "label": "contractCodeHash",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      }
    }
  }
}