{
  "address": "0x035FcadFB034C58C35b2bF3207051831F1637CEB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TOMI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CONFIG",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONFIG",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOMI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "addPlayerPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerPairCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CONFIG",
          "type": "address"
        }
      ],
      "name": "updateConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x42c262733e3262054fe474ecbae96e3162f91d4861c4ce8b73c0b9437ef5d8d8",
  "receipt": {
    "to": null,
    "from": "0x9ef6eBF5A3E71d7f89eAdb94c8EA4293E64E4B4e",
    "contractAddress": "0x035FcadFB034C58C35b2bF3207051831F1637CEB",
    "transactionIndex": 8,
    "gasUsed": "2958933",
    "logsBloom": "0x
    "blockHash": "0x9a168f7ef0014f9277d13384aefc2111c7daa3a070a5cfe26f511ff457b8da1c",
    "transactionHash": "0x42c262733e3262054fe474ecbae96e3162f91d4861c4ce8b73c0b9437ef5d8d8",
    "logs": [],
    "blockNumber": 9163626,
    "cumulativeGasUsed": "10029218",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE774238f5eF7EA239BE157D4adb82bc753b36836",
    "0xA647DacEc508D09c9E8f4c719526Be297A2D94BB"
  ],
  "solcInputHash": "f36eb242fadd798d11ee81fd592eb5f4",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TOMI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_CONFIG\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOMI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPlayerPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerPairCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CONFIG\",\"type\":\"address\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/TomiFactory.sol\":\"TomiFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/TomiFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport './TomiPair.sol';\\nimport './interfaces/ITomiConfig.sol';\\n\\ncontract TomiFactory {\\n    uint256 public version = 1;\\n    address public TOMI;\\n    address public CONFIG;\\n    address public owner;\\n    mapping(address => mapping(address => address)) public getPair;\\n    mapping(address => bool) public isPair;\\n    address[] public allPairs;\\n\\n    mapping(address => address[]) public playerPairs;\\n    mapping(address => mapping(address => bool)) isAddPlayerPair;\\n\\n    bytes32 public contractCodeHash;\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    constructor(address _TOMI, address _CONFIG) public {\\n        TOMI = _TOMI;\\n        CONFIG = _CONFIG;\\n        owner = msg.sender;\\n    }\\n\\n    function updateConfig(address _CONFIG) external {\\n        require(msg.sender == owner, 'TOMI FACTORY: PERMISSION');\\n        CONFIG = _CONFIG;\\n        for(uint i = 0; i < allPairs.length; i ++) {\\n            TomiPair(allPairs[i]).initialize(TomiPair(allPairs[i]).token0(), TomiPair(allPairs[i]).token1(), _CONFIG, TOMI);\\n        }\\n    }\\n\\n    function getPlayerPairCount(address player) external view returns (uint256) {\\n        address[] storage existAddress = playerPairs[player];\\n        if (existAddress.length == 0) return 0;\\n        return existAddress.length;\\n    }\\n\\n    function addPlayerPair(address _player, address _pair) external returns (bool) {\\n        require(msg.sender == ITomiConfig(CONFIG).platform(), 'TOMI FACTORY: PERMISSION');\\n        if (isAddPlayerPair[_player][_pair] == false) {\\n            isAddPlayerPair[_player][_pair] = true;\\n            playerPairs[_player].push(_pair);\\n        }\\n        return true;\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(msg.sender == ITomiConfig(CONFIG).platform(), 'TOMI FACTORY: PERMISSION');\\n        require(tokenA != tokenB, 'TOMI FACTORY: IDENTICAL_ADDRESSES');\\n        require(\\n            ITomiConfig(CONFIG).checkToken(tokenA) && ITomiConfig(CONFIG).checkToken(tokenB),\\n            'TOMI FACTORY: NOT LIST'\\n        );\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'TOMI FACTORY: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'TOMI FACTORY: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(TomiPair).creationCode;\\n        if (uint256(contractCodeHash) == 0) {\\n            contractCodeHash = keccak256(bytecode);\\n        }\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        isPair[pair] = true;\\n        TomiPair(pair).initialize(token0, token1, CONFIG, TOMI);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n}\",\"keccak256\":\"0x0cf86107f5feb214615da7761fc78bf0bda1e7102e78dc871e598b7970e73229\"},\"contracts/TomiPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/ITomiFactory.sol';\\nimport './interfaces/ITgas.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/ITomiCallee.sol';\\nimport './interfaces/ITomiConfig.sol';\\nimport './modules/BaseShareField.sol';\\nimport './libraries/ConfigNames.sol';\\n\\ncontract TomiPair is BaseShareField {\\n    uint256 public version = 1;\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public FACTORY;\\n    address public CONFIG;\\n    address public TOMI;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n\\n    uint256 public totalReward;\\n    uint256 public remainReward;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    event Mint(address indexed from, address indexed to, uint256 value);\\n    event Burn(address indexed from, address indexed to, uint256 value);\\n    event ClaimTOMI(address indexed player, uint256 pairMint, uint256 userMint);\\n    mapping(address => uint256) public lastMintBlock;\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'Locked');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Mint(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Burn(from, address(0), value);\\n    }\\n    \\n    // function _mintTGAS() internal {\\n    //     if(ITgas(TGAS).take() > 0) {\\n    //         uint reward = ITgas(TGAS).mint();\\n    //         uint devAmount = reward * ITomiConfig(CONFIG).getConfigValue(ConfigNames.DEV_PRECENT) / 10000;\\n    //         address devAddress = ITomiConfig(CONFIG).dev();\\n    //         _safeTransfer(TGAS, devAddress, devAmount);\\n    //         remainReward = remainReward.add(reward.sub(devAmount));\\n    //     }\\n    // }\\n    \\n    // function _currentReward() internal override view returns (uint) {\\n    //     uint devPercent = ITomiConfig(CONFIG).getConfigValue(ConfigNames.DEV_PRECENT);\\n    //     uint pairReward = IERC20(TOMI).take().mul(10000 - devPercent).div(10000);\\n    //     return mintedShare.add(remainReward).add(pairReward).sub(totalShare);\\n    // }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TOMI PAIR : TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event SwapFee(address indexed token, address indexed to, uint256 amount);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        FACTORY = msg.sender;\\n    }\\n\\n    modifier onlyPlatform {\\n        address platform = ITomiConfig(CONFIG).platform();\\n        require(msg.sender == platform, 'TOMI PAIR : FORBIDDEN');\\n        _;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        address _config,\\n        address _tomi\\n    ) external {\\n        require(msg.sender == FACTORY, 'TOMI PAIR : FORBIDDEN');\\n        token0 = _token0;\\n        token1 = _token1;\\n        CONFIG = _config;\\n        TOMI = _tomi;\\n        _setShareToken(TOMI);\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'TOMI PAIR : OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs // important safety checks\\n    function mint(address to) external onlyPlatform lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = _balanceOf(token0, address(this));\\n        uint256 balance1 = _balanceOf(token1, address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'TOMI PAIR : INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n        // _mintTGAS();\\n        // _increaseProductivity(to, liquidity);\\n        lastMintBlock[to] = block.number;\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs // important safety checks\\n    function burn(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external onlyPlatform lock returns (uint256 amount0, uint256 amount1) {\\n        require(\\n            block.number >=\\n                lastMintBlock[from] + ITomiConfig(CONFIG).getConfigValue(ConfigNames.REMOVE_LIQUIDITY_DURATION),\\n            'TOMI PLATFORM : REMOVE LIQUIDITY DURATION FAIL'\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = _balanceOf(_token0, address(this));\\n        uint256 balance1 = _balanceOf(_token1, address(this));\\n        require(balanceOf[from] >= amount, 'TOMI PAIR : INSUFFICIENT_LIQUIDITY_AMOUNT');\\n\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = amount.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = amount.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'TOMI PAIR : INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(from, amount);\\n        // _mintTGAS();\\n        // _decreaseProductivity(from, amount);\\n\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = _balanceOf(_token0, address(this));\\n        balance1 = _balanceOf(_token1, address(this));\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs // important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external onlyPlatform lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'TOMI PAIR : INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'TOMI PAIR :  INSUFFICIENT_LIQUIDITY');\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, 'TOMI PAIR : INVALID_TO');\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\\n            if (data.length > 0) ITomiCallee(to).tomiCall(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = _balanceOf(_token0, address(this));\\n            balance1 = _balanceOf(_token1, address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        uint256 _amount0Out = amount0Out;\\n        uint256 _amount1Out = amount1Out;\\n        require(amount0In > 0 || amount1In > 0, 'TOMI PAIR : INSUFFICIENT_INPUT_AMOUNT');\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, _amount0Out, _amount1Out, to);\\n    }\\n\\n    function swapFee(\\n        uint256 amount,\\n        address token,\\n        address to\\n    ) external onlyPlatform {\\n        if (amount == 0 || token == to) return;\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n        require(to != token0 && to != token1, 'TOMI PAIR : INVALID_TO');\\n        _safeTransfer(token, to, amount);\\n        uint256 balance0 = _balanceOf(token0, address(this));\\n        uint256 balance1 = _balanceOf(token1, address(this));\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit SwapFee(token, to , amount);\\n    }\\n\\n    function queryReward() external view returns (uint256 rewardAmount, uint256 blockNumber) {\\n        rewardAmount = _takeWithAddress(msg.sender);\\n        blockNumber = block.number;\\n    }\\n\\n    function mintReward() external lock returns (uint256 userReward) {\\n        // _mintTGAS();\\n        userReward = _mint(msg.sender);\\n        remainReward = remainReward.sub(userReward);\\n        emit ClaimTOMI(msg.sender, remainReward, userReward);\\n    }\\n\\n    function getTOMIReserve() public view returns (uint256) {\\n        return _balanceOf(TOMI, address(this));\\n    }\\n\\n    function _balanceOf(address token, address owner) internal view returns (uint256) {\\n        if (token == TOMI && owner == address(this)) {\\n            return IERC20(token).balanceOf(owner).sub(remainReward);\\n        } else {\\n            return IERC20(token).balanceOf(owner);\\n        }\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(_balanceOf(token0, address(this)), _balanceOf(token1, address(this)), reserve0, reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0x5d4da89916251562827a25e374b6858d1bcdd134657a8d99554d7c40134b26be\"},\"contracts/interfaces/ERC2917-Interface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\nimport '../interfaces/IERC20.sol';\\n\\ninterface IERC2917 is IERC20 {\\n\\n    /// @dev This emit when interests amount per block is changed by the owner of the contract.\\n    /// It emits with the old interests amount and the new interests amount.\\n    event InterestRatePerBlockChanged (uint oldValue, uint newValue);\\n\\n    /// @dev This emit when a users' productivity has changed\\n    /// It emits with the user's address and the the value after the change.\\n    event ProductivityIncreased (address indexed user, uint value);\\n\\n    /// @dev This emit when a users' productivity has changed\\n    /// It emits with the user's address and the the value after the change.\\n    event ProductivityDecreased (address indexed user, uint value);\\n\\n    /// @dev Return the current contract's interests rate per block.\\n    /// @return The amount of interests currently producing per each block.\\n    function interestsPerBlock() external view returns (uint);\\n\\n    /// @notice Change the current contract's interests rate.\\n    /// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\\n    /// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestRatePerBlockChanged event.\\n    function changeInterestRatePerBlock(uint value) external returns (bool);\\n\\n    /// @notice It will get the productivity of given user.\\n    /// @dev it will return 0 if user has no productivity proved in the contract.\\n    /// @return user's productivity and overall productivity.\\n    function getProductivity(address user) external view returns (uint, uint);\\n\\n    /// @notice increase a user's productivity.\\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\\n    /// @return true to confirm that the productivity added success.\\n    function increaseProductivity(address user, uint value) external returns (bool);\\n\\n    /// @notice decrease a user's productivity.\\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\\n    /// @return true to confirm that the productivity removed success.\\n    function decreaseProductivity(address user, uint value) external returns (bool);\\n\\n    /// @notice take() will return the interests that callee will get at current block height.\\n    /// @dev it will always calculated by block.number, so it will change when block height changes.\\n    /// @return amount of the interests that user are able to mint() at current block height.\\n    function take() external view returns (uint);\\n\\n    /// @notice similar to take(), but with the block height joined to calculate return.\\n    /// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\\n    /// @return amount of interests and the block height.\\n    function takeWithBlock() external view returns (uint, uint);\\n\\n    /// @notice mint the avaiable interests to callee.\\n    /// @dev once it mint, the amount of interests will transfer to callee's address.\\n    /// @return the amount of interests minted.\\n    function mint() external returns (uint);\\n}\\n\",\"keccak256\":\"0x7e14c440b54d2697e53cf60e0abb0e5d8548e5e167e6e02aa0c84a1a8268b0f6\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\",\"keccak256\":\"0x6e5335393e260d808f34e7e3dfd6177004185a9ad70e5a63a0c49844bba42b87\"},\"contracts/interfaces/ITgas.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITgas {\\n    function amountPerBlock() external view returns (uint);\\n    function changeInterestRatePerBlock(uint value) external returns (bool);\\n    function getProductivity(address user) external view returns (uint, uint);\\n    function increaseProductivity(address user, uint value) external returns (bool);\\n    function decreaseProductivity(address user, uint value) external returns (bool);\\n    function take() external view returns (uint);\\n    function takeWithBlock() external view returns (uint, uint);\\n    function mint() external returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function upgradeImpl(address _newImpl) external;\\n    function upgradeGovernance(address _newGovernor) external;\\n    function transfer(address to, uint value) external returns (bool);\\n    function approve(address spender, uint value) external returns (bool);\\n}\",\"keccak256\":\"0x26f114dcfa8a1d36132aa730809cff39345d65a8ab373abb4572075fb4b4cea1\"},\"contracts/interfaces/ITomiCallee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITomiCallee {\\n    function tomiCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0x995cc549efa6208e466cdf5bce9b1df236c12631e10cfd3d2a03bc75bba90c28\"},\"contracts/interfaces/ITomiConfig.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITomiConfig {\\n    function governor() external view returns (address);\\n    function dev() external view returns (address);\\n    function PERCENT_DENOMINATOR() external view returns (uint);\\n    function getConfig(bytes32 _name) external view returns (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable);\\n    function getConfigValue(bytes32 _name) external view returns (uint);\\n    function changeConfigValue(bytes32 _name, uint _value) external returns (bool);\\n    function checkToken(address _token) external view returns(bool);\\n    function checkPair(address tokenA, address tokenB) external view returns (bool);\\n    function listToken(address _token) external returns (bool);\\n    function getDefaultListTokens() external returns (address[] memory);\\n    function platform() external view returns  (address);\\n    function addToken(address _token) external returns (bool);\\n}\",\"keccak256\":\"0x103ef823b0e1e37bb4cc9cd02da851cd27171693fe0499eba931171db9a344c5\"},\"contracts/interfaces/ITomiFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITomiFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function contractCodeHash() external view returns (bytes32);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function isPair(address pair) external view returns (bool);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n    function playerPairs(address player, uint index) external view returns (address pair);\\n    function getPlayerPairCount(address player) external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function addPlayerPair(address player, address _pair) external returns (bool);\\n}\",\"keccak256\":\"0x6d242d5d40344fff4d0ac3577771d1092cc19d3f360717bfb7dd17ed99090803\"},\"contracts/libraries/ConfigNames.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\nlibrary ConfigNames {\\n    bytes32 public constant PRODUCE_TGAS_RATE = bytes32('PRODUCE_TGAS_RATE');\\n    bytes32 public constant SWAP_FEE_PERCENT = bytes32('SWAP_FEE_PERCENT');\\n    bytes32 public constant LIST_TGAS_AMOUNT = bytes32('LIST_TGAS_AMOUNT');\\n    bytes32 public constant UNSTAKE_DURATION = bytes32('UNSTAKE_DURATION');\\n    // bytes32 public constant EXECUTION_DURATION = bytes32('EXECUTION_DURATION');\\n    bytes32 public constant REMOVE_LIQUIDITY_DURATION = bytes32('REMOVE_LIQUIDITY_DURATION');\\n    bytes32 public constant TOKEN_TO_TGAS_PAIR_MIN_PERCENT = bytes32('TOKEN_TO_TGAS_PAIR_MIN_PERCENT');\\n    bytes32 public constant LIST_TOKEN_FAILURE_BURN_PRECENT = bytes32('LIST_TOKEN_FAILURE_BURN_PRECENT');\\n    bytes32 public constant LIST_TOKEN_SUCCESS_BURN_PRECENT = bytes32('LIST_TOKEN_SUCCESS_BURN_PRECENT');\\n    bytes32 public constant PROPOSAL_TGAS_AMOUNT = bytes32('PROPOSAL_TGAS_AMOUNT');\\n    // bytes32 public constant VOTE_DURATION = bytes32('VOTE_DURATION');\\n    bytes32 public constant VOTE_REWARD_PERCENT = bytes32('VOTE_REWARD_PERCENT');\\n    bytes32 public constant TOKEN_PENGDING_SWITCH = bytes32('TOKEN_PENGDING_SWITCH');\\n    bytes32 public constant TOKEN_PENGDING_TIME = bytes32('TOKEN_PENGDING_TIME');\\n    bytes32 public constant LIST_TOKEN_SWITCH = bytes32('LIST_TOKEN_SWITCH');\\n    bytes32 public constant DEV_PRECENT = bytes32('DEV_PRECENT');\\n    bytes32 public constant FEE_GOVERNANCE_REWARD_PERCENT = bytes32('FEE_GOVERNANCE_REWARD_PERCENT');\\n    bytes32 public constant FEE_LP_REWARD_PERCENT = bytes32('FEE_LP_REWARD_PERCENT');\\n    bytes32 public constant FEE_FUNDME_REWARD_PERCENT = bytes32('FEE_FUNDME_REWARD_PERCENT');\\n    bytes32 public constant FEE_LOTTERY_REWARD_PERCENT = bytes32('FEE_LOTTERY_REWARD_PERCENT');\\n}\",\"keccak256\":\"0x7b9f0e2423ed46cc0d02531a4250c7a1ec52433f769c5efc69c8c0f1c0e28d7b\"},\"contracts/libraries/Math.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xade13ac609f0853430a3840a0bc6883c8635d02868ba01ad42fd784ed082da7e\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0xc8945d481ee64b22f7619e467ee2563c3f4c83079cce98cea6aa86b18b9223cb\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x66eeb857a4e1b189ee4fa48fd976ce16cc510d29eab7e0671cbc47b81fee7654\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\",\"keccak256\":\"0x9f768e19a0dbcf9e040b062ac84a2cbb62f51c922f9dd2a18d6f68220a26d36a\"},\"contracts/modules/BaseShareField.sol\":{\"content\":\"pragma solidity >=0.6.6;\\nimport '../interfaces/ERC2917-Interface.sol';\\nimport '../libraries/SafeMath.sol';\\nimport '../libraries/TransferHelper.sol';\\n\\ncontract BaseShareField {\\n    using SafeMath for uint;\\n    \\n    uint totalProductivity;\\n    uint accAmountPerShare;\\n    \\n    uint public totalShare;\\n    uint public mintedShare;\\n    uint public mintCumulation;\\n    \\n    address public shareToken;\\n    \\n    struct UserInfo {\\n        uint amount;     // How many tokens the user has provided.\\n        uint rewardDebt; // Reward debt. \\n        uint rewardEarn; // Reward earn and not minted\\n    }\\n\\n    mapping(address => UserInfo) public users;\\n    \\n    function _setShareToken(address _shareToken) internal {\\n        shareToken = _shareToken;\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _update() internal virtual {\\n        if (totalProductivity == 0) {\\n            totalShare = totalShare.add(_currentReward());\\n            return;\\n        }\\n        \\n        uint256 reward = _currentReward();\\n        accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\\n        totalShare = totalShare.add(reward);\\n    }\\n    \\n    function _currentReward() internal virtual view returns (uint) {\\n        return mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\\n    }\\n    \\n    // Audit user's reward to be up-to-date\\n    function _audit(address user) internal virtual {\\n        UserInfo storage userInfo = users[user];\\n        if (userInfo.amount > 0) {\\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\\n            mintCumulation = mintCumulation.add(pending);\\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        }\\n    }\\n\\n    // External function call\\n    // This function increase user's productivity and updates the global productivity.\\n    // the users' actual share percentage will calculated by:\\n    // Formula:     user_productivity / global_productivity\\n    function _increaseProductivity(address user, uint value) internal virtual returns (bool) {\\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\\n\\n        UserInfo storage userInfo = users[user];\\n        _update();\\n        _audit(user);\\n\\n        totalProductivity = totalProductivity.add(value);\\n\\n        userInfo.amount = userInfo.amount.add(value);\\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        return true;\\n    }\\n\\n    // External function call \\n    // This function will decreases user's productivity by value, and updates the global productivity\\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\\n    function _decreaseProductivity(address user, uint value) internal virtual returns (bool) {\\n        UserInfo storage userInfo = users[user];\\n        require(value > 0 && userInfo.amount >= value, 'INSUFFICIENT_PRODUCTIVITY');\\n        \\n        _update();\\n        _audit(user);\\n        \\n        userInfo.amount = userInfo.amount.sub(value);\\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\\n        totalProductivity = totalProductivity.sub(value);\\n        \\n        return true;\\n    }\\n    \\n    function _takeWithAddress(address user) internal view returns (uint) {\\n        UserInfo storage userInfo = users[user];\\n        uint _accAmountPerShare = accAmountPerShare;\\n        // uint256 lpSupply = totalProductivity;\\n        if (totalProductivity != 0) {\\n            uint reward = _currentReward();\\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\\n        }\\n        return userInfo.amount.mul(_accAmountPerShare).div(1e12).add(userInfo.rewardEarn).sub(userInfo.rewardDebt);\\n    }\\n\\n    // External function call\\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\\n    // Also it calculates global token supply from last time the user mint to this time.\\n    function _mint(address user) internal virtual returns (uint) {\\n        _update();\\n        _audit(user);\\n        require(users[user].rewardEarn > 0, \\\"NOTHING TO MINT\\\");\\n        uint amount = users[user].rewardEarn;\\n        TransferHelper.safeTransfer(shareToken, msg.sender, amount);\\n        users[user].rewardEarn = 0;\\n        mintedShare += amount;\\n        return amount;\\n    }\\n\\n    // Returns how many productivity a user has and global has.\\n    function getProductivity(address user) public virtual view returns (uint, uint) {\\n        return (users[user].amount, totalProductivity);\\n    }\\n\\n    // Returns the current gorss product rate.\\n    function interestsPerBlock() public virtual view returns (uint) {\\n        return accAmountPerShare;\\n    }\\n    \\n}\",\"keccak256\":\"0xb65eb225b2090ca7066b6e43637385352f1c2aa05149362a4ab71514ea4ef6c8\"}},\"version\":1}",
  "bytecode": "0x6080604052600160005534801561001557600080fd5b506040516133833803806133838339818101604052604081101561003857600080fd5b508051602090910151600180546001600160a01b039384166001600160a01b031991821617909155600280549390921692811692909217905560038054909116331790556132f88061008b6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063bf1512d31161008c578063c9ead25811610066578063c9ead2581461020a578063d92e82e41461024c578063e5e31b1314610254578063e6a439051461027a576100ea565b8063bf1512d3146101a8578063c1dfe652146101d4578063c9c65396146101dc576100ea565b80636c42fa66116100c85780636c42fa661461014a5780636cc919c8146101705780637c7f84ee146101985780638da5cb5b146101a0576100ea565b80631e3dd18b146100ef57806354fd4d5014610128578063574f2ba314610142575b600080fd5b61010c6004803603602081101561010557600080fd5b50356102a8565b604080516001600160a01b039092168252519081900360200190f35b6101306102cf565b60408051918252519081900360200190f35b6101306102d5565b6101306004803603602081101561016057600080fd5b50356001600160a01b03166102db565b6101966004803603602081101561018657600080fd5b50356001600160a01b031661030c565b005b6101306105a5565b61010c6105ab565b61010c600480360360408110156101be57600080fd5b506001600160a01b0381351690602001356105ba565b61010c6105ef565b61010c600480360360408110156101f257600080fd5b506001600160a01b03813581169160200135166105fe565b6102386004803603604081101561022057600080fd5b506001600160a01b0381358116916020013516610b9a565b604080519115158252519081900360200190f35b61010c610d07565b6102386004803603602081101561026a57600080fd5b50356001600160a01b0316610d16565b61010c6004803603604081101561029057600080fd5b506001600160a01b0381358116916020013516610d2b565b600681815481106102b557fe5b6000918252602090912001546001600160a01b0316905081565b60005481565b60065490565b6001600160a01b03811660009081526007602052604081208054610303576000915050610307565b5490505b919050565b6003546001600160a01b0316331461036b576040805162461bcd60e51b815260206004820152601860248201527f544f4d4920464143544f52593a205045524d495353494f4e0000000000000000604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905560005b6006548110156105a157600681815481106103ad57fe5b600091825260209091200154600680546001600160a01b039092169163f8c8765e9190849081106103da57fe5b60009182526020918290200154604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692630dfe168192600480840193829003018186803b15801561043c57600080fd5b505afa158015610450573d6000803e3d6000fd5b505050506040513d602081101561046657600080fd5b5051600680548590811061047657fe5b60009182526020918290200154604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263d21220a792600480840193829003018186803b1580156104d857600080fd5b505afa1580156104ec573d6000803e3d6000fd5b505050506040513d602081101561050257600080fd5b5051600154604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292841660248401528388166044840152921660648201529051608480830192600092919082900301818387803b15801561057d57600080fd5b505af1158015610591573d6000803e3d6000fd5b5050600190920191506103969050565b5050565b60095481565b6003546001600160a01b031681565b600760205281600052604060002081815481106105d357fe5b6000918252602090912001546001600160a01b03169150829050565b6001546001600160a01b031681565b6002546040805163097bc71960e31b815290516000926001600160a01b031691634bde38c8916004808301926020929190829003018186803b15801561064357600080fd5b505afa158015610657573d6000803e3d6000fd5b505050506040513d602081101561066d57600080fd5b50516001600160a01b031633146106cb576040805162461bcd60e51b815260206004820152601860248201527f544f4d4920464143544f52593a205045524d495353494f4e0000000000000000604482015290519081900360640190fd5b816001600160a01b0316836001600160a01b0316141561071c5760405162461bcd60e51b81526004018080602001828103825260218152602001806132a26021913960400191505060405180910390fd5b60025460408051633c6202c960e21b81526001600160a01b0386811660048301529151919092169163f1880b24916024808301926020929190829003018186803b15801561076957600080fd5b505afa15801561077d573d6000803e3d6000fd5b505050506040513d602081101561079357600080fd5b50518015610816575060025460408051633c6202c960e21b81526001600160a01b0385811660048301529151919092169163f1880b24916024808301926020929190829003018186803b1580156107e957600080fd5b505afa1580156107fd573d6000803e3d6000fd5b505050506040513d602081101561081357600080fd5b50515b610867576040805162461bcd60e51b815260206004820152601660248201527f544f4d4920464143544f52593a204e4f54204c49535400000000000000000000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061088a57838561088d565b84845b90925090506001600160a01b0382166108ed576040805162461bcd60e51b815260206004820152601a60248201527f544f4d4920464143544f52593a205a45524f5f41444452455353000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615610967576040805162461bcd60e51b815260206004820152601960248201527f544f4d4920464143544f52593a20504149525f45584953545300000000000000604482015290519081900360640190fd5b60606040518060200161097990610d51565b601f1982820381018352601f909101166040526009549091506109a157805160208201206009555b6000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56001600160a01b03808216600081815260056020526040808220805460ff19166001908117909155600254905482517ff8c8765e0000000000000000000000000000000000000000000000000000000081528b871660048201528a871660248201529186166044830152909416606485015251939850909263f8c8765e92608480820193929182900301818387803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d1673ffffffffffffffffffffffffffffffffffffffff1998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b6002546040805163097bc71960e31b815290516000926001600160a01b031691634bde38c8916004808301926020929190829003018186803b158015610bdf57600080fd5b505afa158015610bf3573d6000803e3d6000fd5b505050506040513d6020811015610c0957600080fd5b50516001600160a01b03163314610c67576040805162461bcd60e51b815260206004820152601860248201527f544f4d4920464143544f52593a205045524d495353494f4e0000000000000000604482015290519081900360640190fd5b6001600160a01b0380841660009081526008602090815260408083209386168352929052205460ff16610cfe576001600160a01b038084166000818152600860209081526040808320948716808452948252808320805460ff19166001908117909155938352600782528220805493840181558252902001805473ffffffffffffffffffffffffffffffffffffffff191690911790555b50600192915050565b6002546001600160a01b031681565b60056020526000908152604090205460ff1681565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b61254380610d5f8339019056fe60806040526001600755600160155534801561001a57600080fd5b50600880546001600160a01b031916331790556125078061003c6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806370a082311161010f578063c1dfe652116100a2578063d92e82e411610071578063d92e82e41461049f578063f6b911bc146104a7578063f8c8765e146104dd578063fff6cae91461051b576101e5565b8063c1dfe6521461047f578063cf67536514610487578063d14c96411461048f578063d21220a714610497576101e5565b806396cda080116100de57806396cda080146103f7578063a87430ba1461042b578063ba9a7a561461046f578063bfc8b20814610477576101e5565b806370a082311461039b578063750142e6146103c15780638b185b35146103c95780639660c266146103ef576101e5565b806328e964e9116101875780635909c0d5116101565780635909c0d51461035d5780635a3d5493146103655780636a6278421461036d5780636c9fa59e14610393576101e5565b806328e964e9146103065780632c79db11146103455780632dd310001461034d57806354fd4d5014610355576101e5565b80630dfe1681116101c35780630dfe1681146102ca5780631485ff78146102ee578063174f57af146102f657806318160ddd146102fe576101e5565b8063022c0d9f146101ea578063026c4207146102785780630902f1ac14610292575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b509092509050610523565b005b610280610982565b60408051918252519081900360200190f35b61029a610988565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6102d26109b2565b604080516001600160a01b039092168252519081900360200190f35b6102806109c1565b6102806109c7565b610280610a75565b61032c6004803603602081101561031c57600080fd5b50356001600160a01b0316610a7b565b6040805192835260208301919091528051918290030190f35b61032c610a99565b6102d2610aad565b610280610abc565b610280610ac2565b610280610ac8565b6102806004803603602081101561038357600080fd5b50356001600160a01b0316610ace565b6102d2610dbc565b610280600480360360208110156103b157600080fd5b50356001600160a01b0316610dcb565b610280610ddd565b610280600480360360208110156103df57600080fd5b50356001600160a01b0316610de3565b610280610df5565b6102766004803603606081101561040d57600080fd5b508035906001600160a01b0360208201358116916040013516610e13565b6104516004803603602081101561044157600080fd5b50356001600160a01b0316611035565b60408051938452602084019290925282820152519081900360600190f35b610280611056565b61028061105c565b6102d2611062565b610280611071565b610280611077565b6102d261107d565b6102d261108c565b61032c600480360360608110156104bd57600080fd5b506001600160a01b0381358116916020810135909116906040013561109b565b610276600480360360808110156104f357600080fd5b506001600160a01b03813581169160208101358216916040820135811691606001351661147f565b610276611536565b6009546040805163097bc71960e31b815290516000926001600160a01b031691634bde38c8916004808301926020929190829003018186803b15801561056857600080fd5b505afa15801561057c573d6000803e3d6000fd5b505050506040513d602081101561059257600080fd5b50519050336001600160a01b038216146105eb576040805162461bcd60e51b81526020600482015260156024820152742a27a6a4902820a4a9101d102327a92124a22222a760591b604482015290519081900360640190fd5b60155460011461062b576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b60006015558515158061063e5750600085115b6106795760405162461bcd60e51b81526004018080602001828103825260268152602001806124836026913960400191505060405180910390fd5b600080610684610988565b5091509150816001600160701b0316881080156106a95750806001600160701b031687105b6106e45760405162461bcd60e51b815260040180806020018281038252602381526020018061239a6023913960400191505060405180910390fd5b600b54600c5460009182916001600160a01b0391821691908116908a1682148015906107225750806001600160a01b03168a6001600160a01b031614155b610773576040805162461bcd60e51b815260206004820152601660248201527f544f4d492050414952203a20494e56414c49445f544f00000000000000000000604482015290519081900360640190fd5b8b1561078457610784828b8e6115ce565b8a1561079557610795818b8d6115ce565b871561085057896001600160a01b0316631932ba53338e8e8d8d6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b505050505b61085a8230611768565b93506108668130611768565b9250505060008a856001600160701b0316038311610885576000610894565b8a856001600160701b03160383035b905060008a856001600160701b03160383116108b15760006108c0565b8a856001600160701b03160383035b90508b8b831515806108d25750600083115b61090d5760405162461bcd60e51b81526004018080602001828103825260258152602001806124146025913960400191505060405180910390fd5b61091986868a8a6118bb565b60408051858152602081018590528082018490526060810183905290516001600160a01b038e169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001601555505050505050505050505050565b60025481565b600d546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600b546001600160a01b031681565b60115481565b6000601554600114610a09576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b6000601555610a1733611a98565b601154909150610a2d908263ffffffff611b7216565b60118190556040805191825260208201839052805133927ff31aa2aa8628a933f70d74fb07da3f979fc08324cfd2d3d9032bbdbf64da0f5e92908290030190a2600160155590565b60125481565b6001600160a01b031660009081526006602052604081205490549091565b600080610aa533611bbb565b924392509050565b6008546001600160a01b031681565b60075481565b600e5481565b600f5481565b600080600960009054906101000a90046001600160a01b03166001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1f57600080fd5b505afa158015610b33573d6000803e3d6000fd5b505050506040513d6020811015610b4957600080fd5b50519050336001600160a01b03821614610ba2576040805162461bcd60e51b81526020600482015260156024820152742a27a6a4902820a4a9101d102327a92124a22222a760591b604482015290519081900360640190fd5b601554600114610be2576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b6000601581905580610bf2610988565b50600b549193509150600090610c11906001600160a01b031630611768565b600c54909150600090610c2d906001600160a01b031630611768565b90506000610c4a836001600160701b03871663ffffffff611b7216565b90506000610c67836001600160701b03871663ffffffff611b7216565b60125490915080610cb057610c9c6103e8610c90610c8b868663ffffffff611c6b16565b611cc4565b9063ffffffff611b7216565b9850610cab60006103e8611d15565b610cff565b610cfc6001600160701b038816610ccd858463ffffffff611c6b16565b81610cd457fe5b046001600160701b038816610cef858563ffffffff611c6b16565b81610cf657fe5b04611dac565b98505b60008911610d3e5760405162461bcd60e51b81526004018080602001828103825260298152602001806123eb6029913960400191505060405180910390fd5b610d488a8a611d15565b6001600160a01b038a166000908152601460205260409020439055610d6f858589896118bb565b6040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a25050600160155550949695505050505050565b6005546001600160a01b031681565b60136020526000908152604090205481565b60105481565b60146020526000908152604090205481565b600a54600090610e0e906001600160a01b031630611768565b905090565b6009546040805163097bc71960e31b815290516000926001600160a01b031691634bde38c8916004808301926020929190829003018186803b158015610e5857600080fd5b505afa158015610e6c573d6000803e3d6000fd5b505050506040513d6020811015610e8257600080fd5b50519050336001600160a01b03821614610edb576040805162461bcd60e51b81526020600482015260156024820152742a27a6a4902820a4a9101d102327a92124a22222a760591b604482015290519081900360640190fd5b831580610ef95750816001600160a01b0316836001600160a01b0316145b15610f035761102f565b600080610f0e610988565b50600b5491935091506001600160a01b03858116911614801590610f405750600c546001600160a01b03858116911614155b610f91576040805162461bcd60e51b815260206004820152601660248201527f544f4d492050414952203a20494e56414c49445f544f00000000000000000000604482015290519081900360640190fd5b610f9c8585886115ce565b600b54600090610fb5906001600160a01b031630611768565b600c54909150600090610fd1906001600160a01b031630611768565b9050610fdf828286866118bb565b856001600160a01b0316876001600160a01b03167fd58eef465bb0100d5e79f7940ef7ec9eafeff04fa088db4388968231fffaf07d8a6040518082815260200191505060405180910390a3505050505b50505050565b60066020526000908152604090208054600182015460029092015490919083565b6103e881565b60015490565b600a546001600160a01b031681565b60045481565b60035481565b600c546001600160a01b031681565b6009546001600160a01b031681565b6000806000600960009054906101000a90046001600160a01b03166001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d602081101561111857600080fd5b50519050336001600160a01b03821614611171576040805162461bcd60e51b81526020600482015260156024820152742a27a6a4902820a4a9101d102327a92124a22222a760591b604482015290519081900360640190fd5b6015546001146111b1576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b6000601555600954604080517fc199de320000000000000000000000000000000000000000000000000000000081527f52454d4f56455f4c49515549444954595f4455524154494f4e00000000000000600482015290516001600160a01b039092169163c199de3291602480820192602092909190829003018186803b15801561123a57600080fd5b505afa15801561124e573d6000803e3d6000fd5b505050506040513d602081101561126457600080fd5b50516001600160a01b038716600090815260146020526040902054014310156112be5760405162461bcd60e51b815260040180806020018281038252602e8152602001806123bd602e913960400191505060405180910390fd5b6000806112c9610988565b50600b54600c549294509092506001600160a01b03908116911660006112ef8330611768565b905060006112fd8330611768565b6001600160a01b038d166000908152601360205260409020549091508a11156113575760405162461bcd60e51b81526004018080602001828103825260298152602001806124a96029913960400191505060405180910390fd5b6012548061136b8c8563ffffffff611c6b16565b8161137257fe5b049950806113868c8463ffffffff611c6b16565b8161138d57fe5b04985060008a1180156113a05750600089115b6113db5760405162461bcd60e51b81526004018080602001828103825260298152602001806124396029913960400191505060405180910390fd5b6113e58d8c611dc2565b6113f0858d8c6115ce565b6113fb848d8b6115ce565b6114058530611768565b92506114118430611768565b915061141f838389896118bb565b604080518b8152602081018b905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a350505050505050600160158190555050935093915050565b6008546001600160a01b031633146114d6576040805162461bcd60e51b81526020600482015260156024820152742a27a6a4902820a4a9101d102327a92124a22222a760591b604482015290519081900360640190fd5b600b805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0387811691909117909255600c80548216868416179055600980548216858416179055600a8054909116838316179081905561102f9116611e5f565b601554600114611576576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b6000601555600b546115c790611595906001600160a01b031630611768565b600c546115ab906001600160a01b031630611768565b600d546001600160701b0380821691600160701b9004166118bb565b6001601555565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b6020831061167b5780518252601f19909201916020918201910161165c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146116dd576040519150601f19603f3d011682016040523d82523d6000602084013e6116e2565b606091505b5091509150818015611710575080511580611710575080806020019051602081101561170d57600080fd5b50515b611761576040805162461bcd60e51b815260206004820152601b60248201527f544f4d492050414952203a205452414e534645525f4641494c45440000000000604482015290519081900360640190fd5b5050505050565b600a546000906001600160a01b03848116911614801561179057506001600160a01b03821630145b1561183057611829601154846001600160a01b03166370a08231856040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d602081101561181b57600080fd5b50519063ffffffff611b7216565b90506118b5565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561188657600080fd5b505afa15801561189a573d6000803e3d6000fd5b505050506040513d60208110156118b057600080fd5b505190505b92915050565b6001600160701b0384118015906118d957506001600160701b038311155b61192a576040805162461bcd60e51b815260206004820152601460248201527f544f4d492050414952203a204f564552464c4f57000000000000000000000000604482015290519081900360640190fd5b600d5463ffffffff42811691600160e01b9004811682039081161580159061195a57506001600160701b03841615155b801561196e57506001600160701b03831615155b156119df578063ffffffff1661199c8561198786611e8e565b6001600160e01b03169063ffffffff611ea016565b600e80546001600160e01b03929092169290920201905563ffffffff81166119c78461198787611e8e565b600f80546001600160e01b0392909216929092020190555b600d80546dffffffffffffffffffffffffffff19166001600160701b03888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6000611aa2611ec5565b611aab82611f47565b6001600160a01b038216600090815260066020526040902060020154611b18576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5448494e4720544f204d494e540000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038083166000908152600660205260409020600201546005549091611b4691163383611fef565b6001600160a01b038316600090815260066020526040812060020155600380548201905590505b919050565b6000611bb483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612152565b9392505050565b6001600160a01b0381166000908152600660205260408120600154825415611c27576000611be76121e9565b9050611c23611c16600054611c0a64e8d4a5100085611c6b90919063ffffffff16565b9063ffffffff61229816565b839063ffffffff6122da16565b9150505b611c638260010154610c908460020154611c5764e8d4a51000611c0a878960000154611c6b90919063ffffffff16565b9063ffffffff6122da16565b949350505050565b600082611c7a575060006118b5565b82820282848281611c8757fe5b0414611bb45760405162461bcd60e51b81526004018080602001828103825260218152602001806124626021913960400191505060405180910390fd5b60006003821115611d07575080600160028204015b81811015611d0157809150600281828581611cf057fe5b040181611cf957fe5b049050611cd9565b50611b6d565b8115611b6d57506001919050565b601254611d28908263ffffffff6122da16565b6012556001600160a01b038216600090815260136020526040902054611d54908263ffffffff6122da16565b6001600160a01b03831660008181526013602090815260408083209490945583518581529351929391927fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f89281900390910190a35050565b6000818310611dbb5781611bb4565b5090919050565b6001600160a01b038216600090815260136020526040902054611deb908263ffffffff611b7216565b6001600160a01b038316600090815260136020526040902055601254611e17908263ffffffff611b7216565b6012556040805182815290516000916001600160a01b038516917fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b94539181900360200190a35050565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b03841681611ebd57fe5b049392505050565b600054611eee57611ee6611ed76121e9565b6002549063ffffffff6122da16565b600255611f45565b6000611ef86121e9565b9050611f2a611f1b600054611c0a64e8d4a5100085611c6b90919063ffffffff16565b6001549063ffffffff6122da16565b600155600254611f40908263ffffffff6122da16565b600255505b565b6001600160a01b0381166000908152600660205260409020805415611feb576000611f928260010154610c9064e8d4a51000611c0a6001548760000154611c6b90919063ffffffff16565b6002830154909150611faa908263ffffffff6122da16565b6002830155600454611fc2908263ffffffff6122da16565b6004556001548254611fe49164e8d4a5100091611c0a9163ffffffff611c6b16565b6001830155505b5050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b6020831061206c5780518252601f19909201916020918201910161204d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146120ce576040519150601f19603f3d011682016040523d82523d6000602084013e6120d3565b606091505b509150915081801561210157508051158061210157508080602001905160208110156120fe57600080fd5b50515b611761576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b600081848411156121e15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121a657818101518382015260200161218e565b50505050905090810190601f1680156121d35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600254600554604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093610e0e939092610c90926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561225d57600080fd5b505afa158015612271573d6000803e3d6000fd5b505050506040513d602081101561228757600080fd5b50516003549063ffffffff6122da16565b6000611bb483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612334565b600082820183811015611bb4576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081836123835760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156121a657818101518382015260200161218e565b50600083858161238f57fe5b049594505050505056fe544f4d492050414952203a2020494e53554646494349454e545f4c4951554944495459544f4d4920504c4154464f524d203a2052454d4f5645204c4951554944495459204455524154494f4e204641494c544f4d492050414952203a20494e53554646494349454e545f4c49515549444954595f4d494e544544544f4d492050414952203a20494e53554646494349454e545f494e5055545f414d4f554e54544f4d492050414952203a20494e53554646494349454e545f4c49515549444954595f4255524e4544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77544f4d492050414952203a20494e53554646494349454e545f4f55545055545f414d4f554e54544f4d492050414952203a20494e53554646494349454e545f4c49515549444954595f414d4f554e54a2646970667358221220fa6185e3efc6f34df6425833a2e7d25b164b4e159383f1323ab57e0134f3fc2964736f6c63430006060033544f4d4920464143544f52593a204944454e544943414c5f414444524553534553a26469706673582212207e8c70c36d6327defd24a4f1200699d4ce08a2fdf0a2afc0052161b1a4a2461464736f6c63430006060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063bf1512d31161008c578063c9ead25811610066578063c9ead2581461020a578063d92e82e41461024c578063e5e31b1314610254578063e6a439051461027a576100ea565b8063bf1512d3146101a8578063c1dfe652146101d4578063c9c65396146101dc576100ea565b80636c42fa66116100c85780636c42fa661461014a5780636cc919c8146101705780637c7f84ee146101985780638da5cb5b146101a0576100ea565b80631e3dd18b146100ef57806354fd4d5014610128578063574f2ba314610142575b600080fd5b61010c6004803603602081101561010557600080fd5b50356102a8565b604080516001600160a01b039092168252519081900360200190f35b6101306102cf565b60408051918252519081900360200190f35b6101306102d5565b6101306004803603602081101561016057600080fd5b50356001600160a01b03166102db565b6101966004803603602081101561018657600080fd5b50356001600160a01b031661030c565b005b6101306105a5565b61010c6105ab565b61010c600480360360408110156101be57600080fd5b506001600160a01b0381351690602001356105ba565b61010c6105ef565b61010c600480360360408110156101f257600080fd5b506001600160a01b03813581169160200135166105fe565b6102386004803603604081101561022057600080fd5b506001600160a01b0381358116916020013516610b9a565b604080519115158252519081900360200190f35b61010c610d07565b6102386004803603602081101561026a57600080fd5b50356001600160a01b0316610d16565b61010c6004803603604081101561029057600080fd5b506001600160a01b0381358116916020013516610d2b565b600681815481106102b557fe5b6000918252602090912001546001600160a01b0316905081565b60005481565b60065490565b6001600160a01b03811660009081526007602052604081208054610303576000915050610307565b5490505b919050565b6003546001600160a01b0316331461036b576040805162461bcd60e51b815260206004820152601860248201527f544f4d4920464143544f52593a205045524d495353494f4e0000000000000000604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905560005b6006548110156105a157600681815481106103ad57fe5b600091825260209091200154600680546001600160a01b039092169163f8c8765e9190849081106103da57fe5b60009182526020918290200154604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692630dfe168192600480840193829003018186803b15801561043c57600080fd5b505afa158015610450573d6000803e3d6000fd5b505050506040513d602081101561046657600080fd5b5051600680548590811061047657fe5b60009182526020918290200154604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263d21220a792600480840193829003018186803b1580156104d857600080fd5b505afa1580156104ec573d6000803e3d6000fd5b505050506040513d602081101561050257600080fd5b5051600154604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292841660248401528388166044840152921660648201529051608480830192600092919082900301818387803b15801561057d57600080fd5b505af1158015610591573d6000803e3d6000fd5b5050600190920191506103969050565b5050565b60095481565b6003546001600160a01b031681565b600760205281600052604060002081815481106105d357fe5b6000918252602090912001546001600160a01b03169150829050565b6001546001600160a01b031681565b6002546040805163097bc71960e31b815290516000926001600160a01b031691634bde38c8916004808301926020929190829003018186803b15801561064357600080fd5b505afa158015610657573d6000803e3d6000fd5b505050506040513d602081101561066d57600080fd5b50516001600160a01b031633146106cb576040805162461bcd60e51b815260206004820152601860248201527f544f4d4920464143544f52593a205045524d495353494f4e0000000000000000604482015290519081900360640190fd5b816001600160a01b0316836001600160a01b0316141561071c5760405162461bcd60e51b81526004018080602001828103825260218152602001806132a26021913960400191505060405180910390fd5b60025460408051633c6202c960e21b81526001600160a01b0386811660048301529151919092169163f1880b24916024808301926020929190829003018186803b15801561076957600080fd5b505afa15801561077d573d6000803e3d6000fd5b505050506040513d602081101561079357600080fd5b50518015610816575060025460408051633c6202c960e21b81526001600160a01b0385811660048301529151919092169163f1880b24916024808301926020929190829003018186803b1580156107e957600080fd5b505afa1580156107fd573d6000803e3d6000fd5b505050506040513d602081101561081357600080fd5b50515b610867576040805162461bcd60e51b815260206004820152601660248201527f544f4d4920464143544f52593a204e4f54204c49535400000000000000000000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061088a57838561088d565b84845b90925090506001600160a01b0382166108ed576040805162461bcd60e51b815260206004820152601a60248201527f544f4d4920464143544f52593a205a45524f5f41444452455353000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615610967576040805162461bcd60e51b815260206004820152601960248201527f544f4d4920464143544f52593a20504149525f45584953545300000000000000604482015290519081900360640190fd5b60606040518060200161097990610d51565b601f1982820381018352601f909101166040526009549091506109a157805160208201206009555b6000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56001600160a01b03808216600081815260056020526040808220805460ff19166001908117909155600254905482517ff8c8765e0000000000000000000000000000000000000000000000000000000081528b871660048201528a871660248201529186166044830152909416606485015251939850909263f8c8765e92608480820193929182900301818387803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d1673ffffffffffffffffffffffffffffffffffffffff1998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b6002546040805163097bc71960e31b815290516000926001600160a01b031691634bde38c8916004808301926020929190829003018186803b158015610bdf57600080fd5b505afa158015610bf3573d6000803e3d6000fd5b505050506040513d6020811015610c0957600080fd5b50516001600160a01b03163314610c67576040805162461bcd60e51b815260206004820152601860248201527f544f4d4920464143544f52593a205045524d495353494f4e0000000000000000604482015290519081900360640190fd5b6001600160a01b0380841660009081526008602090815260408083209386168352929052205460ff16610cfe576001600160a01b038084166000818152600860209081526040808320948716808452948252808320805460ff19166001908117909155938352600782528220805493840181558252902001805473ffffffffffffffffffffffffffffffffffffffff191690911790555b50600192915050565b6002546001600160a01b031681565b60056020526000908152604090205460ff1681565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b61254380610d5f8339019056fe60806040526001600755600160155534801561001a57600080fd5b50600880546001600160a01b031916331790556125078061003c6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806370a082311161010f578063c1dfe652116100a2578063d92e82e411610071578063d92e82e41461049f578063f6b911bc146104a7578063f8c8765e146104dd578063fff6cae91461051b576101e5565b8063c1dfe6521461047f578063cf67536514610487578063d14c96411461048f578063d21220a714610497576101e5565b806396cda080116100de57806396cda080146103f7578063a87430ba1461042b578063ba9a7a561461046f578063bfc8b20814610477576101e5565b806370a082311461039b578063750142e6146103c15780638b185b35146103c95780639660c266146103ef576101e5565b806328e964e9116101875780635909c0d5116101565780635909c0d51461035d5780635a3d5493146103655780636a6278421461036d5780636c9fa59e14610393576101e5565b806328e964e9146103065780632c79db11146103455780632dd310001461034d57806354fd4d5014610355576101e5565b80630dfe1681116101c35780630dfe1681146102ca5780631485ff78146102ee578063174f57af146102f657806318160ddd146102fe576101e5565b8063022c0d9f146101ea578063026c4207146102785780630902f1ac14610292575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b509092509050610523565b005b610280610982565b60408051918252519081900360200190f35b61029a610988565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6102d26109b2565b604080516001600160a01b039092168252519081900360200190f35b6102806109c1565b6102806109c7565b610280610a75565b61032c6004803603602081101561031c57600080fd5b50356001600160a01b0316610a7b565b6040805192835260208301919091528051918290030190f35b61032c610a99565b6102d2610aad565b610280610abc565b610280610ac2565b610280610ac8565b6102806004803603602081101561038357600080fd5b50356001600160a01b0316610ace565b6102d2610dbc565b610280600480360360208110156103b157600080fd5b50356001600160a01b0316610dcb565b610280610ddd565b610280600480360360208110156103df57600080fd5b50356001600160a01b0316610de3565b610280610df5565b6102766004803603606081101561040d57600080fd5b508035906001600160a01b0360208201358116916040013516610e13565b6104516004803603602081101561044157600080fd5b50356001600160a01b0316611035565b60408051938452602084019290925282820152519081900360600190f35b610280611056565b61028061105c565b6102d2611062565b610280611071565b610280611077565b6102d261107d565b6102d261108c565b61032c600480360360608110156104bd57600080fd5b506001600160a01b0381358116916020810135909116906040013561109b565b610276600480360360808110156104f357600080fd5b506001600160a01b03813581169160208101358216916040820135811691606001351661147f565b610276611536565b6009546040805163097bc71960e31b815290516000926001600160a01b031691634bde38c8916004808301926020929190829003018186803b15801561056857600080fd5b505afa15801561057c573d6000803e3d6000fd5b505050506040513d602081101561059257600080fd5b50519050336001600160a01b038216146105eb576040805162461bcd60e51b81526020600482015260156024820152742a27a6a4902820a4a9101d102327a92124a22222a760591b604482015290519081900360640190fd5b60155460011461062b576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b60006015558515158061063e5750600085115b6106795760405162461bcd60e51b81526004018080602001828103825260268152602001806124836026913960400191505060405180910390fd5b600080610684610988565b5091509150816001600160701b0316881080156106a95750806001600160701b031687105b6106e45760405162461bcd60e51b815260040180806020018281038252602381526020018061239a6023913960400191505060405180910390fd5b600b54600c5460009182916001600160a01b0391821691908116908a1682148015906107225750806001600160a01b03168a6001600160a01b031614155b610773576040805162461bcd60e51b815260206004820152601660248201527f544f4d492050414952203a20494e56414c49445f544f00000000000000000000604482015290519081900360640190fd5b8b1561078457610784828b8e6115ce565b8a1561079557610795818b8d6115ce565b871561085057896001600160a01b0316631932ba53338e8e8d8d6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b505050505b61085a8230611768565b93506108668130611768565b9250505060008a856001600160701b0316038311610885576000610894565b8a856001600160701b03160383035b905060008a856001600160701b03160383116108b15760006108c0565b8a856001600160701b03160383035b90508b8b831515806108d25750600083115b61090d5760405162461bcd60e51b81526004018080602001828103825260258152602001806124146025913960400191505060405180910390fd5b61091986868a8a6118bb565b60408051858152602081018590528082018490526060810183905290516001600160a01b038e169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001601555505050505050505050505050565b60025481565b600d546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600b546001600160a01b031681565b60115481565b6000601554600114610a09576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b6000601555610a1733611a98565b601154909150610a2d908263ffffffff611b7216565b60118190556040805191825260208201839052805133927ff31aa2aa8628a933f70d74fb07da3f979fc08324cfd2d3d9032bbdbf64da0f5e92908290030190a2600160155590565b60125481565b6001600160a01b031660009081526006602052604081205490549091565b600080610aa533611bbb565b924392509050565b6008546001600160a01b031681565b60075481565b600e5481565b600f5481565b600080600960009054906101000a90046001600160a01b03166001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1f57600080fd5b505afa158015610b33573d6000803e3d6000fd5b505050506040513d6020811015610b4957600080fd5b50519050336001600160a01b03821614610ba2576040805162461bcd60e51b81526020600482015260156024820152742a27a6a4902820a4a9101d102327a92124a22222a760591b604482015290519081900360640190fd5b601554600114610be2576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b6000601581905580610bf2610988565b50600b549193509150600090610c11906001600160a01b031630611768565b600c54909150600090610c2d906001600160a01b031630611768565b90506000610c4a836001600160701b03871663ffffffff611b7216565b90506000610c67836001600160701b03871663ffffffff611b7216565b60125490915080610cb057610c9c6103e8610c90610c8b868663ffffffff611c6b16565b611cc4565b9063ffffffff611b7216565b9850610cab60006103e8611d15565b610cff565b610cfc6001600160701b038816610ccd858463ffffffff611c6b16565b81610cd457fe5b046001600160701b038816610cef858563ffffffff611c6b16565b81610cf657fe5b04611dac565b98505b60008911610d3e5760405162461bcd60e51b81526004018080602001828103825260298152602001806123eb6029913960400191505060405180910390fd5b610d488a8a611d15565b6001600160a01b038a166000908152601460205260409020439055610d6f858589896118bb565b6040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a25050600160155550949695505050505050565b6005546001600160a01b031681565b60136020526000908152604090205481565b60105481565b60146020526000908152604090205481565b600a54600090610e0e906001600160a01b031630611768565b905090565b6009546040805163097bc71960e31b815290516000926001600160a01b031691634bde38c8916004808301926020929190829003018186803b158015610e5857600080fd5b505afa158015610e6c573d6000803e3d6000fd5b505050506040513d6020811015610e8257600080fd5b50519050336001600160a01b03821614610edb576040805162461bcd60e51b81526020600482015260156024820152742a27a6a4902820a4a9101d102327a92124a22222a760591b604482015290519081900360640190fd5b831580610ef95750816001600160a01b0316836001600160a01b0316145b15610f035761102f565b600080610f0e610988565b50600b5491935091506001600160a01b03858116911614801590610f405750600c546001600160a01b03858116911614155b610f91576040805162461bcd60e51b815260206004820152601660248201527f544f4d492050414952203a20494e56414c49445f544f00000000000000000000604482015290519081900360640190fd5b610f9c8585886115ce565b600b54600090610fb5906001600160a01b031630611768565b600c54909150600090610fd1906001600160a01b031630611768565b9050610fdf828286866118bb565b856001600160a01b0316876001600160a01b03167fd58eef465bb0100d5e79f7940ef7ec9eafeff04fa088db4388968231fffaf07d8a6040518082815260200191505060405180910390a3505050505b50505050565b60066020526000908152604090208054600182015460029092015490919083565b6103e881565b60015490565b600a546001600160a01b031681565b60045481565b60035481565b600c546001600160a01b031681565b6009546001600160a01b031681565b6000806000600960009054906101000a90046001600160a01b03166001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d602081101561111857600080fd5b50519050336001600160a01b03821614611171576040805162461bcd60e51b81526020600482015260156024820152742a27a6a4902820a4a9101d102327a92124a22222a760591b604482015290519081900360640190fd5b6015546001146111b1576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b6000601555600954604080517fc199de320000000000000000000000000000000000000000000000000000000081527f52454d4f56455f4c49515549444954595f4455524154494f4e00000000000000600482015290516001600160a01b039092169163c199de3291602480820192602092909190829003018186803b15801561123a57600080fd5b505afa15801561124e573d6000803e3d6000fd5b505050506040513d602081101561126457600080fd5b50516001600160a01b038716600090815260146020526040902054014310156112be5760405162461bcd60e51b815260040180806020018281038252602e8152602001806123bd602e913960400191505060405180910390fd5b6000806112c9610988565b50600b54600c549294509092506001600160a01b03908116911660006112ef8330611768565b905060006112fd8330611768565b6001600160a01b038d166000908152601360205260409020549091508a11156113575760405162461bcd60e51b81526004018080602001828103825260298152602001806124a96029913960400191505060405180910390fd5b6012548061136b8c8563ffffffff611c6b16565b8161137257fe5b049950806113868c8463ffffffff611c6b16565b8161138d57fe5b04985060008a1180156113a05750600089115b6113db5760405162461bcd60e51b81526004018080602001828103825260298152602001806124396029913960400191505060405180910390fd5b6113e58d8c611dc2565b6113f0858d8c6115ce565b6113fb848d8b6115ce565b6114058530611768565b92506114118430611768565b915061141f838389896118bb565b604080518b8152602081018b905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a350505050505050600160158190555050935093915050565b6008546001600160a01b031633146114d6576040805162461bcd60e51b81526020600482015260156024820152742a27a6a4902820a4a9101d102327a92124a22222a760591b604482015290519081900360640190fd5b600b805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0387811691909117909255600c80548216868416179055600980548216858416179055600a8054909116838316179081905561102f9116611e5f565b601554600114611576576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b6000601555600b546115c790611595906001600160a01b031630611768565b600c546115ab906001600160a01b031630611768565b600d546001600160701b0380821691600160701b9004166118bb565b6001601555565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b6020831061167b5780518252601f19909201916020918201910161165c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146116dd576040519150601f19603f3d011682016040523d82523d6000602084013e6116e2565b606091505b5091509150818015611710575080511580611710575080806020019051602081101561170d57600080fd5b50515b611761576040805162461bcd60e51b815260206004820152601b60248201527f544f4d492050414952203a205452414e534645525f4641494c45440000000000604482015290519081900360640190fd5b5050505050565b600a546000906001600160a01b03848116911614801561179057506001600160a01b03821630145b1561183057611829601154846001600160a01b03166370a08231856040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d602081101561181b57600080fd5b50519063ffffffff611b7216565b90506118b5565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561188657600080fd5b505afa15801561189a573d6000803e3d6000fd5b505050506040513d60208110156118b057600080fd5b505190505b92915050565b6001600160701b0384118015906118d957506001600160701b038311155b61192a576040805162461bcd60e51b815260206004820152601460248201527f544f4d492050414952203a204f564552464c4f57000000000000000000000000604482015290519081900360640190fd5b600d5463ffffffff42811691600160e01b9004811682039081161580159061195a57506001600160701b03841615155b801561196e57506001600160701b03831615155b156119df578063ffffffff1661199c8561198786611e8e565b6001600160e01b03169063ffffffff611ea016565b600e80546001600160e01b03929092169290920201905563ffffffff81166119c78461198787611e8e565b600f80546001600160e01b0392909216929092020190555b600d80546dffffffffffffffffffffffffffff19166001600160701b03888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6000611aa2611ec5565b611aab82611f47565b6001600160a01b038216600090815260066020526040902060020154611b18576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5448494e4720544f204d494e540000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038083166000908152600660205260409020600201546005549091611b4691163383611fef565b6001600160a01b038316600090815260066020526040812060020155600380548201905590505b919050565b6000611bb483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612152565b9392505050565b6001600160a01b0381166000908152600660205260408120600154825415611c27576000611be76121e9565b9050611c23611c16600054611c0a64e8d4a5100085611c6b90919063ffffffff16565b9063ffffffff61229816565b839063ffffffff6122da16565b9150505b611c638260010154610c908460020154611c5764e8d4a51000611c0a878960000154611c6b90919063ffffffff16565b9063ffffffff6122da16565b949350505050565b600082611c7a575060006118b5565b82820282848281611c8757fe5b0414611bb45760405162461bcd60e51b81526004018080602001828103825260218152602001806124626021913960400191505060405180910390fd5b60006003821115611d07575080600160028204015b81811015611d0157809150600281828581611cf057fe5b040181611cf957fe5b049050611cd9565b50611b6d565b8115611b6d57506001919050565b601254611d28908263ffffffff6122da16565b6012556001600160a01b038216600090815260136020526040902054611d54908263ffffffff6122da16565b6001600160a01b03831660008181526013602090815260408083209490945583518581529351929391927fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f89281900390910190a35050565b6000818310611dbb5781611bb4565b5090919050565b6001600160a01b038216600090815260136020526040902054611deb908263ffffffff611b7216565b6001600160a01b038316600090815260136020526040902055601254611e17908263ffffffff611b7216565b6012556040805182815290516000916001600160a01b038516917fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b94539181900360200190a35050565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b03841681611ebd57fe5b049392505050565b600054611eee57611ee6611ed76121e9565b6002549063ffffffff6122da16565b600255611f45565b6000611ef86121e9565b9050611f2a611f1b600054611c0a64e8d4a5100085611c6b90919063ffffffff16565b6001549063ffffffff6122da16565b600155600254611f40908263ffffffff6122da16565b600255505b565b6001600160a01b0381166000908152600660205260409020805415611feb576000611f928260010154610c9064e8d4a51000611c0a6001548760000154611c6b90919063ffffffff16565b6002830154909150611faa908263ffffffff6122da16565b6002830155600454611fc2908263ffffffff6122da16565b6004556001548254611fe49164e8d4a5100091611c0a9163ffffffff611c6b16565b6001830155505b5050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b6020831061206c5780518252601f19909201916020918201910161204d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146120ce576040519150601f19603f3d011682016040523d82523d6000602084013e6120d3565b606091505b509150915081801561210157508051158061210157508080602001905160208110156120fe57600080fd5b50515b611761576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b600081848411156121e15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121a657818101518382015260200161218e565b50505050905090810190601f1680156121d35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600254600554604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093610e0e939092610c90926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561225d57600080fd5b505afa158015612271573d6000803e3d6000fd5b505050506040513d602081101561228757600080fd5b50516003549063ffffffff6122da16565b6000611bb483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612334565b600082820183811015611bb4576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081836123835760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156121a657818101518382015260200161218e565b50600083858161238f57fe5b049594505050505056fe544f4d492050414952203a2020494e53554646494349454e545f4c4951554944495459544f4d4920504c4154464f524d203a2052454d4f5645204c4951554944495459204455524154494f4e204641494c544f4d492050414952203a20494e53554646494349454e545f4c49515549444954595f4d494e544544544f4d492050414952203a20494e53554646494349454e545f494e5055545f414d4f554e54544f4d492050414952203a20494e53554646494349454e545f4c49515549444954595f4255524e4544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77544f4d492050414952203a20494e53554646494349454e545f4f55545055545f414d4f554e54544f4d492050414952203a20494e53554646494349454e545f4c49515549444954595f414d4f554e54a2646970667358221220fa6185e3efc6f34df6425833a2e7d25b164b4e159383f1323ab57e0134f3fc2964736f6c63430006060033544f4d4920464143544f52593a204944454e544943414c5f414444524553534553a26469706673582212207e8c70c36d6327defd24a4f1200699d4ce08a2fdf0a2afc0052161b1a4a2461464736f6c63430006060033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3773,
        "contract": "contracts/TomiFactory.sol:TomiFactory",
        "label": "version",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3775,
        "contract": "contracts/TomiFactory.sol:TomiFactory",
        "label": "TOMI",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3777,
        "contract": "contracts/TomiFactory.sol:TomiFactory",
        "label": "CONFIG",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3779,
        "contract": "contracts/TomiFactory.sol:TomiFactory",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3785,
        "contract": "contracts/TomiFactory.sol:TomiFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 3789,
        "contract": "contracts/TomiFactory.sol:TomiFactory",
        "label": "isPair",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3792,
        "contract": "contracts/TomiFactory.sol:TomiFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3797,
        "contract": "contracts/TomiFactory.sol:TomiFactory",
        "label": "playerPairs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3803,
        "contract": "contracts/TomiFactory.sol:TomiFactory",
        "label": "isAddPlayerPair",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3805,
        "contract": "contracts/TomiFactory.sol:TomiFactory",
        "label": "contractCodeHash",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}