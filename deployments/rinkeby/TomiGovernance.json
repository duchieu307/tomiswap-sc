{
  "address": "0x5A3d0dD694cC07a44afD0135c60aBa222908d607",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tgas",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_VOTE_DURATION",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_FREEZE_DURATION",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_REVENUE_VOTE_DURATION",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_REVENUE_FREEZE_DURATION",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ballot",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "name": "ConfigAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ballotAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "ConfigBallotCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refund",
          "type": "uint256"
        }
      ],
      "name": "ListTokenAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVaue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ProposalerRewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ballot",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RewardCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RewardReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RewardTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "TokenAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ballotAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "TokenBallotCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenListed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FREEZE_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVENUE_FREEZE_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVENUE_VOTE_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUPER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "T_CONFIG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "T_LIST_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "T_REVENUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "T_SNAPSHOT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "T_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTE_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "applyTokenOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ballot",
          "type": "address"
        }
      ],
      "name": "audit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ballot",
          "type": "address"
        }
      ],
      "name": "auditConfig",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ballot",
          "type": "address"
        }
      ],
      "name": "auditListToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ballot",
          "type": "address"
        }
      ],
      "name": "auditToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ballotCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ballotFactoryAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ballotOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ballotRevenueCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ballotTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ballots",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "_durations",
          "type": "uint256[4]"
        }
      ],
      "name": "changeProposalDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ballot",
          "type": "address"
        }
      ],
      "name": "collectReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "configBallots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_subject",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "createConfigBallot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_subject",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "createRevenueBallot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_subject",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "createSnapshotBallot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_subject",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "createTokenBallot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "getConfigValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ballot",
          "type": "address"
        }
      ],
      "name": "getRewardForRevenueProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_configContractAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ballotFactoryAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_subject",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "listToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ballot",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateral",
          "type": "uint256"
        }
      ],
      "name": "participate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "receiveReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "revenueBallots",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBallots",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_new",
          "type": "address"
        }
      ],
      "name": "updateTgasGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeApproveReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ballot",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_proposal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateral",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ac863af03f330cfeedf595173825cc918796a8bd1c24a1e53904b1ef84ad04c",
  "receipt": {
    "to": null,
    "from": "0x9ef6eBF5A3E71d7f89eAdb94c8EA4293E64E4B4e",
    "contractAddress": "0x5A3d0dD694cC07a44afD0135c60aBa222908d607",
    "transactionIndex": 12,
    "gasUsed": "5508730",
    "logsBloom": "0x00000004000000000800000000000000080040000000000000000400000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000020000400000000000004800000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000008000000000000100000000000020000000000000000000000000000000000002000000010000000000000000000000",
    "blockHash": "0xf0e932254b34bc8c5a280f03870e2a2f175b68dcda5a14f56f78ff287de0ef83",
    "transactionHash": "0x2ac863af03f330cfeedf595173825cc918796a8bd1c24a1e53904b1ef84ad04c",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 9163618,
        "transactionHash": "0x2ac863af03f330cfeedf595173825cc918796a8bd1c24a1e53904b1ef84ad04c",
        "address": "0x5A3d0dD694cC07a44afD0135c60aBa222908d607",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689",
          "0x0000000000000000000000009ef6ebf5a3e71d7f89eadb94c8ea4293e64e4b4e",
          "0x0000000000000000000000009ef6ebf5a3e71d7f89eadb94c8ea4293e64e4b4e"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0xf0e932254b34bc8c5a280f03870e2a2f175b68dcda5a14f56f78ff287de0ef83"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 9163618,
        "transactionHash": "0x2ac863af03f330cfeedf595173825cc918796a8bd1c24a1e53904b1ef84ad04c",
        "address": "0x5A3d0dD694cC07a44afD0135c60aBa222908d607",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009ef6ebf5a3e71d7f89eadb94c8ea4293e64e4b4e",
          "0x0000000000000000000000009ef6ebf5a3e71d7f89eadb94c8ea4293e64e4b4e"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0xf0e932254b34bc8c5a280f03870e2a2f175b68dcda5a14f56f78ff287de0ef83"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 9163618,
        "transactionHash": "0x2ac863af03f330cfeedf595173825cc918796a8bd1c24a1e53904b1ef84ad04c",
        "address": "0x5A3d0dD694cC07a44afD0135c60aBa222908d607",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0xf0e932254b34bc8c5a280f03870e2a2f175b68dcda5a14f56f78ff287de0ef83"
      }
    ],
    "blockNumber": 9163618,
    "cumulativeGasUsed": "8467686",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE774238f5eF7EA239BE157D4adb82bc753b36836",
    "300",
    "300",
    "300",
    "300"
  ],
  "solcInputHash": "f36eb242fadd798d11ee81fd592eb5f4",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tgas\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_VOTE_DURATION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_FREEZE_DURATION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_REVENUE_VOTE_DURATION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_REVENUE_FREEZE_DURATION\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ballot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"ConfigAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ballotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ConfigBallotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"ListTokenAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVaue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ProposalerRewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ballot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"TokenAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ballotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"TokenBallotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FREEZE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVENUE_FREEZE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVENUE_VOTE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_CONFIG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_LIST_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_REVENUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_SNAPSHOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"applyTokenOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"audit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"auditConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"auditListToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"auditToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ballotCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ballotFactoryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ballotOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ballotRevenueCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ballotTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_durations\",\"type\":\"uint256[4]\"}],\"name\":\"changeProposalDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"collectReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"configBallots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"createConfigBallot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"createRevenueBallot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"createSnapshotBallot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"createTokenBallot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getConfigValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"getRewardForRevenueProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_configContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ballotFactoryAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"}],\"name\":\"participate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"receiveReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"revenueBallots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBallots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"updateTgasGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeApproveReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/TomiGovernance.sol\":\"TomiGovernance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37ff88aa5ca8f533e31b9e1cb5354816b15bb7d41c904ea1c8f5dd5a78d6da25\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\"},\"contracts/TomiGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport './interfaces/ITomiConfig.sol';\\nimport './interfaces/ITomiBallotFactory.sol';\\nimport './interfaces/ITomiBallot.sol';\\nimport './interfaces/ITomiBallotRevenue.sol';\\nimport './interfaces/ITgas.sol';\\nimport './interfaces/ITokenRegistry.sol';\\nimport './libraries/ConfigNames.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './modules/TgasStaking.sol';\\nimport './modules/Ownable.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract TomiGovernance is TgasStaking, Ownable, AccessControl {\\n    using SafeMath for uint;\\n\\n    uint public version = 1;\\n    address public configAddr;\\n    address public ballotFactoryAddr;\\n    address public rewardAddr;\\n\\n    uint public T_CONFIG = 1;\\n    uint public T_LIST_TOKEN = 2;\\n    uint public T_TOKEN = 3;\\n    uint public T_SNAPSHOT = 4;\\n    uint public T_REVENUE = 5;\\n\\n    uint public VOTE_DURATION;\\n    uint public FREEZE_DURATION;\\n    uint public REVENUE_VOTE_DURATION;\\n    uint public REVENUE_FREEZE_DURATION;\\n\\n    bytes32 public constant SUPER_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"SUPER_ADMIN_ROLE\\\"));\\n    bytes32 REVENUE_PROPOSAL = bytes32('REVENUE_PROPOSAL');\\n    bytes32 SNAPSHOT_PROPOSAL = bytes32('SNAPSHOT_PROPOSAL');\\n\\n    mapping(address => uint) public ballotTypes;\\n    mapping(address => bytes32) public configBallots;\\n    mapping(address => address) public tokenBallots;\\n    mapping(address => uint) public rewardOf;\\n    mapping(address => uint) public ballotOf;\\n    mapping(address => mapping(address => uint)) public applyTokenOf;\\n    mapping(address => mapping(address => bool)) public collectUsers;\\n    mapping(address => address) public tokenUsers;\\n\\n    address[] public ballots;\\n    address[] public revenueBallots;\\n\\n    event ConfigAudited(bytes32 name, address indexed ballot, uint proposal);\\n    event ConfigBallotCreated(address indexed proposer, bytes32 name, uint value, address indexed ballotAddr, uint reward);\\n    event TokenBallotCreated(address indexed proposer, address indexed token, uint value, address indexed ballotAddr, uint reward);\\n    event ProposalerRewardRateUpdated(uint oldVaue, uint newValue);\\n    event RewardTransfered(address indexed from, address indexed to, uint value);\\n    event TokenListed(address user, address token, uint amount);\\n    event ListTokenAudited(address user, address token, uint status, uint burn, uint reward, uint refund);\\n    event TokenAudited(address user, address token, uint status, bool result);\\n    event RewardCollected(address indexed user, address indexed ballot, uint value);\\n    event RewardReceived(address indexed user, uint value);\\n\\n    modifier onlyRewarder() {\\n        require(msg.sender == rewardAddr, 'TomiGovernance: ONLY_REWARDER');\\n        _;\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(hasRole(role, msg.sender), \\\"TomiGovernance: sender not allowed to do!\\\");\\n        _;\\n    }\\n\\n    constructor (\\n        address _tgas, \\n        uint _VOTE_DURATION,\\n        uint _FREEZE_DURATION,\\n        uint _REVENUE_VOTE_DURATION,\\n        uint _REVENUE_FREEZE_DURATION\\n    ) TgasStaking(_tgas) public {\\n        _setupRole(SUPER_ADMIN_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(DEFAULT_ADMIN_ROLE, SUPER_ADMIN_ROLE);\\n\\n        VOTE_DURATION = _VOTE_DURATION;\\n        FREEZE_DURATION = _FREEZE_DURATION;\\n        REVENUE_VOTE_DURATION = _REVENUE_VOTE_DURATION;\\n        REVENUE_FREEZE_DURATION = _REVENUE_FREEZE_DURATION;\\n    }\\n\\n    // called after deployment\\n    function initialize(address _rewardAddr, address _configContractAddr, address _ballotFactoryAddr) external onlyOwner {\\n        require(_rewardAddr != address(0) && _configContractAddr != address(0) && _ballotFactoryAddr != address(0), 'TomiGovernance: INPUT_ADDRESS_IS_ZERO');\\n\\n        rewardAddr = _rewardAddr;\\n        configAddr = _configContractAddr;\\n        ballotFactoryAddr = _ballotFactoryAddr;\\n        lockTime = getConfigValue(ConfigNames.UNSTAKE_DURATION);\\n    }\\n\\n    function changeProposalDuration(uint[4] calldata _durations) external onlyRole(SUPER_ADMIN_ROLE) {\\n        VOTE_DURATION = _durations[0];\\n        FREEZE_DURATION = _durations[1];\\n        REVENUE_VOTE_DURATION = _durations[2];\\n        REVENUE_FREEZE_DURATION = _durations[3];\\n    }\\n\\n    // function changeProposalVoteDuration(uint _newDuration) external onlyRole(SUPER_ADMIN_ROLE) {\\n    //     require(_newDuration != VOTE_DURATION, \\\"TomiGovernance::Vote duration has not changed\\\");\\n    //     VOTE_DURATION = _newDuration;\\n    // }\\n\\n    // function changeProposalFreezeDuration(uint _newDuration) external onlyRole(SUPER_ADMIN_ROLE) {\\n    //     require(_newDuration != FREEZE_DURATION, \\\"TomiGovernance::Freeze duration has not changed\\\");\\n    //     FREEZE_DURATION = _newDuration;\\n    // }\\n\\n    // function changeRevenueProposalVoteDuration(uint _newDuration) external onlyRole(SUPER_ADMIN_ROLE) {\\n    //     require(_newDuration != REVENUE_VOTE_DURATION, \\\"TomiGovernance::Vote duration has not changed\\\");\\n    //     REVENUE_VOTE_DURATION = _newDuration;\\n    // }\\n\\n    // function changeRevenueProposalFreezeDuration(uint _newDuration) external onlyRole(SUPER_ADMIN_ROLE) {\\n    //     require(_newDuration != REVENUE_FREEZE_DURATION, \\\"TomiGovernance::Freeze duration has not changed\\\");\\n    //     REVENUE_FREEZE_DURATION = _newDuration;\\n    // }\\n\\n    function vote(address _ballot, uint256 _proposal, uint256 _collateral) external {\\n        require(configBallots[_ballot] != REVENUE_PROPOSAL, \\\"TomiGovernance::Fail due to wrong ballot\\\");\\n        uint256 collateralRemain = balanceOf[msg.sender]; \\n\\n        if (_collateral > collateralRemain) {\\n            uint256 collateralMore = _collateral.sub(collateralRemain);\\n            _transferForBallot(collateralMore, true, ITomiBallot(_ballot).executionTime());\\n        }\\n        \\n        ITomiBallot(_ballot).voteByGovernor(msg.sender, _proposal);\\n\\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_collateral);\\n        rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_collateral); \\n    }\\n\\n    function participate(address _ballot, uint256 _collateral) external {\\n        require(configBallots[_ballot] == REVENUE_PROPOSAL, \\\"TomiGovernance::Fail due to wrong ballot\\\");\\n        \\n        uint256 collateralRemain = balanceOf[msg.sender];\\n        uint256 collateralMore = _collateral.sub(collateralRemain);\\n\\n        _transferForBallot(collateralMore, true, ITomiBallot(_ballot).executionTime());\\n        ITomiBallotRevenue(_ballot).participateByGovernor(msg.sender);\\n    }\\n\\n    function audit(address _ballot) external returns (bool) {\\n        if(ballotTypes[_ballot] == T_CONFIG) {\\n            return auditConfig(_ballot);\\n        } else if (ballotTypes[_ballot] == T_LIST_TOKEN) {\\n            return auditListToken(_ballot);\\n        } else if (ballotTypes[_ballot] == T_TOKEN) {\\n            return auditToken(_ballot);\\n        } else {\\n            revert('TomiGovernance: UNKNOWN_TYPE');\\n        }\\n    }\\n\\n    function auditConfig(address _ballot) public returns (bool) {\\n        bool result = ITomiBallot(_ballot).end();\\n        require(result, 'TomiGovernance: NO_PASS');\\n        uint value = ITomiBallot(_ballot).value();\\n        bytes32 name = configBallots[_ballot];\\n        result = ITomiConfig(configAddr).changeConfigValue(name, value);\\n        if (name == ConfigNames.UNSTAKE_DURATION) {\\n            lockTime = value;\\n        } else if (name == ConfigNames.PRODUCE_TGAS_RATE) {\\n            _changeAmountPerBlock(value);\\n        }\\n        emit ConfigAudited(name, _ballot, value);\\n        return result;\\n    }\\n\\n    function auditListToken(address _ballot) public returns (bool) {\\n        bool result = ITomiBallot(_ballot).end();\\n        address token = tokenBallots[_ballot];\\n        address user = tokenUsers[token];\\n        require(ITokenRegistry(configAddr).tokenStatus(token) == ITokenRegistry(configAddr).REGISTERED(), 'TomiGovernance: AUDITED');\\n        uint status = result ? ITokenRegistry(configAddr).PENDING() : ITokenRegistry(configAddr).CLOSED();\\n\\t    uint amount = applyTokenOf[user][token];\\n        (uint burnAmount, uint rewardAmount, uint refundAmount) = (0, 0, 0);\\n        if (result) {\\n            burnAmount = amount * getConfigValue(ConfigNames.LIST_TOKEN_SUCCESS_BURN_PRECENT) / ITomiConfig(configAddr).PERCENT_DENOMINATOR();\\n            rewardAmount = amount - burnAmount;\\n            if (burnAmount > 0) {\\n                TransferHelper.safeTransfer(baseToken, address(0), burnAmount);\\n                totalSupply = totalSupply.sub(burnAmount);\\n            }\\n            if (rewardAmount > 0) {\\n                rewardOf[rewardAddr] = rewardOf[rewardAddr].add(rewardAmount);\\n                ballotOf[_ballot] = ballotOf[_ballot].add(rewardAmount);\\n                _rewardTransfer(rewardAddr, _ballot, rewardAmount);\\n            }\\n            ITokenRegistry(configAddr).publishToken(token);\\n        } else {\\n            burnAmount = amount * getConfigValue(ConfigNames.LIST_TOKEN_FAILURE_BURN_PRECENT) / ITomiConfig(configAddr).PERCENT_DENOMINATOR();\\n            refundAmount = amount - burnAmount;\\n            if (burnAmount > 0) TransferHelper.safeTransfer(baseToken, address(0), burnAmount);\\n            if (refundAmount > 0) TransferHelper.safeTransfer(baseToken, user, refundAmount);\\n            totalSupply = totalSupply.sub(amount);\\n            ITokenRegistry(configAddr).updateToken(token, status);\\n        }\\n\\t    emit ListTokenAudited(user, token, status, burnAmount, rewardAmount, refundAmount);\\n        return result;\\n    }\\n\\n    function auditToken(address _ballot) public returns (bool) {\\n        bool result = ITomiBallot(_ballot).end();\\n        uint status = ITomiBallot(_ballot).value();\\n        address token = tokenBallots[_ballot];\\n        address user = tokenUsers[token];\\n        require(ITokenRegistry(configAddr).tokenStatus(token) != status, 'TomiGovernance: TOKEN_STATUS_NO_CHANGE');\\n        if (result) {\\n            ITokenRegistry(configAddr).updateToken(token, status);\\n        } else {\\n            status = ITokenRegistry(configAddr).tokenStatus(token);\\n        }\\n\\t    emit TokenAudited(user, token, status, result);\\n        return result;\\n    }\\n\\n    function getConfigValue(bytes32 _name) public view returns (uint) {\\n        return ITomiConfig(configAddr).getConfigValue(_name);\\n    }\\n\\n    function _createProposalPrecondition(uint _amount, uint _executionTime) private {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\\n            require(_amount >= getConfigValue(ConfigNames.PROPOSAL_TGAS_AMOUNT), \\\"TomiGovernance: NOT_ENOUGH_AMOUNT_TO_PROPOSAL\\\");\\n            \\n            uint256 collateralRemain = balanceOf[msg.sender];\\n\\n            if (_amount > collateralRemain) {\\n                uint256 collateralMore = _amount.sub(collateralRemain);\\n                _transferForBallot(collateralMore, true, _executionTime);\\n            } \\n\\n            collateralRemain = balanceOf[msg.sender];\\n            \\n            require(collateralRemain >= getConfigValue(ConfigNames.PROPOSAL_TGAS_AMOUNT), \\\"TomiGovernance: COLLATERAL_NOT_ENOUGH_AMOUNT_TO_PROPOSAL\\\");\\n            balanceOf[msg.sender] = collateralRemain.sub(_amount);\\n        }\\n    }\\n\\n    function createRevenueBallot(\\n        string calldata _subject, \\n        string calldata _content\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (address) {\\n        uint endTime = block.timestamp.add(REVENUE_VOTE_DURATION);\\n        uint executionTime = endTime.add(REVENUE_FREEZE_DURATION);\\n\\n        address ballotAddr = ITomiBallotFactory(ballotFactoryAddr).createShareRevenue(msg.sender, endTime, executionTime, _subject, _content);\\n        configBallots[ballotAddr] = REVENUE_PROPOSAL;\\n        uint reward = _createdBallot(ballotAddr, T_REVENUE);\\n        emit ConfigBallotCreated(msg.sender, REVENUE_PROPOSAL, 0, ballotAddr, reward);\\n        return ballotAddr;\\n    }\\n\\n    function createSnapshotBallot(\\n        uint _amount, \\n        string calldata _subject, \\n        string calldata _content\\n    ) external returns (address) {\\n        uint endTime = block.timestamp.add(VOTE_DURATION);\\n        uint executionTime = endTime.add(FREEZE_DURATION);\\n\\n        _createProposalPrecondition(_amount, executionTime);\\n\\n        address ballotAddr = ITomiBallotFactory(ballotFactoryAddr).create(msg.sender, 0, endTime, executionTime, _subject, _content);\\n        \\n        configBallots[ballotAddr] = SNAPSHOT_PROPOSAL;\\n        rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\\n\\n        uint reward = _createdBallot(ballotAddr, T_SNAPSHOT);\\n        emit ConfigBallotCreated(msg.sender, SNAPSHOT_PROPOSAL, 0, ballotAddr, reward);\\n        return ballotAddr;\\n    }\\n\\n    function createConfigBallot(bytes32 _name, uint _value, uint _amount, string calldata _subject, string calldata _content) external returns (address) {\\n        require(_value >= 0, 'TomiGovernance: INVALID_PARAMTERS');\\n        { // avoids stack too deep errors\\n        (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable) = ITomiConfig(configAddr).getConfig(_name);\\n        require(enable == 1, \\\"TomiGovernance: CONFIG_DISABLE\\\");\\n        require(_value >= minValue && _value <= maxValue, \\\"TomiGovernance: OUTSIDE\\\");\\n        uint span = _value >= value? (_value - value) : (value - _value);\\n        require(maxSpan >= span, \\\"TomiGovernance: OVERSTEP\\\");\\n        }\\n\\n        uint endTime = block.timestamp.add(VOTE_DURATION);\\n        uint executionTime = endTime.add(FREEZE_DURATION);\\n\\n        _createProposalPrecondition(_amount, executionTime);\\n        \\n        address ballotAddr = ITomiBallotFactory(ballotFactoryAddr).create(msg.sender, _value, endTime, executionTime, _subject, _content);\\n        \\n        configBallots[ballotAddr] = _name;\\n        rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\\n\\n        uint reward = _createdBallot(ballotAddr, T_CONFIG);\\n        emit ConfigBallotCreated(msg.sender, _name, _value, ballotAddr, reward);\\n        return ballotAddr;\\n    }\\n\\n    function createTokenBallot(address _token, uint _value, uint _amount, string calldata _subject, string calldata _content) external returns (address) {\\n        require(!_isDefaultToken(_token), 'TomiGovernance: DEFAULT_LIST_TOKENS_PROPOSAL_DENY');\\n        uint status = ITokenRegistry(configAddr).tokenStatus(_token);\\n        require(status == ITokenRegistry(configAddr).PENDING(), 'TomiGovernance: ONLY_ALLOW_PENDING');\\n        require(_value == ITokenRegistry(configAddr).OPENED() || _value == ITokenRegistry(configAddr).CLOSED(), 'TomiGovernance: INVALID_STATUS');\\n        require(status != _value, 'TomiGovernance: STATUS_NO_CHANGE');\\n\\n        uint endTime = block.timestamp.add(VOTE_DURATION);\\n        uint executionTime = endTime.add(FREEZE_DURATION);\\n\\n        _createProposalPrecondition(_amount, executionTime);\\n\\n        address ballotAddr = _createTokenBallot(T_TOKEN, _token, _value, _subject, _content, endTime, executionTime);\\n        rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\\n        return ballotAddr;\\n    }\\n\\n\\tfunction listToken(address _token, uint _amount, string calldata _subject, string calldata _content) external returns (address) {\\n        uint status = ITokenRegistry(configAddr).tokenStatus(_token);\\n        require(status == ITokenRegistry(configAddr).NONE() || status == ITokenRegistry(configAddr).CLOSED(), 'TomiGovernance: LISTED');\\n\\t    // require(_amount >= getConfigValue(ConfigNames.LIST_TGAS_AMOUNT), \\\"TomiGovernance: NOT_ENOUGH_AMOUNT_TO_LIST\\\");\\n\\t    tokenUsers[_token] = msg.sender;\\n\\n        uint endTime = block.timestamp.add(VOTE_DURATION);\\n        uint executionTime = endTime.add(FREEZE_DURATION);\\n\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\\n            require(_amount >= getConfigValue(ConfigNames.PROPOSAL_TGAS_AMOUNT), \\\"TomiGovernance: NOT_ENOUGH_AMOUNT_TO_PROPOSAL\\\");\\n            uint256 collateralRemain = balanceOf[msg.sender]; \\n            uint256 collateralMore = _amount.sub(collateralRemain);\\n            applyTokenOf[msg.sender][_token] = _transferForBallot(collateralMore, true, executionTime);\\n            collateralRemain = balanceOf[msg.sender];\\n            require(collateralRemain >= getConfigValue(ConfigNames.PROPOSAL_TGAS_AMOUNT), \\\"TomiGovernance: COLLATERAL_NOT_ENOUGH_AMOUNT_TO_PROPOSAL\\\");\\n            balanceOf[msg.sender] = collateralRemain.sub(_amount);\\n        }\\n\\n\\t    ITokenRegistry(configAddr).registryToken(_token);\\n        address ballotAddr = _createTokenBallot(T_LIST_TOKEN, _token, ITokenRegistry(configAddr).PENDING(), _subject, _content, endTime, executionTime);\\n        rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\\n        emit TokenListed(msg.sender, _token, _amount);\\n        return ballotAddr;\\n\\t}\\n\\n    function _createTokenBallot(uint _type, address _token, uint _value, string memory _subject, string memory _content, uint _endTime, uint _executionTime) private returns (address) {\\n        address ballotAddr = ITomiBallotFactory(ballotFactoryAddr).create(msg.sender, _value, _endTime, _executionTime, _subject, _content);\\n        \\n        uint reward = _createdBallot(ballotAddr, _type);\\n        ballotOf[ballotAddr] = reward;\\n        tokenBallots[ballotAddr] = _token;\\n        emit TokenBallotCreated(msg.sender, _token, _value, ballotAddr, reward);\\n        return ballotAddr;\\n    }\\n\\n    function collectReward(address _ballot) external returns (uint) {\\n        require(block.timestamp >= ITomiBallot(_ballot).endTime(), \\\"TomiGovernance: NOT_YET_ENDED\\\");\\n        require(!collectUsers[_ballot][msg.sender], 'TomiGovernance: REWARD_COLLECTED');\\n        require(configBallots[_ballot] == REVENUE_PROPOSAL, \\\"TomiGovernance::Fail due to wrong ballot\\\");\\n        \\n        uint amount = getRewardForRevenueProposal(_ballot);\\n        _rewardTransfer(_ballot, msg.sender, amount);\\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\\n        stakingSupply = stakingSupply.add(amount);\\n        rewardOf[msg.sender] = rewardOf[msg.sender].sub(amount);\\n        collectUsers[_ballot][msg.sender] = true;\\n       \\n        emit RewardCollected(msg.sender, _ballot, amount);\\n    }\\n\\n    // function getReward(address _ballot) public view returns (uint) {\\n    //     if (block.timestamp < ITomiBallot(_ballot).endTime() || collectUsers[_ballot][msg.sender]) {\\n    //         return 0;\\n    //     }\\n    //     uint amount;\\n    //     uint shares = ballotOf[_ballot];\\n\\n    //     bool result = ITomiBallot(_ballot).result();\\n\\n    //     if (result) {\\n    //         uint extra;\\n    //         uint rewardRate = getConfigValue(ConfigNames.VOTE_REWARD_PERCENT);\\n    //         if ( rewardRate > 0) {\\n    //            extra = shares * rewardRate / ITomiConfig(configAddr).PERCENT_DENOMINATOR();\\n    //            shares -= extra;\\n    //         }\\n    //         if (msg.sender == ITomiBallot(_ballot).proposer()) {\\n    //             amount = extra;\\n    //         }\\n    //     }\\n\\n    //     if (ITomiBallot(_ballot).total() > 0) {  \\n    //         uint reward = shares * ITomiBallot(_ballot).weight(msg.sender) / ITomiBallot(_ballot).total();\\n    //         amount += ITomiBallot(_ballot).proposer() == msg.sender ? 0: reward;\\n    //     }\\n    //     return amount;\\n    // }\\n\\n    function getRewardForRevenueProposal(address _ballot) public view returns (uint) {\\n        if (block.timestamp < ITomiBallotRevenue(_ballot).endTime() || collectUsers[_ballot][msg.sender]) {\\n            return 0;\\n        }\\n        \\n        uint amount = 0;\\n        uint shares = ballotOf[_ballot];\\n\\n        if (ITomiBallotRevenue(_ballot).total() > 0) {  \\n            uint reward = shares * ITomiBallotRevenue(_ballot).weight(msg.sender) / ITomiBallotRevenue(_ballot).total();\\n            amount += ITomiBallotRevenue(_ballot).proposer() == msg.sender ? 0 : reward; \\n        }\\n        return amount;\\n    }\\n\\n    // TOMI TEST ONLY\\n    // function addReward(uint _value) external onlyRewarder returns (bool) {\\n    function addReward(uint _value) external returns (bool) {\\n        require(_value > 0, 'TomiGovernance: ADD_REWARD_VALUE_IS_ZERO');\\n        uint total = IERC20(baseToken).balanceOf(address(this));\\n        uint diff = total.sub(totalSupply);\\n        require(_value <= diff, 'TomiGovernance: ADD_REWARD_EXCEED');\\n        rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_value);\\n        totalSupply = total;\\n        emit RewardReceived(rewardAddr, _value);\\n    }\\n\\n    function _rewardTransfer(address _from, address _to, uint _value) private returns (bool) {\\n        require(_value >= 0 && rewardOf[_from] >= _value, 'TomiGovernance: INSUFFICIENT_BALANCE');\\n        rewardOf[_from] = rewardOf[_from].sub(_value);\\n        rewardOf[_to] = rewardOf[_to].add(_value);\\n        emit RewardTransfered(_from, _to, _value);\\n    }\\n\\n    function _isDefaultToken(address _token) internal returns (bool) {\\n        address[] memory tokens = ITomiConfig(configAddr).getDefaultListTokens();\\n        for(uint i = 0 ; i < tokens.length; i++){\\n            if (tokens[i] == _token) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _transferForBallot(uint _amount, bool _wallet, uint _endTime) internal returns (uint) {\\n        if (_wallet && _amount > 0) {\\n            _add(msg.sender, _amount, _endTime);\\n            TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), _amount);\\n            totalSupply += _amount;\\n        } \\n\\n        if (_amount == 0) allowance[msg.sender] = estimateLocktime(msg.sender, _endTime);\\n\\n        return _amount;\\n    }\\n\\n    function _createdBallot(address _ballot, uint _type) internal returns (uint) {\\n        uint reward = 0;\\n        \\n        if (_type == T_REVENUE) {\\n            reward = rewardOf[rewardAddr];\\n            ballotOf[_ballot] = reward;\\n            _rewardTransfer(rewardAddr, _ballot, reward);\\n        }\\n\\n        _type == T_REVENUE ? revenueBallots.push(_ballot): ballots.push(_ballot);\\n        ballotTypes[_ballot] = _type;\\n        return reward;\\n    }\\n\\n    function ballotCount() external view returns (uint) {\\n        return ballots.length;\\n    }\\n\\n    function ballotRevenueCount() external view returns (uint) {\\n        return revenueBallots.length;\\n    }\\n\\n    function _changeAmountPerBlock(uint _value) internal returns (bool) {\\n        return ITgas(baseToken).changeInterestRatePerBlock(_value);\\n    }\\n\\n    function updateTgasGovernor(address _new) external onlyOwner {\\n        ITgas(baseToken).upgradeGovernance(_new);\\n    }\\n\\n    function upgradeApproveReward() external returns (uint) {\\n        require(rewardOf[rewardAddr] > 0, 'TomiGovernance: UPGRADE_NO_REWARD');\\n        require(ITomiConfig(configAddr).governor() != address(this), 'TomiGovernance: UPGRADE_NO_CHANGE');\\n        TransferHelper.safeApprove(baseToken, ITomiConfig(configAddr).governor(), rewardOf[rewardAddr]);\\n        return rewardOf[rewardAddr]; \\n    }\\n\\n    function receiveReward(address _from, uint _value) external returns (bool) {\\n        require(_value > 0, 'TomiGovernance: RECEIVE_REWARD_VALUE_IS_ZERO');\\n        TransferHelper.safeTransferFrom(baseToken, _from, address(this), _value);\\n        rewardOf[rewardAddr] += _value;\\n        totalSupply += _value;\\n        emit RewardReceived(_from, _value);\\n        return true;\\n    }\\n\\n}\",\"keccak256\":\"0x31bc35cd182ed99361a453a33703607aad94df614ad1b2cbda1ffd315831c1c2\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\",\"keccak256\":\"0x6e5335393e260d808f34e7e3dfd6177004185a9ad70e5a63a0c49844bba42b87\"},\"contracts/interfaces/ITgas.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITgas {\\n    function amountPerBlock() external view returns (uint);\\n    function changeInterestRatePerBlock(uint value) external returns (bool);\\n    function getProductivity(address user) external view returns (uint, uint);\\n    function increaseProductivity(address user, uint value) external returns (bool);\\n    function decreaseProductivity(address user, uint value) external returns (bool);\\n    function take() external view returns (uint);\\n    function takeWithBlock() external view returns (uint, uint);\\n    function mint() external returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function upgradeImpl(address _newImpl) external;\\n    function upgradeGovernance(address _newGovernor) external;\\n    function transfer(address to, uint value) external returns (bool);\\n    function approve(address spender, uint value) external returns (bool);\\n}\",\"keccak256\":\"0x26f114dcfa8a1d36132aa730809cff39345d65a8ab373abb4572075fb4b4cea1\"},\"contracts/interfaces/ITokenRegistry.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface ITokenRegistry {\\n    function tokenStatus(address _token) external view returns(uint);\\n    function pairStatus(address tokenA, address tokenB) external view returns (uint);\\n    function NONE() external view returns(uint);\\n    function REGISTERED() external view returns(uint);\\n    function PENDING() external view returns(uint);\\n    function OPENED() external view returns(uint);\\n    function CLOSED() external view returns(uint);\\n    function registryToken(address _token) external returns (bool);\\n    function publishToken(address _token) external returns (bool);\\n    function updateToken(address _token, uint _status) external returns (bool);\\n    function updatePair(address tokenA, address tokenB, uint _status) external returns (bool);\\n    function tokenCount() external view returns(uint);\\n    function validTokens() external view returns(address[] memory);\\n    function iterateValidTokens(uint32 _start, uint32 _end) external view returns (address[] memory);\\n}\",\"keccak256\":\"0x99c42dda5e4949739bb52992d8d7cecaee20ef05e1ed2020028aa92f32018a8f\"},\"contracts/interfaces/ITomiBallot.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITomiBallot {\\n    function proposer() external view returns(address);\\n    function endTime() external view returns(uint);\\n    function executionTime() external view returns(uint);\\n    function value() external view returns(uint);\\n    function result() external view returns(bool);\\n    function end() external returns (bool);\\n    function total() external view returns(uint);\\n    function weight(address user) external view returns (uint);\\n    function voteByGovernor(address user, uint256 proposal) external;\\n}\",\"keccak256\":\"0x36198b8450e826a59ac50cf6a4fa5e72a90a528784978b56f9b663e989d82f99\"},\"contracts/interfaces/ITomiBallotFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITomiBallotFactory {\\n    function create(\\n        address _proposer,\\n        uint _value,\\n        uint _endTime,\\n        uint _executionTime,\\n        string calldata _subject,\\n        string calldata _content\\n    ) external returns (address);\\n\\n     function createShareRevenue(\\n        address _proposer,\\n        uint _endTime,\\n        uint _executionTime,\\n        string calldata _subject,\\n        string calldata _content\\n    ) external returns (address);\\n}\",\"keccak256\":\"0x0fff6b23931fc04444db185925e879c3560ef03a451d45be283287db373098bd\"},\"contracts/interfaces/ITomiBallotRevenue.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITomiBallotRevenue {\\n    function proposer() external view returns(address);\\n    function endTime() external view returns(uint);\\n    function executionTime() external view returns(uint);\\n    function end() external returns (bool);\\n    function total() external view returns(uint);\\n    function weight(address user) external view returns (uint);\\n    function participateByGovernor(address user) external;\\n}\",\"keccak256\":\"0x4ea42cfd2c873ff88d6f9ec9759c8e035d3abe2cf910c163be48d7683f9ed543\"},\"contracts/interfaces/ITomiConfig.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface ITomiConfig {\\n    function governor() external view returns (address);\\n    function dev() external view returns (address);\\n    function PERCENT_DENOMINATOR() external view returns (uint);\\n    function getConfig(bytes32 _name) external view returns (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable);\\n    function getConfigValue(bytes32 _name) external view returns (uint);\\n    function changeConfigValue(bytes32 _name, uint _value) external returns (bool);\\n    function checkToken(address _token) external view returns(bool);\\n    function checkPair(address tokenA, address tokenB) external view returns (bool);\\n    function listToken(address _token) external returns (bool);\\n    function getDefaultListTokens() external returns (address[] memory);\\n    function platform() external view returns  (address);\\n    function addToken(address _token) external returns (bool);\\n}\",\"keccak256\":\"0x103ef823b0e1e37bb4cc9cd02da851cd27171693fe0499eba931171db9a344c5\"},\"contracts/libraries/ConfigNames.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\nlibrary ConfigNames {\\n    bytes32 public constant PRODUCE_TGAS_RATE = bytes32('PRODUCE_TGAS_RATE');\\n    bytes32 public constant SWAP_FEE_PERCENT = bytes32('SWAP_FEE_PERCENT');\\n    bytes32 public constant LIST_TGAS_AMOUNT = bytes32('LIST_TGAS_AMOUNT');\\n    bytes32 public constant UNSTAKE_DURATION = bytes32('UNSTAKE_DURATION');\\n    // bytes32 public constant EXECUTION_DURATION = bytes32('EXECUTION_DURATION');\\n    bytes32 public constant REMOVE_LIQUIDITY_DURATION = bytes32('REMOVE_LIQUIDITY_DURATION');\\n    bytes32 public constant TOKEN_TO_TGAS_PAIR_MIN_PERCENT = bytes32('TOKEN_TO_TGAS_PAIR_MIN_PERCENT');\\n    bytes32 public constant LIST_TOKEN_FAILURE_BURN_PRECENT = bytes32('LIST_TOKEN_FAILURE_BURN_PRECENT');\\n    bytes32 public constant LIST_TOKEN_SUCCESS_BURN_PRECENT = bytes32('LIST_TOKEN_SUCCESS_BURN_PRECENT');\\n    bytes32 public constant PROPOSAL_TGAS_AMOUNT = bytes32('PROPOSAL_TGAS_AMOUNT');\\n    // bytes32 public constant VOTE_DURATION = bytes32('VOTE_DURATION');\\n    bytes32 public constant VOTE_REWARD_PERCENT = bytes32('VOTE_REWARD_PERCENT');\\n    bytes32 public constant TOKEN_PENGDING_SWITCH = bytes32('TOKEN_PENGDING_SWITCH');\\n    bytes32 public constant TOKEN_PENGDING_TIME = bytes32('TOKEN_PENGDING_TIME');\\n    bytes32 public constant LIST_TOKEN_SWITCH = bytes32('LIST_TOKEN_SWITCH');\\n    bytes32 public constant DEV_PRECENT = bytes32('DEV_PRECENT');\\n    bytes32 public constant FEE_GOVERNANCE_REWARD_PERCENT = bytes32('FEE_GOVERNANCE_REWARD_PERCENT');\\n    bytes32 public constant FEE_LP_REWARD_PERCENT = bytes32('FEE_LP_REWARD_PERCENT');\\n    bytes32 public constant FEE_FUNDME_REWARD_PERCENT = bytes32('FEE_FUNDME_REWARD_PERCENT');\\n    bytes32 public constant FEE_LOTTERY_REWARD_PERCENT = bytes32('FEE_LOTTERY_REWARD_PERCENT');\\n}\",\"keccak256\":\"0x7b9f0e2423ed46cc0d02531a4250c7a1ec52433f769c5efc69c8c0f1c0e28d7b\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0xc8945d481ee64b22f7619e467ee2563c3f4c83079cce98cea6aa86b18b9223cb\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x66eeb857a4e1b189ee4fa48fd976ce16cc510d29eab7e0671cbc47b81fee7654\"},\"contracts/modules/BaseToken.sol\":{\"content\":\"\\npragma solidity >=0.5.16;\\n\\ncontract BaseToken {\\n    address public baseToken;\\n\\n    // called after deployment\\n    function initBaseToken(address _baseToken) internal {\\n        require(baseToken == address(0), 'INITIALIZED');\\n        require(_baseToken != address(0), 'ADDRESS_IS_ZERO');\\n        baseToken = _baseToken;  // it should be tgas token address\\n    }\\n}\",\"keccak256\":\"0x696f528fa033d6b588e8b12a578d0efe7f5ab62291b82e72afbb232b4799533a\"},\"contracts/modules/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\\n        _;\\n    }\\n\\n    function changeOwner(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\\n        emit OwnerChanged(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n\\n}\",\"keccak256\":\"0xa20172f0e84dc77ca8c1724023e289a71e7c30fdd3c8d0649204657f87444a95\"},\"contracts/modules/TgasStaking.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\nimport '../libraries/TransferHelper.sol';\\nimport '../libraries/SafeMath.sol';\\nimport '../interfaces/IERC20.sol';\\nimport '../interfaces/ITomiConfig.sol';\\nimport '../modules/BaseToken.sol';\\n\\n\\ncontract TgasStaking is BaseToken {\\n    using SafeMath for uint;\\n\\n    uint public lockTime;\\n    uint public totalSupply;\\n    uint public stakingSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => uint) public allowance;\\n\\n    constructor (address _baseToken) public {\\n        initBaseToken(_baseToken);\\n    }\\n\\n    function estimateLocktime(address user, uint _endTime) internal view returns(uint) {\\n        uint collateralLocktime = allowance[user];\\n\\n        if (_endTime == 0) {\\n            uint depositLockTime = block.timestamp + lockTime;\\n            return depositLockTime > collateralLocktime ? depositLockTime: collateralLocktime;\\n        }\\n\\n        return _endTime > collateralLocktime ? _endTime: collateralLocktime; \\n    }\\n\\n    function _add(address user, uint value, uint endTime) internal {\\n        require(value > 0, 'ZERO');\\n        balanceOf[user] = balanceOf[user].add(value);\\n        stakingSupply = stakingSupply.add(value);\\n        allowance[user] = estimateLocktime(user, endTime);\\n    }\\n\\n    function _reduce(address user, uint value) internal {\\n        require(balanceOf[user] >= value && value > 0, 'TgasStaking: INSUFFICIENT_BALANCE');\\n        balanceOf[user] = balanceOf[user].sub(value);\\n        stakingSupply = stakingSupply.sub(value);\\n    }\\n\\n    function deposit(uint _amount) external returns (bool) {\\n        TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), _amount);\\n        _add(msg.sender, _amount, 0);\\n        totalSupply = IERC20(baseToken).balanceOf(address(this));\\n        return true;\\n    }\\n\\n    // function onBehalfDeposit(address _user, uint _amount) external returns (bool) {\\n    //     TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), _amount);\\n    //     _add(_user, _amount);\\n    //     totalSupply = IERC20(baseToken).balanceOf(address(this));\\n    //     return true;\\n    // }\\n\\n    function withdraw(uint _amount) external returns (bool) {\\n        require(block.timestamp > allowance[msg.sender], 'TgasStaking: NOT_DUE');\\n        TransferHelper.safeTransfer(baseToken, msg.sender, _amount);\\n        _reduce(msg.sender, _amount);\\n        totalSupply = IERC20(baseToken).balanceOf(address(this));\\n        return true;\\n    }\\n\\n}\",\"keccak256\":\"0xaa5a0b4df0222a17ff6a598660604ea3ebdfed0725bb9ec31069ce5d2ea1aebb\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103d05760003560e01c80637015e95e116101ff578063bc26724c1161011a578063d547741f116100ad578063eec5f1dc1161007c578063eec5f1dc14610d2e578063f377e7cf14610d54578063f624609c14610d5c578063f79d073114610e33576103d0565b8063d547741f14610cae578063dc01262614610cda578063dc39202314610d00578063ee15a07d14610d26576103d0565b8063c199de32116100e9578063c199de3214610c46578063c25d0bab14610c63578063c55dae6314610c89578063ca15c87314610c91576103d0565b8063bc26724c14610bba578063bc8cffef14610be0578063c003003214610c06578063c0c53b8b14610c0e576103d0565b80639010d07c11610192578063ad3385f611610161578063ad3385f614610b43578063aee4dd5a14610b4b578063b64afbe514610b71578063b6b55f2514610b9d576103d0565b80639010d07c14610ac657806391d1485414610ae9578063a217fddf14610b15578063a6f9dae114610b1d576103d0565b806374de4ec4116101ce57806374de4ec414610a7357806382c97b8d14610a905780638975211c14610ab65780638da5cb5b14610abe576103d0565b80637015e95e146109f157806370a08231146109f9578063739a882714610a1f57806374c3e71314610a45576103d0565b806333aa90fe116102ef578063537f9764116102825780635c632b38116102515780635c632b38146109a75780635c820c96146109c457806365f24c9e146109cc5780636d8e29ad146109e9576103d0565b8063537f976414610875578063541ea3f61461089b57806354fd4d50146109795780635a8e1ca914610981576103d0565b80633e5beab9116102be5780633e5beab9146108375780634460bdd61461085d5780634654ff051461086557806351275f661461086d576103d0565b806333aa90fe146107d557806336568abe146107dd5780633a930055146108095780633e05d1d21461082f576103d0565b80632a4a1b73116103675780632f2ff15d116103365780632f2ff15d146106c457806331049d30146106f057806332560cd8146107c5578063334c5c59146107cd576103d0565b80632a4a1b731461057e5780632a8c1460146105b05780632d65f489146106795780632e1a7d4d146106a7576103d0565b806318160ddd116103a357806318160ddd146105155780631d62ebd91461051d578063201bec0814610543578063248a9ca314610561576103d0565b8063053ff9ee146103d557806306466620146104155780630d6680871461042f57806311ded7be14610437575b600080fd5b610401600480360360408110156103eb57600080fd5b506001600160a01b038135169060200135610e3b565b604080519115158252519081900360200190f35b61041d610f00565b60408051918252519081900360200190f35b61041d610f06565b6104f96004803603604081101561044d57600080fd5b81019060208101813564010000000081111561046857600080fd5b82018360208201111561047a57600080fd5b8035906020019184600183028401116401000000008311171561049c57600080fd5b9193909290916020810190356401000000008111156104ba57600080fd5b8201836020820111156104cc57600080fd5b803590602001918460018302840111640100000000831117156104ee57600080fd5b509092509050610f0c565b604080516001600160a01b039092168252519081900360200190f35b61041d611122565b61041d6004803603602081101561053357600080fd5b50356001600160a01b0316611128565b61055f6004803603608081101561055957600080fd5b5061113a565b005b61041d6004803603602081101561057757600080fd5b50356111e5565b61055f6004803603606081101561059457600080fd5b506001600160a01b0381351690602081013590604001356111fd565b6104f9600480360360608110156105c657600080fd5b813591908101906040810160208201356401000000008111156105e857600080fd5b8201836020820111156105fa57600080fd5b8035906020019184600183028401116401000000008311171561061c57600080fd5b91939092909160208101903564010000000081111561063a57600080fd5b82018360208201111561064c57600080fd5b8035906020019184600183028401116401000000008311171561066e57600080fd5b5090925090506113f0565b6104016004803603604081101561068f57600080fd5b506001600160a01b0381358116916020013516611612565b610401600480360360208110156106bd57600080fd5b5035611632565b61055f600480360360408110156106da57600080fd5b50803590602001356001600160a01b0316611738565b6104f9600480360360a081101561070657600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561073457600080fd5b82018360208201111561074657600080fd5b8035906020019184600183028401116401000000008311171561076857600080fd5b91939092909160208101903564010000000081111561078657600080fd5b82018360208201111561079857600080fd5b803590602001918460018302840111640100000000831117156107ba57600080fd5b5090925090506117a4565b61041d611be1565b61041d611be7565b61041d611bed565b61055f600480360360408110156107f357600080fd5b50803590602001356001600160a01b0316611bf3565b6104f96004803603602081101561081f57600080fd5b50356001600160a01b0316611c54565b61041d611c6f565b61041d6004803603602081101561084d57600080fd5b50356001600160a01b0316611e33565b61041d611e45565b61041d611e8f565b61041d611e95565b6104016004803603602081101561088b57600080fd5b50356001600160a01b0316611e9b565b6104f9600480360360a08110156108b157600080fd5b6001600160a01b0382351691602081013591604082013591908101906080810160608201356401000000008111156108e857600080fd5b8201836020820111156108fa57600080fd5b8035906020019184600183028401116401000000008311171561091c57600080fd5b91939092909160208101903564010000000081111561093a57600080fd5b82018360208201111561094c57600080fd5b8035906020019184600183028401116401000000008311171561096e57600080fd5b5090925090506121d0565b61041d61260d565b61041d6004803603602081101561099757600080fd5b50356001600160a01b0316612613565b6104f9600480360360208110156109bd57600080fd5b5035612625565b6104f961264c565b6104f9600480360360208110156109e257600080fd5b503561265b565b61041d612668565b6104f961266e565b61041d60048036036020811015610a0f57600080fd5b50356001600160a01b031661267d565b61041d60048036036020811015610a3557600080fd5b50356001600160a01b031661268f565b61041d60048036036040811015610a5b57600080fd5b506001600160a01b03813581169160200135166126a1565b61040160048036036020811015610a8957600080fd5b50356126be565b61041d60048036036020811015610aa657600080fd5b50356001600160a01b0316612861565b6104f9612ae4565b6104f9612af3565b6104f960048036036040811015610adc57600080fd5b5080359060200135612b02565b61040160048036036040811015610aff57600080fd5b50803590602001356001600160a01b0316612b27565b61041d612b45565b61055f60048036036020811015610b3357600080fd5b50356001600160a01b0316612b4a565b61041d612c55565b61040160048036036020811015610b6157600080fd5b50356001600160a01b0316612c5b565b61055f60048036036040811015610b8757600080fd5b506001600160a01b03813516906020013561338f565b61040160048036036020811015610bb357600080fd5b50356134c8565b61041d60048036036020811015610bd057600080fd5b50356001600160a01b03166134ed565b61055f60048036036020811015610bf657600080fd5b50356001600160a01b03166137c1565b61041d613894565b61055f60048036036060811015610c2457600080fd5b506001600160a01b03813581169160208101358216916040909101351661389a565b61041d60048036036020811015610c5c57600080fd5b50356139cb565b6104f960048036036020811015610c7957600080fd5b50356001600160a01b0316613a62565b6104f9613a7d565b61041d60048036036020811015610ca757600080fd5b5035613a8c565b61055f60048036036040811015610cc457600080fd5b50803590602001356001600160a01b0316613aa3565b61041d60048036036020811015610cf057600080fd5b50356001600160a01b0316613afc565b61040160048036036020811015610d1657600080fd5b50356001600160a01b0316613b0e565b61041d613d92565b61040160048036036020811015610d4457600080fd5b50356001600160a01b0316613d98565b61041d613e6f565b6104f960048036036080811015610d7257600080fd5b6001600160a01b0382351691602081013591810190606081016040820135640100000000811115610da257600080fd5b820183602082011115610db457600080fd5b80359060200191846001830284011164010000000083111715610dd657600080fd5b919390929091602081019035640100000000811115610df457600080fd5b820183602082011115610e0657600080fd5b80359060200191846001830284011164010000000083111715610e2857600080fd5b509092509050613e75565b61041d614472565b6000808211610e7b5760405162461bcd60e51b815260040180806020018281038252602c815260200180615897602c913960400191505060405180910390fd5b600054610e93906001600160a01b0316843085614478565b600b546001600160a01b039081166000908152601a6020908152604091829020805486019055600280548601905581518581529151928616927f9ac954606f877c9c9e6deec30e9265abff5a57c7123a34777ca9321eb6c26d8e9281900390910190a25060015b92915050565b600c5481565b60015481565b600080610f198133612b27565b610f545760405162461bcd60e51b815260040180806020018281038252602981526020018061590d6029913960400191505060405180910390fd5b6000610f6b601354426145ee90919063ffffffff16565b90506000610f84601454836145ee90919063ffffffff16565b90506000600a60009054906101000a90046001600160a01b03166001600160a01b031663ed440dc43385858d8d8d8d6040518863ffffffff1660e01b815260040180886001600160a01b03166001600160a01b0316815260200187815260200186815260200180602001806020018381038352878782818152602001925080828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f8201169050808301925050509950505050505050505050602060405180830381600087803b15801561106557600080fd5b505af1158015611079573d6000803e3d6000fd5b505050506040513d602081101561108f57600080fd5b50516015546001600160a01b038216600090815260186020526040812091909155601054919250906110c2908390614648565b6015546040805191825260006020830152818101839052519192506001600160a01b0384169133917f324ff77aed889bbe0650aaa1156c76e87e08dc58a8372f556003a299296fbe27919081900360600190a35098975050505050505050565b60025481565b601a6020526000908152604090205481565b60405160200180807f53555045525f41444d494e5f524f4c450000000000000000000000000000000081525060100190506040516020818303038152906040528051906020012061118b8133612b27565b6111c65760405162461bcd60e51b815260040180806020018281038252602981526020018061590d6029913960400191505060405180910390fd5b5080356011556020810135601255604081013560135560600135601455565b6000818152600760205260409020600201545b919050565b6015546001600160a01b03841660009081526018602052604090205414156112565760405162461bcd60e51b81526004018080602001828103825260288152602001806157ec6028913960400191505060405180910390fd5b33600090815260046020526040902054808211156112f5576000611280838363ffffffff61476016565b90506112f2816001876001600160a01b031663c9c3d42e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c157600080fd5b505afa1580156112d5573d6000803e3d6000fd5b505050506040513d60208110156112eb57600080fd5b50516147a2565b50505b604080517f4e34048c0000000000000000000000000000000000000000000000000000000081523360048201526024810185905290516001600160a01b03861691634e34048c91604480830192600092919082900301818387803b15801561135c57600080fd5b505af1158015611370573d6000803e3d6000fd5b505033600090815260046020526040902054611395925090508363ffffffff61476016565b33600090815260046020908152604080832093909355600b546001600160a01b03168252601a905220546113cf908363ffffffff6145ee16565b600b546001600160a01b03166000908152601a602052604090205550505050565b600080611408601154426145ee90919063ffffffff16565b90506000611421601254836145ee90919063ffffffff16565b905061142d888261480a565b6000600a60009054906101000a90046001600160a01b03166001600160a01b03166310bae72c33600086868d8d8d8d6040518963ffffffff1660e01b815260040180896001600160a01b03166001600160a01b0316815260200188815260200187815260200186815260200180602001806020018381038352878782818152602001925080828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f8201169050808301925050509a5050505050505050505050602060405180830381600087803b15801561151557600080fd5b505af1158015611529573d6000803e3d6000fd5b505050506040513d602081101561153f57600080fd5b50516016546001600160a01b03808316600090815260186020908152604080832094909455600b549092168152601a9091522054909150611586908a63ffffffff6145ee16565b600b546001600160a01b03166000908152601a6020526040812091909155600f546115b2908390614648565b6016546040805191825260006020830152818101839052519192506001600160a01b0384169133917f324ff77aed889bbe0650aaa1156c76e87e08dc58a8372f556003a299296fbe27919081900360600190a35098975050505050505050565b601d60209081526000928352604080842090915290825290205460ff1681565b336000908152600560205260408120544211611695576040805162461bcd60e51b815260206004820152601460248201527f546761735374616b696e673a204e4f545f445545000000000000000000000000604482015290519081900360640190fd5b6000546116ac906001600160a01b03163384614946565b6116b63383614ac2565b600054604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561170157600080fd5b505afa158015611715573d6000803e3d6000fd5b505050506040513d602081101561172b57600080fd5b5051600255506001919050565b60008281526007602052604090206002015461175b90611756614b81565b612b27565b6117965760405162461bcd60e51b815260040180806020018281038252602f81526020018061571b602f913960400191505060405180910390fd5b6117a08282614b85565b5050565b600080806000806000600960009054906101000a90046001600160a01b03166001600160a01b0316636dd5b69d8e6040518263ffffffff1660e01b81526004018082815260200191505060a06040518083038186803b15801561180657600080fd5b505afa15801561181a573d6000803e3d6000fd5b505050506040513d60a081101561183057600080fd5b50805160208201516040830151606084015160809094015192985090965094509092509050600181146118aa576040805162461bcd60e51b815260206004820152601e60248201527f546f6d69476f7665726e616e63653a20434f4e4649475f44495341424c450000604482015290519081900360640190fd5b848c101580156118ba5750838c11155b61190b576040805162461bcd60e51b815260206004820152601760248201527f546f6d69476f7665726e616e63653a204f555453494445000000000000000000604482015290519081900360640190fd5b6000828d101561191d578c8303611921565b828d035b905080841015611978576040805162461bcd60e51b815260206004820152601860248201527f546f6d69476f7665726e616e63653a204f564552535445500000000000000000604482015290519081900360640190fd5b5050505050506000611995601154426145ee90919063ffffffff16565b905060006119ae601254836145ee90919063ffffffff16565b90506119ba888261480a565b6000600a60009054906101000a90046001600160a01b03166001600160a01b03166310bae72c338c86868d8d8d8d6040518963ffffffff1660e01b815260040180896001600160a01b03166001600160a01b0316815260200188815260200187815260200186815260200180602001806020018381038352878782818152602001925080828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f8201169050808301925050509a5050505050505050505050602060405180830381600087803b158015611aa157600080fd5b505af1158015611ab5573d6000803e3d6000fd5b505050506040513d6020811015611acb57600080fd5b810190808051906020019092919050505090508a60186000836001600160a01b03166001600160a01b0316815260200190815260200160002081905550611b5589601a6000600b60009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020546145ee90919063ffffffff16565b600b546001600160a01b03166000908152601a6020526040812091909155600c54611b81908390614648565b604080518e8152602081018e905280820183905290519192506001600160a01b0384169133917f324ff77aed889bbe0650aaa1156c76e87e08dc58a8372f556003a299296fbe27919081900360600190a3509a9950505050505050505050565b60135481565b60105481565b60205490565b611bfb614b81565b6001600160a01b0316816001600160a01b031614611c4a5760405162461bcd60e51b815260040180806020018281038252602f81526020018061599c602f913960400191505060405180910390fd5b6117a08282614bf4565b601e602052600090815260409020546001600160a01b031681565b600b546001600160a01b03166000908152601a6020526040812054611cc55760405162461bcd60e51b81526004018080602001828103825260218152602001806159576021913960400191505060405180910390fd5b6009546040805163030d028960e21b8152905130926001600160a01b031691630c340a24916004808301926020929190829003018186803b158015611d0957600080fd5b505afa158015611d1d573d6000803e3d6000fd5b505050506040513d6020811015611d3357600080fd5b50516001600160a01b03161415611d7b5760405162461bcd60e51b81526004018080602001828103825260218152602001806159366021913960400191505060405180910390fd5b6000546009546040805163030d028960e21b81529051611e14936001600160a01b03908116931691630c340a24916004808301926020929190829003018186803b158015611dc857600080fd5b505afa158015611ddc573d6000803e3d6000fd5b505050506040513d6020811015611df257600080fd5b5051600b546001600160a01b03166000908152601a6020526040902054614c63565b50600b546001600160a01b03166000908152601a602052604090205490565b60056020526000908152604090205481565b60405160200180807f53555045525f41444d494e5f524f4c450000000000000000000000000000000081525060100190506040516020818303038152906040528051906020012081565b60115481565b600f5481565b600080826001600160a01b031663efbe1c1c6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611ed957600080fd5b505af1158015611eed573d6000803e3d6000fd5b505050506040513d6020811015611f0357600080fd5b5051604080517f3fa4f24500000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b03861691633fa4f245916004808301926020929190829003018186803b158015611f6457600080fd5b505afa158015611f78573d6000803e3d6000fd5b505050506040513d6020811015611f8e57600080fd5b50516001600160a01b038086166000908152601960209081526040808320548416808452601e83529281902054600954825163056564a160e11b815260048101869052925196975093959085169487941692630acac9429260248082019391829003018186803b15801561200157600080fd5b505afa158015612015573d6000803e3d6000fd5b505050506040513d602081101561202b57600080fd5b5051141561206a5760405162461bcd60e51b81526004018080602001828103825260268152602001806158416026913960400191505060405180910390fd5b83156120f85760095460408051632bce9e7b60e01b81526001600160a01b0385811660048301526024820187905291519190921691632bce9e7b9160448083019260209291908290030181600087803b1580156120c657600080fd5b505af11580156120da573d6000803e3d6000fd5b505050506040513d60208110156120f057600080fd5b506121749050565b6009546040805163056564a160e11b81526001600160a01b03858116600483015291519190921691630acac942916024808301926020929190829003018186803b15801561214557600080fd5b505afa158015612159573d6000803e3d6000fd5b505050506040513d602081101561216f57600080fd5b505192505b604080516001600160a01b03808416825284166020820152808201859052851515606082015290517fb9fca8100d801faf854377cb46530c8e9fcb90562c8e746e8f16edec66ac053e9181900360800190a15091949350505050565b60006121db88614ddf565b156122175760405162461bcd60e51b81526004018080602001828103825260318152602001806156ea6031913960400191505060405180910390fd5b6009546040805163056564a160e11b81526001600160a01b038b8116600483015291516000939290921691630acac94291602480820192602092909190829003018186803b15801561226857600080fd5b505afa15801561227c573d6000803e3d6000fd5b505050506040513d602081101561229257600080fd5b505160095460408051630982797d60e21b815290519293506001600160a01b0390911691632609e5f491600480820192602092909190829003018186803b1580156122dc57600080fd5b505afa1580156122f0573d6000803e3d6000fd5b505050506040513d602081101561230657600080fd5b505181146123455760405162461bcd60e51b81526004018080602001828103825260228152602001806158c36022913960400191505060405180910390fd5b600960009054906101000a90046001600160a01b03166001600160a01b031663aa23a8f46040518163ffffffff1660e01b815260040160206040518083038186803b15801561239357600080fd5b505afa1580156123a7573d6000803e3d6000fd5b505050506040513d60208110156123bd57600080fd5b50518814806124445750600960009054906101000a90046001600160a01b03166001600160a01b0316630e2636a36040518163ffffffff1660e01b815260040160206040518083038186803b15801561241557600080fd5b505afa158015612429573d6000803e3d6000fd5b505050506040513d602081101561243f57600080fd5b505188145b612495576040805162461bcd60e51b815260206004820152601e60248201527f546f6d69476f7665726e616e63653a20494e56414c49445f5354415455530000604482015290519081900360640190fd5b878114156124ea576040805162461bcd60e51b815260206004820181905260248201527f546f6d69476f7665726e616e63653a205354415455535f4e4f5f4348414e4745604482015290519081900360640190fd5b6000612501601154426145ee90919063ffffffff16565b9050600061251a601254836145ee90919063ffffffff16565b9050612526898261480a565b60006125b5600e548d8d8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150614f579050565b600b546001600160a01b03166000908152601a60205260409020549091506125e3908b63ffffffff6145ee16565b600b546001600160a01b03166000908152601a60205260409020559b9a5050505050505050505050565b60085481565b60176020526000908152604090205481565b601f818154811061263257fe5b6000918252602090912001546001600160a01b0316905081565b6009546001600160a01b031681565b6020818154811061263257fe5b60145481565b600b546001600160a01b031681565b60046020526000908152604090205481565b60186020526000908152604090205481565b601c60209081526000928352604080842090915290825290205481565b60008082116126fe5760405162461bcd60e51b81526004018080602001828103825260288152602001806158e56028913960400191505060405180910390fd5b60008054604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561274a57600080fd5b505afa15801561275e573d6000803e3d6000fd5b505050506040513d602081101561277457600080fd5b505160025490915060009061279090839063ffffffff61476016565b9050808411156127d15760405162461bcd60e51b81526004018080602001828103825260218152602001806156a76021913960400191505060405180910390fd5b600b546001600160a01b03166000908152601a60205260409020546127fc908563ffffffff6145ee16565b600b80546001600160a01b039081166000908152601a60209081526040918290209490945560028690559154825188815292519116927f9ac954606f877c9c9e6deec30e9265abff5a57c7123a34777ca9321eb6c26d8e928290030190a25050919050565b6000816001600160a01b0316633197cbb66040518163ffffffff1660e01b815260040160206040518083038186803b15801561289c57600080fd5b505afa1580156128b0573d6000803e3d6000fd5b505050506040513d60208110156128c657600080fd5b505142101561291c576040805162461bcd60e51b815260206004820152601d60248201527f546f6d69476f7665726e616e63653a204e4f545f5945545f454e444544000000604482015290519081900360640190fd5b6001600160a01b0382166000908152601d6020908152604080832033845290915290205460ff1615612995576040805162461bcd60e51b815260206004820181905260248201527f546f6d69476f7665726e616e63653a205245574152445f434f4c4c4543544544604482015290519081900360640190fd5b6015546001600160a01b038316600090815260186020526040902054146129ed5760405162461bcd60e51b81526004018080602001828103825260288152602001806157ec6028913960400191505060405180910390fd5b60006129f8836134ed565b9050612a0583338361516f565b5033600090815260046020526040902054612a26908263ffffffff6145ee16565b33600090815260046020526040902055600354612a49908263ffffffff6145ee16565b600355336000908152601a6020526040902054612a6c908263ffffffff61476016565b336000818152601a60209081526040808320949094556001600160a01b038716808352601d8252848320848452825291849020805460ff191660011790558351858152935191937fba54b13b72478bb0dfb7f4fefd826a0fce43df924cfddf6cb402702d6ce4d45b929081900390910190a350919050565b600a546001600160a01b031681565b6006546001600160a01b031681565b6000828152600760205260408120612b20908363ffffffff61528216565b9392505050565b6000828152600760205260408120612b20908363ffffffff61528e16565b600081565b6006546001600160a01b03163314612b9e576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b6001600160a01b038116612bf9576040805162461bcd60e51b815260206004820152601860248201527f4f776e61626c653a20494e56414c49445f414444524553530000000000000000604482015290519081900360640190fd5b6006546040516001600160a01b038084169216907fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c90600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b600d5481565b600080826001600160a01b031663efbe1c1c6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612c9957600080fd5b505af1158015612cad573d6000803e3d6000fd5b505050506040513d6020811015612cc357600080fd5b50516001600160a01b038085166000908152601960209081526040808320548416808452601e8352928190205460095482517f0b0ab77600000000000000000000000000000000000000000000000000000000815292519697509395908516949390931692630b0ab77692600480840193919291829003018186803b158015612d4b57600080fd5b505afa158015612d5f573d6000803e3d6000fd5b505050506040513d6020811015612d7557600080fd5b50516009546040805163056564a160e11b81526001600160a01b03868116600483015291519190921691630acac942916024808301926020929190829003018186803b158015612dc457600080fd5b505afa158015612dd8573d6000803e3d6000fd5b505050506040513d6020811015612dee57600080fd5b505114612e42576040805162461bcd60e51b815260206004820152601760248201527f546f6d69476f7665726e616e63653a2041554449544544000000000000000000604482015290519081900360640190fd5b600083612ec857600960009054906101000a90046001600160a01b03166001600160a01b0316630e2636a36040518163ffffffff1660e01b815260040160206040518083038186803b158015612e9757600080fd5b505afa158015612eab573d6000803e3d6000fd5b505050506040513d6020811015612ec157600080fd5b5051612f43565b600960009054906101000a90046001600160a01b03166001600160a01b0316632609e5f46040518163ffffffff1660e01b815260040160206040518083038186803b158015612f1657600080fd5b505afa158015612f2a573d6000803e3d6000fd5b505050506040513d6020811015612f4057600080fd5b50515b6001600160a01b038084166000908152601c602090815260408083209388168352929052908120549192508080871561319957600960009054906101000a90046001600160a01b03166001600160a01b0316639e6c29596040518163ffffffff1660e01b815260040160206040518083038186803b158015612fc457600080fd5b505afa158015612fd8573d6000803e3d6000fd5b505050506040513d6020811015612fee57600080fd5b50516130197f4c4953545f544f4b454e5f535543434553535f4255524e5f50524543454e54006139cb565b85028161302257fe5b04925082840391508215613061576000805461304a916001600160a01b039091169085614946565b60025461305d908463ffffffff61476016565b6002555b81156130ff57600b546001600160a01b03166000908152601a6020526040902054613092908363ffffffff6145ee16565b600b546001600160a01b039081166000908152601a6020908152604080832094909455918d168152601b90915220546130d1908363ffffffff6145ee16565b6001600160a01b03808c166000908152601b6020526040902091909155600b546130fd91168b8461516f565b505b600954604080517fdcc27d040000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301529151919092169163dcc27d049160248083019260209291908290030181600087803b15801561316757600080fd5b505af115801561317b573d6000803e3d6000fd5b505050506040513d602081101561319157600080fd5b506133229050565b600960009054906101000a90046001600160a01b03166001600160a01b0316639e6c29596040518163ffffffff1660e01b815260040160206040518083038186803b1580156131e757600080fd5b505afa1580156131fb573d6000803e3d6000fd5b505050506040513d602081101561321157600080fd5b505161323c7f4c4953545f544f4b454e5f4641494c5552455f4255524e5f50524543454e54006139cb565b85028161324557fe5b04925050818303821561326c576000805461326c916001600160a01b039091169085614946565b801561328957600054613289906001600160a01b03168783614946565b60025461329c908563ffffffff61476016565b60025560095460408051632bce9e7b60e01b81526001600160a01b038a811660048301526024820189905291519190921691632bce9e7b9160448083019260209291908290030181600087803b1580156132f557600080fd5b505af1158015613309573d6000803e3d6000fd5b505050506040513d602081101561331f57600080fd5b50505b604080516001600160a01b03808916825289166020820152808201879052606081018590526080810184905260a0810183905290517f1a3a32e14a4314895ddf948c94dc9b7c31ec2bd6553420c18d8089d10b53f1309181900360c00190a1509598975050505050505050565b6015546001600160a01b038316600090815260186020526040902054146133e75760405162461bcd60e51b81526004018080602001828103825260288152602001806157ec6028913960400191505060405180910390fd5b3360009081526004602052604081205490613408838363ffffffff61476016565b9050613449816001866001600160a01b031663c9c3d42e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c157600080fd5b50604080517f1590a05600000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b03861691631590a05691602480830192600092919082900301818387803b1580156134aa57600080fd5b505af11580156134be573d6000803e3d6000fd5b5050505050505050565b600080546134e1906001600160a01b0316333085614478565b6116b6338360006152a3565b6000816001600160a01b0316633197cbb66040518163ffffffff1660e01b815260040160206040518083038186803b15801561352857600080fd5b505afa15801561353c573d6000803e3d6000fd5b505050506040513d602081101561355257600080fd5b505142108061358457506001600160a01b0382166000908152601d6020908152604080832033845290915290205460ff165b15613591575060006111f8565b6001600160a01b0382166000818152601b602090815260408083205481517f2ddbd13a00000000000000000000000000000000000000000000000000000000815291519394909385939192632ddbd13a926004808301939192829003018186803b1580156135fe57600080fd5b505afa158015613612573d6000803e3d6000fd5b505050506040513d602081101561362857600080fd5b505111156137ba576000846001600160a01b0316632ddbd13a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561366b57600080fd5b505afa15801561367f573d6000803e3d6000fd5b505050506040513d602081101561369557600080fd5b5051604080517ff4396e2a00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b0388169163f4396e2a916024808301926020929190829003018186803b1580156136f657600080fd5b505afa15801561370a573d6000803e3d6000fd5b505050506040513d602081101561372057600080fd5b505183028161372b57fe5b049050336001600160a01b0316856001600160a01b031663a8e4fb906040518163ffffffff1660e01b815260040160206040518083038186803b15801561377157600080fd5b505afa158015613785573d6000803e3d6000fd5b505050506040513d602081101561379b57600080fd5b50516001600160a01b0316146137b157806137b4565b60005b83019250505b5092915050565b6006546001600160a01b03163314613815576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b60008054604080517f1fedded50000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291519190921692631fedded5926024808201939182900301818387803b15801561387957600080fd5b505af115801561388d573d6000803e3d6000fd5b5050505050565b601f5490565b6006546001600160a01b031633146138ee576040805162461bcd60e51b815260206004820152601260248201527127bbb730b136329d102327a92124a22222a760711b604482015290519081900360640190fd5b6001600160a01b0383161580159061390e57506001600160a01b03821615155b801561392257506001600160a01b03811615155b61395d5760405162461bcd60e51b81526004018080602001828103825260258152602001806157826025913960400191505060405180910390fd5b600b80546001600160a01b038086166001600160a01b03199283161790925560098054858416908316179055600a8054928416929091169190911790556139c37f554e5354414b455f4455524154494f4e000000000000000000000000000000006139cb565b600155505050565b600954604080517fc199de320000000000000000000000000000000000000000000000000000000081526004810184905290516000926001600160a01b03169163c199de32916024808301926020929190829003018186803b158015613a3057600080fd5b505afa158015613a44573d6000803e3d6000fd5b505050506040513d6020811015613a5a57600080fd5b505192915050565b6019602052600090815260409020546001600160a01b031681565b6000546001600160a01b031681565b6000818152600760205260408120610efa9061537d565b600082815260076020526040902060020154613ac190611756614b81565b611c4a5760405162461bcd60e51b81526004018080602001828103825260308152602001806158676030913960400191505060405180910390fd5b601b6020526000908152604090205481565b600080826001600160a01b031663efbe1c1c6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613b4c57600080fd5b505af1158015613b60573d6000803e3d6000fd5b505050506040513d6020811015613b7657600080fd5b5051905080613bcc576040805162461bcd60e51b815260206004820152601760248201527f546f6d69476f7665726e616e63653a204e4f5f50415353000000000000000000604482015290519081900360640190fd5b6000836001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b158015613c0757600080fd5b505afa158015613c1b573d6000803e3d6000fd5b505050506040513d6020811015613c3157600080fd5b50516001600160a01b0380861660009081526018602090815260408083205460095482517f242562e800000000000000000000000000000000000000000000000000000000815260048101839052602481018890529251969750909594169363242562e893604480840194938390030190829087803b158015613cb357600080fd5b505af1158015613cc7573d6000803e3d6000fd5b505050506040513d6020811015613cdd57600080fd5b505192507f554e5354414b455f4455524154494f4e00000000000000000000000000000000811415613d13576001829055613d46565b7f50524f445543455f544741535f52415445000000000000000000000000000000811415613d4657613d4482615388565b505b604080518281526020810184905281516001600160a01b038816927f6ad8f80cc263288264e5e06e0c41aa75bb224b02b362a4724a881dfa2da5d420928290030190a250909392505050565b600e5481565b600c546001600160a01b03821660009081526017602052604081205490911415613dcc57613dc582613b0e565b90506111f8565b600d546001600160a01b0383166000908152601760205260409020541415613df757613dc582612c5b565b600e546001600160a01b0383166000908152601760205260409020541415613e2257613dc582611e9b565b6040805162461bcd60e51b815260206004820152601c60248201527f546f6d69476f7665726e616e63653a20554e4b4e4f574e5f5459504500000000604482015290519081900360640190fd5b60035481565b6009546040805163056564a160e11b81526001600160a01b038981166004830152915160009384931691630acac942916024808301926020929190829003018186803b158015613ec457600080fd5b505afa158015613ed8573d6000803e3d6000fd5b505050506040513d6020811015613eee57600080fd5b5051600954604080517f8352539400000000000000000000000000000000000000000000000000000000815290519293506001600160a01b0390911691638352539491600480820192602092909190829003018186803b158015613f5157600080fd5b505afa158015613f65573d6000803e3d6000fd5b505050506040513d6020811015613f7b57600080fd5b50518114806140025750600960009054906101000a90046001600160a01b03166001600160a01b0316630e2636a36040518163ffffffff1660e01b815260040160206040518083038186803b158015613fd357600080fd5b505afa158015613fe7573d6000803e3d6000fd5b505050506040513d6020811015613ffd57600080fd5b505181145b614053576040805162461bcd60e51b815260206004820152601660248201527f546f6d69476f7665726e616e63653a204c495354454400000000000000000000604482015290519081900360640190fd5b6001600160a01b0388166000908152601e6020526040812080546001600160a01b0319163317905560115461408f90429063ffffffff6145ee16565b905060006140a8601254836145ee90919063ffffffff16565b90506140b5600033612b27565b61423b576140d973141493d413d4d05317d511d054d7d05353d5539560621b6139cb565b8910156141175760405162461bcd60e51b815260040180806020018281038252602d815260200180615814602d913960400191505060405180910390fd5b33600090815260046020526040812054906141388b8363ffffffff61476016565b9050614146816001856147a2565b601c6000336001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000208190555060046000336001600160a01b03166001600160a01b031681526020019081526020016000205491506141da73141493d413d4d05317d511d054d7d05353d5539560621b6139cb565b8210156142185760405162461bcd60e51b815260040180806020018281038252603881526020018061574a6038913960400191505060405180910390fd5b614228828c63ffffffff61476016565b3360009081526004602052604090205550505b600954604080517f2239eb3a0000000000000000000000000000000000000000000000000000000081526001600160a01b038d8116600483015291519190921691632239eb3a9160248083019260209291908290030181600087803b1580156142a357600080fd5b505af11580156142b7573d6000803e3d6000fd5b505050506040513d60208110156142cd57600080fd5b5050600d5460095460408051630982797d60e21b815290516000936143d19390928f926001600160a01b0390921691632609e5f491600480820192602092909190829003018186803b15801561432257600080fd5b505afa158015614336573d6000803e3d6000fd5b505050506040513d602081101561434c57600080fd5b5051604080516020601f8f018190048102820181019092528d8152908e908e9081908401838280828437600081840152601f19601f820116905080830192505050505050508b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150614f579050565b600b546001600160a01b03166000908152601a60205260409020549091506143ff908b63ffffffff6145ee16565b600b546001600160a01b039081166000908152601a6020908152604091829020939093558051338152918e16928201929092528082018c905290517f48a4867ae1de558174634fbaacefa7e5f70d61c782ceaeba4770449f19ab62c19181900360600190a19a9950505050505050505050565b60125481565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106145165780518252601f1990920191602091820191016144f7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614578576040519150601f19603f3d011682016040523d82523d6000602084013e61457d565b606091505b50915091508180156145ab5750805115806145ab57508080602001905160208110156145a857600080fd5b50515b6145e65760405162461bcd60e51b81526004018080602001828103825260248152602001806159786024913960400191505060405180910390fd5b505050505050565b600082820183811015612b20576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60105460009081908314156146995750600b80546001600160a01b039081166000908152601a60209081526040808320548885168452601b90925290912081905591546146979116858361516f565b505b60105483146146f257601f80546001810182556000919091527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d8070180546001600160a01b0319166001600160a01b03861617905561473e565b602080546001810182556000919091527fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb0180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b03939093166000908152601760205260409020919091555090565b6000612b2083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615403565b60008280156147b15750600084115b156147e2576147c13385846152a3565b6000546147d9906001600160a01b0316333087614478565b60028054850190555b83614802576147f1338361549a565b336000908152600560205260409020555b509192915050565b614815600033612b27565b6117a05761483973141493d413d4d05317d511d054d7d05353d5539560621b6139cb565b8210156148775760405162461bcd60e51b815260040180806020018281038252602d815260200180615814602d913960400191505060405180910390fd5b33600090815260046020526040902054808311156148b25760006148a1848363ffffffff61476016565b90506148af816001856147a2565b50505b50336000908152600460205260409020546148e373141493d413d4d05317d511d054d7d05353d5539560621b6139cb565b8110156149215760405162461bcd60e51b815260040180806020018281038252603881526020018061574a6038913960400191505060405180910390fd5b614931818463ffffffff61476016565b33600090815260046020526040902055505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106149dc5780518252601f1990920191602091820191016149bd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614a3e576040519150601f19603f3d011682016040523d82523d6000602084013e614a43565b606091505b5091509150818015614a71575080511580614a715750808060200190516020811015614a6e57600080fd5b50515b61388d576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b6001600160a01b0382166000908152600460205260409020548111801590614aea5750600081115b614b255760405162461bcd60e51b81526004018080602001828103825260218152602001806157a76021913960400191505060405180910390fd5b6001600160a01b038216600090815260046020526040902054614b4e908263ffffffff61476016565b6001600160a01b038316600090815260046020526040902055600354614b7a908263ffffffff61476016565b6003555050565b3390565b6000828152600760205260409020614ba3908263ffffffff6154ec16565b156117a057614bb0614b81565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152600760205260409020614c12908263ffffffff61550116565b156117a057614c1f614b81565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167f095ea7b300000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b60208310614cf95780518252601f199092019160209182019101614cda565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614d5b576040519150601f19603f3d011682016040523d82523d6000602084013e614d60565b606091505b5091509150818015614d8e575080511580614d8e5750808060200190516020811015614d8b57600080fd5b50515b61388d576040805162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c45440000604482015290519081900360640190fd5b60006060600960009054906101000a90046001600160a01b03166001600160a01b031663c7099b8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015614e3357600080fd5b505af1158015614e47573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015614e7057600080fd5b8101908080516040519392919084640100000000821115614e9057600080fd5b908301906020820185811115614ea557600080fd5b8251866020820283011164010000000082111715614ec257600080fd5b82525081516020918201928201910280838360005b83811015614eef578181015183820152602001614ed7565b50505050905001604052505050905060008090505b8151811015614f4d57836001600160a01b0316828281518110614f2357fe5b60200260200101516001600160a01b03161415614f45576001925050506111f8565b600101614f04565b5060009392505050565b600080600a60009054906101000a90046001600160a01b03166001600160a01b03166310bae72c338987878b8b6040518763ffffffff1660e01b815260040180876001600160a01b03166001600160a01b031681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015614ffe578181015183820152602001614fe6565b50505050905090810190601f16801561502b5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561505e578181015183820152602001615046565b50505050905090810190601f16801561508b5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156150b057600080fd5b505af11580156150c4573d6000803e3d6000fd5b505050506040513d60208110156150da57600080fd5b5051905060006150ea828b614648565b6001600160a01b038381166000818152601b60209081526040808320869055601982529182902080546001600160a01b031916948f16948517905581518d81529081018590528151949550919333927fbecc1c59284d3a0002610e2053ae509b936a7cc48b89c8e4ae512d88439482c692908290030190a45098975050505050505050565b6001600160a01b0383166000908152601a60205260408120548211156151c65760405162461bcd60e51b81526004018080602001828103825260248152602001806157c86024913960400191505060405180910390fd5b6001600160a01b0384166000908152601a60205260409020546151ef908363ffffffff61476016565b6001600160a01b038086166000908152601a60205260408082209390935590851681522054615224908363ffffffff6145ee16565b6001600160a01b038085166000818152601a602090815260409182902094909455805186815290519193928816927f9a1235bd046c2240be8591059e10f06d41c18eda175b31373d512ad82fafa35a92918290030190a39392505050565b6000612b208383615516565b6000612b20836001600160a01b03841661557a565b600082116152fa576040805162461bcd60e51b8152602060048083019190915260248201527f5a45524f00000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038316600090815260046020526040902054615323908363ffffffff6145ee16565b6001600160a01b03841660009081526004602052604090205560035461534f908363ffffffff6145ee16565b60035561535c838261549a565b6001600160a01b039093166000908152600560205260409020929092555050565b6000610efa82615592565b60008054604080517f7b381b350000000000000000000000000000000000000000000000000000000081526004810185905290516001600160a01b0390921691637b381b359160248082019260209290919082900301818787803b1580156153ef57600080fd5b505af1158015613a44573d6000803e3d6000fd5b600081848411156154925760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561545757818101518382015260200161543f565b50505050905090810190601f1680156154845780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216600090815260056020526040812054826154d55760015442018181116154ca57816154cc565b805b92505050610efa565b8083116154e257806154e4565b825b949350505050565b6000612b20836001600160a01b038416615596565b6000612b20836001600160a01b0384166155e0565b815460009082106155585760405162461bcd60e51b81526004018080602001828103825260228152602001806156c86022913960400191505060405180910390fd5b82600001828154811061556757fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60006155a2838361557a565b6155d857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610efa565b506000610efa565b6000818152600183016020526040812054801561569c578354600019808301919081019060009087908390811061561357fe5b906000526020600020015490508087600001848154811061563057fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061566057fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610efa565b6000915050610efa56fe546f6d69476f7665726e616e63653a204144445f5245574152445f455843454544456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473546f6d69476f7665726e616e63653a2044454641554c545f4c4953545f544f4b454e535f50524f504f53414c5f44454e59416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74546f6d69476f7665726e616e63653a20434f4c4c41544552414c5f4e4f545f454e4f5547485f414d4f554e545f544f5f50524f504f53414c546f6d69476f7665726e616e63653a20494e5055545f414444524553535f49535f5a45524f546761735374616b696e673a20494e53554646494349454e545f42414c414e4345546f6d69476f7665726e616e63653a20494e53554646494349454e545f42414c414e4345546f6d69476f7665726e616e63653a3a4661696c2064756520746f2077726f6e672062616c6c6f74546f6d69476f7665726e616e63653a204e4f545f454e4f5547485f414d4f554e545f544f5f50524f504f53414c546f6d69476f7665726e616e63653a20544f4b454e5f5354415455535f4e4f5f4348414e4745416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65546f6d69476f7665726e616e63653a20524543454956455f5245574152445f56414c55455f49535f5a45524f546f6d69476f7665726e616e63653a204f4e4c595f414c4c4f575f50454e44494e47546f6d69476f7665726e616e63653a204144445f5245574152445f56414c55455f49535f5a45524f546f6d69476f7665726e616e63653a2073656e646572206e6f7420616c6c6f77656420746f20646f21546f6d69476f7665726e616e63653a20555047524144455f4e4f5f4348414e4745546f6d69476f7665726e616e63653a20555047524144455f4e4f5f5245574152445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220ca8e1b9e999fd30085a41774bd5d3314bb84fc9da0cf8571cfba47fe05a7df8064736f6c63430006060033",
  "devdoc": {
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19633,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "baseToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20865,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "lockTime",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 20867,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 20869,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "stakingSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 20873,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20877,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "allowance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20735,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 45,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "_roles",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)41_storage)"
      },
      {
        "astId": 4359,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "version",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4361,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "configAddr",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4363,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "ballotFactoryAddr",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4365,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "rewardAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 4368,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "T_CONFIG",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4371,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "T_LIST_TOKEN",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4374,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "T_TOKEN",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4377,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "T_SNAPSHOT",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4380,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "T_REVENUE",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 4382,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "VOTE_DURATION",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 4384,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "FREEZE_DURATION",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 4386,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "REVENUE_VOTE_DURATION",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4388,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "REVENUE_FREEZE_DURATION",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 4402,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "REVENUE_PROPOSAL",
        "offset": 0,
        "slot": "21",
        "type": "t_bytes32"
      },
      {
        "astId": 4408,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "SNAPSHOT_PROPOSAL",
        "offset": 0,
        "slot": "22",
        "type": "t_bytes32"
      },
      {
        "astId": 4412,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "ballotTypes",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4416,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "configBallots",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 4420,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "tokenBallots",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4424,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "rewardOf",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4428,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "ballotOf",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4434,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "applyTokenOf",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4440,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "collectUsers",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4444,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "tokenUsers",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4447,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "ballots",
        "offset": 0,
        "slot": "31",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4450,
        "contract": "contracts/TomiGovernance.sol:TomiGovernance",
        "label": "revenueBallots",
        "offset": 0,
        "slot": "32",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)41_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)41_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1995_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1994,
            "contract": "contracts/TomiGovernance.sol:TomiGovernance",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1730_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)41_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 38,
            "contract": "contracts/TomiGovernance.sol:TomiGovernance",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)1995_storage"
          },
          {
            "astId": 40,
            "contract": "contracts/TomiGovernance.sol:TomiGovernance",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1730_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1725,
            "contract": "contracts/TomiGovernance.sol:TomiGovernance",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1729,
            "contract": "contracts/TomiGovernance.sol:TomiGovernance",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}